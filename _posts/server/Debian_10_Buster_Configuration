
	Debian 10  knows1 Configuration

وصلنا : (03) Network Settings
################################################
|                     |                        |
################################################

Debian 10  knows1
****************

#######################
|  Install Debian      |
#######################
Install
***************
1- Debian 10  knows1 : Download
2-Debian 10  knows1 : Install

Initial Settings
******************
(01) Add New Users
(02) Set Command Alias
(03) Network Settings
(04) Services
(05) Update System
(06) Install Vim
(07) Sudo Settings
#######################
|   NTP_SSH Server     |
#######################
NTP Server
***********
(01) Configure NTP Server (NTPd)
(02) Configure NTP Server (Chrony)
(03) Configure NTP Client

SSH Server
***********
(01) Password Authentication
(02) SSH File Transfer (Debian)
(03) SSH File Transfer (Windows)
(04) SSH Key-Pair Authentication
(05) SFTPonly + Chroot
(06) Use SSHPass
(07) Use SSH-Agent
(08) Use Parallel SSH
#######################
|   DNS_DHCP Server   |
#######################
Dnsmasq
********
(01) Install Dnsmasq
(02) Configure DHCP Server

 BIND
******
(01) Install BIND
(02) Set Zone Files
(03) Verify Resolution
(04) Set CNAME Record
(05) Configure Slave DNS Server

DHCP Server
************
(01) Configure DHCP Server
(02) Configure DHCP Client
#######################
|   Storage Server   |
#######################
 NFS
******
(01) Configure NFS Server
(02) Configure NFS Client
(03) NFS 4 ACL Tool


iSCSI
******
(01) Configure iSCSI Target (targetcli)
(02) Configure iSCSI Target (tgt)
(03) Configure iSCSI Initiator


GlusterFS
**********
(01) Install GlusterFS
(02) Distributed Configuration
(03) Replication Configuration
(04) Distributed + Replication
(05) Dispersed Configuration
(06) Configure GlusterFS Client
(07) GlusterFS + NFS-Ganesha

#######################
| Virtualization  |
#######################
KVM
****
(01) Install KVM(02) Create Virtual Machine
(03) Create Virtual Machine (GUI)
(04) Libvirt Basic Operation
(05) Virtual Management tools
(06) Configure SPICE Server
(07) Configure SPICE Client
(08) Nested KVM
(09) Live Migration
(10) Storage Migration



 VirtualBox
************
(01) Install VirtualBox
(02) Create Virtual Machine
(03) Install GuestAdditions
(04) Create Virtual Machine (GUI)



 Vagrant
**********
(01) Install Vagrant

#######################
| Container Platform  |
#######################
 Docker
*********
(01) Install Docker
(02) Add Container images
(03) Access to Container Services
(04) Use Dockerfile
(05) Use Persistent Storage
(06) Use Docker-Registry
(07) Use Docker-Registry (Auth)
(08) Use Docker Compose
(09) Configure Swarm Cluster

#######################
| Directory Server |
#######################
OpenLDAP
*********
(01) Configure LDAP Server
(02) Add LDAP User Accounts
(03) Configure LDAP Client
(04) LDAP over SSL/TLS
(05) LDAP Replication
(06) LDAP Multi-Master Replication



 NIS Server
************
(01) Configure NIS Server
(02) Configure NIS Client
(03) Configure NIS Slave

#######################
| WEB Server |
#######################

Apache2
********
(01) Install Apache2
(02) Use Perl Scripts
(03) Use PHP Scripts
(04) Use Ruby Scripts
(05) Use Python Scripts
(06) Enable Userdir
(07) Virtual Host Setting
(08) SSL/TLS Setting
(09) Set Basic Authentication
(10) Set Basic Authentication + PAM
(11) Set Kerberos Authentication
(12) Use WebDAV
(13) PHP + PHP-FPM Setting
(14) Install RoundCube Web Mail

#######################
| WEB Server |
#######################

Nginx
******
(01) Install Nginx
(02) Virtual Hostings
(03) Use UserDir
(04) SSL/TLS Setting
(05) CGI executable Environment
(06) Basic Authentication
(07) PHP + PHP-FPM
(08) Reverse Proxy Setting
(09) Load Balancing

#######################
| Database |
#######################
 MariaDB
**********
(01) Install MariaDB
(02) MariaDB over SSL/TLS
(03) MariaDB Replication
(04) MariaDB Galera Cluster


PostgreSQL
***********
(01) Install PostgreSQL
(02) Install phpPgAdmin
(03) PostgreSQL over SSL/TLS
(04) Streaming Replication

#######################
| FTP_Mail Server |
#######################
 FTP Server
***********
(01) Install Vsftpd
(02) Install ProFTPD
(03) Install Pure-FTPd
(04) FTP Client (Debian)
(05) FTP Client (Windows)
(06) Vsftpd over SSL/TLS
(07) Proftpd over SSL/TLS
(08) Pure-FTPd over SSL/TLS


MAIL Server
************
(01) Install Postfix
(02) Install Dovecot
(03) Add Mail Accounts (OS User)
(04) Email Client's Setting
(05) Add Mail Accounts (Virtual User)
(06) SSL/TLS Setting
(07) Virtual Domain Setting
(08) Postfix + Clamav + Amavisd
(09) Mail Log Report : pflogsum

#######################
| Samba Server |
#######################

Samba
*******
(01) Configure Fully accessed share Folder
(02) Configure Limited share Folder
(03) Join in AD Domain with Samba Winbind
(04) Samba AD DC : Configure DC
(05) Samba AD DC : User Management
(06) Samba AD DC : Join in Domain

#######################
| Proxy_Load Balance |
#######################
Squid
*****
(01) Install Squid(02) Proxy Clients Setting
(03) Configure Basic Authentication
(04) Reverse Proxy Setting
(05) Squid + SquidGuard
(06) Squid Log Report : LightSquid



HAProxy
*******
(01) HTTP Load Balancing
(02) SSL/TLS Setting
(03) Refer to the Statistics (Web)
(04) Refer to the Statistics (CUI)
(05) Layer4 Mode Load Balancing

#######################
| Monitoring          |
#######################

NetData
********
(01) Install NetData


SysStat
********
(01) Install SysStat(02) SysStat Howto

Zabbix 4.0 LTS
***************
(01) Install Zabbix 4.0
(02) Initial Setup
(03) Change Admin Password
(04) Set Monitoring Target Host
(05) Set SMTP Server for Notification
(06) Notification Email Setting
(07) Add Monitoring Target Host (Debian)
(08) Add Monitoring Target Host (Windows)
(09) Add Monitoring Target Item

#######################
| Desktop Environment |
#######################

(01) GNOME Desktop Environment
(02) KDE Desktop Environment
(03) Cinnamon Desktop Environment
(04) MATE Desktop Environment
(05) Xfce Desktop Environment
(06) Configure VNC Server
(07) VNC Client : noVNC
(08) Configure Xrdp Server

#######################
|         Others      |
#######################

Create SSL Certificates (Self-Sign)
Get SSL Certificates (Let's Encrypt)
Set System Timezone
Set KeyboardMap
Set System Locale
Set Hostname
Join in Active Directory Domain
Install Clam AntiVirus

ل*********************************************************
ل################البداية بعد الفهرس##################
ل*********************************************************
	Debian 10  knows1 Configuration

################################################
|                     |                        |
################################################

Debian 10  knows1
****************

#######################
|  Install Debian      |
#######################
Install
***************
1- Debian 10  : Download
---------------------------------

{1} Download Debian
---------------------
https://www.debian.org/distrib/

[2] verify they are authentic.
------------------------------
How can I verify my download is correct and exactly what has been created by Debian?

Verifying authenticity of Debian CDs

- To validate the contents of a CD image SHA256 or SHA512 .

$ sha512sum debian-10.1.0-amd64-DVD-3.iso
$ sha256sum + file_name.sha256

-go to https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/SHA512SUMS

راجع : https://fragen.knows1.com/debian/How-do-I-check-my-md5sum-or-sha1sum-checksum/


[3] Burn Debian
-----------------

dd if=debian-10.1.0-amd64-DVD-3.iso of=/dev/sdb bs=4M; sync

{2}Initial Settings
******************
(01) Add New Users
--------------------
# add a user [knows1]

$ cut -d : -f 1 /etc/passwd
$ cut -d : -f 1 /etc/group

:~# adduser  knows1

[2]root user account.

root@ knows1:~# usermod -G adm  knows1

root@ knows1:~# vi /etc/pam.d/su
# line 15: uncomment and add the group
auth       required   pam_wheel.so group=adm
[3]	If you'd like to remove user accounts, Configure like follows.
# remove a user [ knows1] (only removed user account)

ubuntu@ knows1:~$ deluser  knows1
# remove a user [ knows1] (removed user account and his home directory)
ubuntu@ knows1:~$ deluser  knows1 --remove-home


+++++++++++++++
$ who -a
$ w


(02) Set Command Alias
-----------------------

Set Command Alias for some commands that are often used.
[1]	Apply to all users as default.
root@ knows1:~# vi /etc/profile.d/command_alias.sh
# create new file
# add alias you'd like to set
alias ll='ls $LS_OPTIONS -l'
alias l='ls $LS_OPTIONS -lA'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# reload
root@ knows1:~# source /etc/profile.d/command_alias.sh

[2]	Apply to a user. ( a user [ knows1] applies for himself )
 knows1@ knows1:~$ vi ~/.bashrc
# add to the end : add alias you'd like to set

alias ll='ls $LS_OPTIONS -l'
alias l='ls $LS_OPTIONS -lA'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

 knows1@ knows1:~$ source ~/.bashrc


(03) Network Settings
-----------------------
كيف أعرف

كيف أعرف name server ؟

$ cat /etc/resolv.conf


كيف أعرف gateway ؟


$ sudo route -n

كيف أعرف broadcast address ؟


$  netstat -i

$ sudo ifconfig + Iface ضع اسم

كيف أعرف netmask ؟

نفس السابق .

[1]	Change to static IP addres if you use Debian as a Network Server.
The interface name [ens2] below example is different on each environment, replace it to your own one.
root@ knows1:~# vi /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug ens2
# comment out
#iface ens2 inet dhcp

# add static settings
iface ens2 inet static
# IP address
address 10.0.0.30
# network address
network 10.0.0.0
# subnet mask
netmask 255.255.255.0
# broadcast address
broadcast 10.0.0.255
# default gateway
gateway 10.0.0.1
# name server
dns-nameservers 10.0.0.10

root@ knows1:~# systemctl restart networking ifup@ens2
root@ knows1:~# ip addr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: ens2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:87:3e:e4 brd ff:ff:ff:ff:ff:ff
    inet 10.0.0.30/24 brd 10.0.0.255 scope global ens2
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe87:3ee4/64 scope link
       valid_lft forever preferred_lft forever
[2]	Disable IPv6 if you do not need.
root@ knows1:~# echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
root@ knows1:~# sysctl -p
net.ipv6.conf.all.disable_ipv6 = 1
root@ knows1:~# ip addr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: ens2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 52:54:00:87:3e:e4 brd ff:ff:ff:ff:ff:ff
    inet 10.0.0.30/24 brd 10.0.0.255 scope global ens2
       valid_lft forever preferred_lft forever

(04) Services
----------------
[1]	It's possible to make sure services' status like follows.
# display the list of services which are running
root@ knows1:~# systemctl -t service
UNIT                            LOAD   ACTIVE SUB     DESCRIPTION
apparmor.service                loaded active exited  Load AppArmor profiles
blk-availability.service        loaded active exited  Availability of block devices
console-setup.service           loaded active exited  Set console font and keymap
cron.service                    loaded active running Regular background program processing daemon
dbus.service                    loaded active running D-Bus System Message Bus
.....
.....
systemd-udevd.service           loaded active running udev Kernel Device Manager
systemd-update-utmp.service     loaded active exited  Update UTMP about System Boot/Shutdown
systemd-user-sessions.service   loaded active exited  Permit User Sessions
user-runtime-dir@0.service      loaded active exited  User Runtime Directory /run/user/0
user@0.service                  loaded active running User Manager for UID 0

LOAD   = Reflects whether the unit definition was properly loaded.
ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
SUB    = The low-level unit activation state, values depend on unit type.

33 loaded units listed. Pass --all to see loaded but inactive units, too.
To show all installed unit files use 'systemctl list-unit-files'.

# the list of all services' setting
root@ knows1:~# systemctl list-unit-files -t service
UNIT FILE                              STATE
apparmor.service                       enabled
apt-daily-upgrade.service              static
apt-daily.service                      static
autovt@.service                        enabled
blk-availability.service               enabled
.....
.....
umountnfs.service                      masked
umountroot.service                     masked
urandom.service                        static
user-runtime-dir@.service              static
user@.service                          static
x11-common.service                     masked

133 unit files listed.
[2]	Stop and turn OFF auto-start setting for a service if you don'd need it. (it's [Apparmor] as an example below)
root@ knows1:~# systemctl stop apparmor
root@ knows1:~# systemctl disable apparmor

(05) Update System
-------------------

[1]	Update Debian System via network.
After it has been a production System, maybe it's difficult to update System, but at least after installing, Update Debian Server.
# update list first
root@ knows1:~# apt update
Hit:1 http://deb.debian.org/debian  knows1 InRelease
Get:2 http://deb.debian.org/debian  knows1-updates InRelease [46.8 kB]
Get:3 http://security.debian.org/debian-security  knows1/updates InRelease [39.1 kB]
Get:4 http://security.debian.org/debian-security  knows1/updates/main Sources [1,984 B]
Get:5 http://security.debian.org/debian-security  knows1/updates/main amd64 Packages [1,864 B]
Get:6 http://security.debian.org/debian-security  knows1/updates/main Translation-en [1,660 B]
Fetched 91.4 kB in 3s (33.2 kB/s)
Reading package lists... Done
Building dependency tree
Reading state information... Done
All packages are up to date.

# update System
root@ knows1:~# apt -y upgrade

(06) Install Vim
------------------

Install and Configure Vim that is more convenience than vi.
[1]	Install Vim.
root@ knows1:~# apt -y install vim
[2]	Configure Vim.
On the example below, Apply to a user. If you'd like to applly to all users as default, Write the same settings in [/etc/vim/vimrc].
root@ knows1:~# vi ~/.vimrc
" use extended function of vim (no compatible with vi)
set nocompatible
" specify encoding
set encoding=utf-8
" specify file encoding
set fileencodings=utf-8,iso-2022-jp,sjis,euc-jp
" specify file formats
set fileformats=unix,dos
" take backup
" if not, specify [ set nobackup ]
set backup
" specify backup directory
set backupdir=~/backup
" take 50 search histories
set history=50
" ignore Case
set ignorecase
" distinct Capital if you mix it in search words
set smartcase
" highlights matched words
" if not, specify [ set nohlsearch ]
set hlsearch
" use incremental search
" if not, specify [ set noincsearch ]
set incsearch
" show line number
" if not, specify [ set nonumber ]
set number
" Visualize break ( $ ) or tab ( ^I )
set list
" highlights parentheses
set showmatch
" not insert LF at the end of file
set binary noeol
" set auto indent
" if not, specify [ noautoindent ]
set autoindent
" show color display
" if not, specify [ syntax off ]
syntax on
" change colors for comments if [ syntax on ] is set
highlight Comment ctermfg=LightCyan
" wrap lines
" if not, specify [ set nowrap ]
set wrap

(07) Sudo Settings
------------------------

Configure Sudo to separate users' duty if some people share privileges.
[1]	Install Sudo.
root@ knows1:~# apt -y install sudo
[2]	Transfer root privilege to a user all.
root@ knows1:~# visudo
# add to the end : user [ knows1] can use all root privilege
# how to write ⇒ destination host=(owner) command
 knows1    ALL=(ALL:ALL) ALL

# push [Ctrl + x] key to quit visudo
# verify with user [ knows1]
 knows1@ knows1:~$ /usr/sbin/reboot
Failed to set wall message, ignoring: The name org.freedesktop.PolicyKit1 was not provided by any .service files
Failed to reboot system via logind: The name org.freedesktop.PolicyKit1 was not provided by any .service files
Failed to open initctl fifo: Permission denied
Failed to talk to init daemon.
# denied
 knows1@ knows1:~$ sudo /usr/sbin/reboot
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

[sudo] password for  knows1:   #  knows1's password
.....
.....
# possible execute
[3]	In addition to the setting [1], set that some commands are not allowed.
root@ knows1:~# visudo
# add aliase for the kind of shutdown commands
# Cmnd alias specification
 Cmnd_Alias SHUTDOWN = /usr/sbin/halt, /usr/sbin/shutdown, \
/usr/sbin/poweroff, /usr/sbin/reboot, /usr/sbin/init, /usr/bin/systemctl

# add ( commands in aliase [SHUTDOWN] are not allowed )
 knows1    ALL=(ALL:ALL) ALL, !SHUTDOWN

# verify with user [ knows1]
 knows1@ knows1:~$ sudo /usr/sbin/reboot
[sudo] password for  knows1:
Sorry, user  knows1 is not allowed to execute '/usr/sbin/reboot' as root on  knows1.srv.world.   # denied
[4]	Transfer some commands with root privilege to users in a group.
root@ knows1:~# visudo
# add aliase for the kind of user management commands
# Cmnd alias specification
 Cmnd_Alias USERMGR = /usr/sbin/adduser, /usr/sbin/useradd, /usr/sbin/newusers, \
/usr/sbin/deluser, /usr/sbin/userdel, /usr/sbin/usermod, /usr/bin/passwd

# add to the end
%usermgr   ALL=(ALL:ALL) USERMGR

root@ knows1:~# groupadd usermgr
root@ knows1:~# usermod -G usermgr  knows1
# verify with user [ knows1]
 knows1@ knows1:~$ sudo /usr/sbin/useradd testuser
 knows1@ knows1:~$
 knows1@ knows1:~$ sudo /usr/bin/passwd testuser
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
# possible execute
[5]	Transfer some specific commands with root privilege to a user.
root@ knows1:~# visudo
# add to the end : set specific commands to each user
 fedora   ALL=(ALL:ALL) /usr/sbin/visudo
cent     ALL=(ALL:ALL) /usr/sbin/adduser, /usr/sbin/useradd, /usr/sbin/newusers, \
                       /usr/sbin/deluser, /usr/sbin/userdel, /usr/sbin/usermod, /usr/bin/passwd
ubuntu   ALL=(ALL:ALL) /usr/bin/vim

# verify with user [fedora]
fedora@ knows1:~$ sudo /usr/sbin/visudo
# possible open and edit
## Sudoers allows particular users to run various commands as
## the root user, without needing the root password.
##
# verify with user [cent]
cent@ knows1:~$ sudo /usr/sbin/userdel -r testuser
cent@ knows1:~$     # possible execute
# verify with user [ubuntu]
ubuntu@ knows1:~$ sudo /usr/bin/vim /root/.profile
# possible open and edit
# ~/.profile: executed by Bourne-compatible login shells.
[6]	The logs for sudo are kept in [/var/log/auth.log], but there are many kind of logs in it. If you'd like to keep only sudo's log in another file, Configure like follows.
root@ knows1:~# visudo
# add to the end
Defaults syslog=local1
root@ knows1:~# vi /etc/rsyslog.conf
# line 61: add
local1.*                        /var/log/sudo.log
auth,authpriv.*;local1.none     /var/log/auth.log

root@ knows1:~# systemctl restart rsyslog
#######################
|   NTP_SSH Server     |
#######################
NTP Server
***********
(01) Configure NTP Server (NTPd)
-----------------------------------

Install NTPd and Configure NTP server for time adjustment. NTP uses 123/UDP.
[1]	Install and Configure NTPd.
root@ knows1:~# apt -y install ntp
root@ knows1:~# vi /etc/ntp.conf
# line 23: comment out
# pool 0.debian.pool.ntp.org iburst
# pool 1.debian.pool.ntp.org iburst
# pool 2.debian.pool.ntp.org iburst
# pool 3.debian.pool.ntp.org iburst
# add servers in your timezone to sync times
server ntp.nict.jp iburst
server ntp1.jst.mfeed.ad.jp iburst
# line 52: add the network range you allow to receive requests
restrict 10.0.0.0 mask 255.255.255.0 nomodify notrap
root@ knows1:~# systemctl restart ntp
# show status
root@ knows1:~# ntpq -p
     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
 ntp-b2.nict.go. .NICT.           1 u    -   64    1   18.465   11.431   0.000
 ntp1.jst.mfeed. 133.243.236.17   2 u    1   64    1   18.954   10.659   0.678


(02) Configure NTP Server (Chrony)
------------------------------------

Install Chrony and Configure NTP server for time adjustment. NTP uses 123/UDP.
[1]	Install and Configure Chrony.
root@ knows1:~# apt -y install chrony
root@ knows1:~# vi /etc/chrony/chrony.conf
# line 3: comment out
#pool 2.debian.pool.ntp.org iburst
# add servers in your timezone to sync times
server ntp.nict.jp iburst
server ntp1.jst.mfeed.ad.jp iburst
# add to the end : add the network range you allow to receive requests
allow 10.0.0.0/24
root@ knows1:~# systemctl restart chrony
# show status
root@ knows1:~# chronyc sources
210 Number of sources = 2
MS Name/IP address         Stratum Poll Reach LastRx Last sample
===============================================================================
^* ntp-b3.nict.go.jp             1   6    17     0  -2672us[-2819us] +/-   11ms
^- ntp1.jst.mfeed.ad.jp          2   6     7     2   -486us[-4742us] +/-   90ms

(03) Configure NTP Client
--------------------------
Configure NTP Client : Debian

Configure NTP Client.
[1]
The settings of NTP Client are mostly the same with Server's settings, so refer to NTPd Settings or Chrony Settings. For different settings from Server's one, Clients don't need to receive time synchronization requests from other computers, so it does not need to set access permission.
[2]	If you don't use NTP service daemon but use a command to sync time at once, run like follows.
root@client:~# apt -y install chrony
root@client:~# chronyc makestep
200 OK

SSH Server
***********
(01) Password Authentication
------------------------------

Configure SSH Server to manage a server from the remore computer. SSH uses 22/TCP.
[1]	Password Authentication for Open SSH Server on Debian is enabled by default, so it's possible to login without changing any settings. Furthermore, root account is prohibited Password Authentication by default with [PermitRootLogin prohibit-password], so default setting is good for use. But if you prohibit root login all for more security, change like follows.
root@ knows1:~# apt -y install openssh-server
root@ knows1:~# vi /etc/ssh/sshd_config
# line 32: uncomment and change to no
PermitRootLogin no
root@ knows1:~# systemctl restart ssh
SSH Client : Debian

Configure SSH Client on Debian.
[2]	Install SSH Client.
root@client:~# apt -y install openssh-client
[3]	Connect to the SSH server with a common user.
# ssh [username@hostname or IP address]
root@client:~# ssh debian@ knows1.srv.world
The authenticity of host ' knows1.srv.world (10.0.0.30)' can't be established.
ECDSA key fingerprint is SHA256:eRQZY2jN81BSHcYQ2lCWrna+xtSaJI79Vbz+2G973wY.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added ' knows1.srv.world,10.0.0.30' (ECDSA) to the list of known hosts.
debian@ knows1.srv.world's password:   # password of the user
Linux  knows1.srv.world 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
debian@ knows1:~$   # just logined
[4]	It's possbile to execute commands on remote Host with adding commands to ssh command.
# for example, cat /etc/passwd on remote host
debian@client:~$ ssh debian@ knows1.srv.world "cat /etc/passwd"
debian@ knows1.srv.world's password:
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
...
...
debian:x:1000:1000:debian,,,:/home/debian:/bin/bash
sshd:x:108:65534::/var/run/sshd:/usr/sbin/nologin

(02) SSH File Transfer (Debian)
--------------------------------

It's possible to transfer files with SSH.
[1]	It's the exmaple for using SCP (Secure Copy).
# how to ⇒ scp [Option] Source Target
# copy the [test.txt] on local to remote server [www.srv.world]
debian@ knows1:~$ scp ./test.txt debian@www.srv.world:~/
debian@10.0.0.30's password:     # password of the user
test.txt                                                100%   10     0.0KB/s   00:00

# copy the [/home/debian/test.txt] on remote server [www.srv.world] to the local
debian@ knows1:~$ scp debian@www.srv.world:/home/debian/test.txt ./test.txt
debian@10.0.0.30's password:
test.txt                                                100%   10     0.0KB/s   00:00
[2]	It's example to use SFTP (SSH File Transfer Protocol). SFTP server function is enabled by default, but if not, enable it to add the line [Subsystem sftp /usr/lib/openssh/sftp-server] in [/etc/ssh/sshd_config].
# sftp [Option] [user@hostname]
debian@ knows1:~$ sftp debian@www.srv.world
debian@www.srv.world's password:     # password of the user
Connected to www.srv.world.
sftp>
# show current directory on remote server
sftp> pwd
Remote working directory: /home/debian
# show current directory on local server
sftp> !pwd
/home/debian
# show files in current directory on FTP server
sftp> ls -l
drwxrwxr-x    2 debian     debian            6 Jul 29 21:33 public_html
-rw-rw-r--    1 debian     debian           10 Jul 28 22:53 test.txt
# show files in current directory on local server
sftp> !ls -l
total 4
-rw-rw-r-- 1 debian debian 10 Jul 29 21:31 test.txt
# change directory
sftp> cd public_html
sftp> pwd
Remote working directory: /home/debian/public_html
# upload a file to remote server
sftp> put test.txt debian.txt
Uploading test.txt to /home/debian/debian.txt
test.txt 100% 10 0.0KB/s 00:00
sftp> ls -l
drwxrwxr-x    2 debian     debian            6 Jul 29 21:33 public_html
-rw-rw-r--    1 debian     debian           10 Jul 29 21:39 debian.txt
-rw-rw-r--    1 debian     debian           10 Jul 28 22:53 test.txt
# upload some files to remote server
sftp> put *.txt
Uploading test.txt to /home/debian/test.txt
test.txt 100% 10 0.0KB/s 00:00
Uploading test2.txt to /home/debian/test2.txt
test2.txt 100% 0 0.0KB/s 00:00
sftp> ls -l
drwxrwxr-x    2 debian     debian            6 Jul 29 21:33 public_html
-rw-rw-r--    1 debian     debian           10 Jul 29 21:39 debian.txt
-rw-rw-r--    1 debian     debian           10 Jul 29 21:45 test.txt
-rw-rw-r--    1 debian     debian           10 Jul 29 21:46 test2.txt
# download a file from remote server
sftp> get test.txt
Fetching /home/debian/test.txt to test.txt
/home/debian/test.txt 100% 10 0.0KB/s 00:00
# download some files from remote server
sftp> get *.txt
Fetching /home/debian/debian.txt to debian.txt
/home/debian/debian.txt 100% 10 0.0KB/s 00:00
Fetching /home/debian/test.txt to test.txt
/home/debian/test.txt 100% 10 0.0KB/s 00:00
Fetching /home/debian/test2.txt to test2.txt
/home/debian/test2.txt 100% 10 0.0KB/s 00:00
# create a directory on remote server
sftp> mkdir testdir
sftp> ls -l
drwxrwxr-x    2 debian     debian            6 Jul 29 21:33 public_html
-rw-rw-r--    1 debian     debian           10 Jul 29 21:39 debian.txt
-rw-rw-r--    1 debian     debian           10 Jul 29 21:45 test.txt
-rw-rw-r--    1 debian     debian           10 Jul 29 21:46 test2.txt
drwxrwxr-x    2 debian     debian            6 Jul 29 21:53 testdir
# delete a directory on remote server
sftp> rmdir testdir
rmdir ok, `testdir' removed
sftp> ls -l
drwxrwxr-x    2 debian     debian            6 Jul 29 21:33 public_html
-rw-rw-r--    1 debian     debian           10 Jul 29 21:39 debian.txt
-rw-rw-r--    1 debian     debian           10 Jul 29 21:45 test.txt
-rw-rw-r--    1 debian     debian           10 Jul 29 21:46 test2.txt
# delete a file on remote server
sftp> rm test2.txt
Removing /home/debian/test2.txt
sftp> ls -l
drwxrwxr-x    2 debian     debian            6 Jul 29 21:33 public_html
-rw-rw-r--    1 debian     debian           10 Jul 29 21:39 debian.txt
-rw-rw-r--    1 debian     debian           10 Jul 29 21:45 test.txt
# execute commands with ![command]
sftp> !cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
...
...
debian:x:1001:1001::/home/debian:/bin/bash
# exit
sftp> quit
221 Goodbye.

(03) SSH File Transfer (Windows)
-----------------------------------



(04) SSH Key-Pair Authentication
----------------------------------


Configure SSH server to login with Key-Pair Authentication. Create a private key for client and a public key for server to do it.
[1]	Create Key-Pair for each user, so login with a common user on SSH Server Host and work like follows.
# create key-pair
debian@ knows1:~$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/debian/.ssh/id_rsa): # Enter or input changes if you want
Created directory '/home/debian/.ssh'.
Enter passphrase (empty for no passphrase):   # set passphrase (if set no passphrase, Enter with empty)
Enter same passphrase again:
Your identification has been saved in /home/debian/.ssh/id_rsa.
Your public key has been saved in /home/debian/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:kuGgDroStSmndJnWtqJaRfgOsZpL0M8b2Cg7WfAhEcQ debian@ knows1.srv.world
The key's randomart image is:
debian@ knows1:~$ mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
debian@ knows1:~$ chmod 600 ~/.ssh/authorized_keys
[2]	Transfer the secret key created on the Server to a Client, then it's possbile to login with Key-Pair authentication.
debian@www:~$ mkdir ~/.ssh
debian@www:~$ chmod 700 ~/.ssh
# copy the secret key to the local ssh directory
debian@www:~$ scp debian@10.0.0.30:/home/debian/.ssh/id_rsa ~/.ssh/
debian@10.0.0.30's password:
id_rsa
debian@www:~$ ssh debian@10.0.0.30
Enter passphrase for key '/home/debian/.ssh/id_rsa':   # passphrase if you set
Last login: Wed Jul 10 19:12:35 2019 from 10.0.0.229
debian@ knows1:~$   # just logined
[3]	If you set [PasswordAuthentication no], it's more secure.
root@ knows1:~# vi /etc/ssh/sshd_config
# line 56: uncomment and change to [no]
PasswordAuthentication no
root@ knows1:~# systemctl restart ssh

(05) SFTPonly + Chroot
-------------------------

Configure SFTP only + Chroot.
Some users who are applied this settings can access only with SFTP and access to the permitted directories.
[1]	For example, Set /home as the Chroot directory.
# create a group for SFTP
root@ knows1:~# groupadd sftp_users
# for example, apply to a user [debian] for SFTP only
root@ knows1:~# usermod -G sftp_users debian
root@ knows1:~# vi /etc/ssh/sshd_config
# line 114: comment out and add a line like follows
#Subsystem sftp /usr/lib/openssh/sftp-server
Subsystem sftp internal-sftp
# add to the end
Match Group sftp_users
  X11Forwarding no
  AllowTcpForwarding no
  ChrootDirectory /home
  ForceCommand internal-sftp
root@ knows1:~# systemctl restart ssh
[2]	Try to access with a user to verify settings.
debian@www:~$ ssh debian@10.0.0.30
debian@10.0.0.30's password:
This service allows sftp connections only.
Connection to 10.0.0.30 closed.     # denied normally
debian@www:~$ sftp debian@10.0.0.30
Connecting to 10.0.0.30...
debian@10.0.0.30's password:
sftp> ls -l
drwxr-xr-x    2 1001     1001         4096 Jul 10 06:16  knows1
drwxr-xr-x    3 1000     1000         4096 Jul 10 07:17 debian
sftp> pwd
Remote working directory: /
sftp> exit

(06) Use SSHPass
--------------------

Use SSHPass to automate inputting password on password authentication.
This is convenient but has security risks (leak of password), take special care if you use it.
[1]	Install SSHPass.
root@ knows1:~# apt -y install sshpass
[2]	How to use SSHPass.
# -p password : from argument
# if initial connection, specify [StrictHostKeyChecking=no]
debian@ knows1:~$ sshpass -p password ssh -o StrictHostKeyChecking=no 10.0.0.51 hostname
node01.srv.world
# -f file : from file
debian@ knows1:~$ echo 'password' > sshpass.txt
debian@ knows1:~$ chmod 600 sshpass.txt
debian@ knows1:~$ sshpass -f sshpass.txt ssh 10.0.0.51 hostname
node01.srv.world
# -e : from env variable
debian@ knows1:~$ export SSHPASS=password
debian@ knows1:~$ sshpass -e ssh 10.0.0.51 hostname
node01.srv.world


(07) Use SSH-Agent
--------------------

Use SSH-Agent to automate inputting passphrase on key-pair authentication.
[1]
SSH-Agent automates to input passphrase on SSH Key-pair authentication, so this is based on the environment you set SSH Key-pair with passphrase.
[2]	How to use SSH-Agent.
# start SSH-Agent
debian@ knows1:~$ eval `ssh-agent`
Agent pid 427
# add identity
debian@ knows1:~$ ssh-add
Enter passphrase for /home/debian/.ssh/id_rsa:
Identity added: /home/debian/.ssh/id_rsa (debian@ knows1.srv.world)
# confirm
debian@ knows1:~$ ssh-add -l
2048 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx debian@ knows1.srv.world (RSA)
# try to conenct with SSH without passphrase
debian@ knows1:~$ ssh node01.srv.world hostname
node01.srv.world
# exit from SSH-Agent
debian@ knows1:~$ eval `ssh-agent -k`
Agent pid 427 killed

(08) Use Parallel SSH
-----------------------

Install Parallel SSH to connect to multiple hosts.
[1]	Install PSSH.
root@ knows1:~# apt -y install pssh
[2]	How to use PSSH.
This is the case for SSH Key-pair authentication without passphrase. If passphrase is set in Key-pair, start SSH-Agent first to automate inputting passphrase.
# connect to hosts and execute hostname command
debian@ knows1:~$ parallel-ssh -H "10.0.0.51 10.0.0.52" -i "hostname"
[1] 17:28:02 [SUCCESS] 10.0.0.51
node01.srv.world
[2] 17:28:02 [SUCCESS] 10.0.0.52
node02.srv.world
# it's possible to read host list fron a file
debian@ knows1:~$ vi pssh_hosts.txt
# write hosts per line like follows
debian@10.0.0.51
debian@10.0.0.52
debian@ knows1:~$ parallel-ssh -h pssh_hosts.txt -i "uptime"
[1] 19:37:59 [SUCCESS] debian@10.0.0.52
 19:37:59 up  1:35,  0 users,  load average: 0.00, 0.00, 0.00
[2] 19:37:59 [SUCCESS] debian@10.0.0.51
 19:37:59 up  1:35,  0 users,  load average: 0.00, 0.00, 0.00
[3]	It's possible to connect with password authentication too, but it needs passwords on all hosts are the same one.
debian@ knows1:~$ parallel-ssh -h pssh_hosts.txt -A -O PreferredAuthentications=password -i "uname -r"
Warning: do not enter your password if anyone else has superuser
privileges or access to your account.
Password:     # input password
[1] 12:54:06 [SUCCESS] debian@10.0.0.51
2.6.32-504.12.2.el6.x86_64
[2] 12:54:06 [SUCCESS] debian@10.0.0.52
2.6.32-504.12.2.el6.x86_64
[4]
By the way, PSSH package includes [parallel-scp], [parallel-rsync], [parallel-slurp], [parallel-nuke] commands, and you can use them with the same usage of [parallel-ssh].


#######################
|   DNS_DHCP Server   |
#######################
Dnsmasq
********
(01) Install Dnsmasq
---------------------


Install Dnsmasq which is the lightweight DNS forwarder and DHCP Server Software.
[1]	Install Dnsmasq.
root@ knows1:~# apt -y install dnsmasq resolvconf
[2]	Configure Dnsmasq.
root@ knows1:~# vi /etc/dnsmasq.conf
# line 19: uncomment (never forward plain names)
domain-needed
# line 21: uncomment (never forward addresses in the non-routed address spaces)
bogus-priv
# line 53: uncomment (query with each server strictly in the order in resolv.conf)
strict-order
# line 67: add if you need
# query the specific domain name to the specific DNS server
# the example follows means query [server.education] domain to the [10.0.0.10] server
server=/server.education/10.0.0.10
# line 135: uncomment (add domain name automatically)
expand-hosts
# line 145: add (define domain name)
domain=srv.world
root@ knows1:~# systemctl restart dnsmasq
[3]	For DNS records, add them in [/etc/hosts]. Then, Dnsmasq will answer to queries from clients.
root@ knows1:~# vi /etc/hosts
# add records
10.0.0.30        knows1.srv.world  knows1

root@ knows1:~# systemctl restart dnsmasq
[4]	Verify to resolve Name or IP address from a client computer in internal network. By the way, when Dnsmasq is running, fixed value [127.0.0.1] is added in [/etc/resolv.conf] and also the value of "dns-nameservers" in [/etc/network/interfaces] is added and managed in [/var/run/dnsmasq/resolv.conf].
root@desktop:~# vi /etc/network/interfaces
# change DNS setting to Dnsmasq Server
dns-nameservers 10.0.0.30
root@desktop:~# systemctl restart ifup@ens2 resolvconf
root@desktop:~# dig  knows1.srv.world.

; <<>> DiG 9.11.5-P4-5.1-Debian <<>>  knows1.srv.world.
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 37213
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
; knows1.srv.world.                 IN      A

;; ANSWER SECTION:
 knows1.srv.world.          0       IN      A       10.0.0.30

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Jul 16 19:52:04 JST 2019
;; MSG SIZE  rcvd: 58

root@desktop:~# dig -x 10.0.0.30

; <<>> DiG 9.11.5-P4-5.1-Debian <<>> -x 10.0.0.30
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 12621
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;30.0.0.10.in-addr.arpa.                IN      PTR

;; ANSWER SECTION:
30.0.0.10.in-addr.arpa. 0       IN      PTR      knows1.srv.world.

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Jul 16 13:52:54 JST 2019
;; MSG SIZE  rcvd: 78

(02) Configure DHCP Server
---------------------------

Enable integrated DHCP function in Dnsmasq and Configure DHCP Server.
[1]	Configure Dnsmasq.
root@ knows1:~# vi /etc/dnsmasq.conf
# line 158: add (range of IP address to lease and term of lease)
dhcp-range=10.0.0.200,10.0.0.250,12h
# line 335: add (define default gateway)
dhcp-option=option:router,10.0.0.1
# line 344: add (define NTP, DNS, server and subnetmask)
dhcp-option=option:ntp-server,10.0.0.10
dhcp-option=option:dns-server,10.0.0.10
dhcp-option=option:netmask,255.255.255.0
root@ knows1:~# systemctl restart dnsmasq
[2]
That's OK, Configure DHCP client on client computer and verify it works normally.


 BIND
******
(01) Install BIND
--------------------


Install BIND to configure DNS server which resolves domain name or IP address. DNS uses 53/TCP,UDP.
[1]	Install BIND 9.
root@ knows1:~# apt -y install bind9 bind9utils dnsutils
[2]	Configure BIND 9.
On this example, Configure BIND with Grobal IP address [172.16.0.80/29], Private IP address [10.0.0.0/24], Domain name [srv.world]. However, Please replace IP addresses and Domain Name to your own environment. ( Actually, [172.16.0.80/29] is for private IP address, though. )
root@ knows1:~# vi /etc/bind/named.conf
include "/etc/bind/named.conf.options";
include "/etc/bind/named.conf.local";
# comment out
# include "/etc/bind/named.conf.default-zones";
# add
include "/etc/bind/named.conf.internal-zones";
include "/etc/bind/named.conf.external-zones";
root@ knows1:~# vi /etc/bind/named.conf.internal-zones
# create new
# define for internal section
view "internal" {
        match-clients {
                localhost;
                10.0.0.0/24;
        };
        # set zone for internal
        zone "srv.world" {
                type master;
                file "/etc/bind/srv.world.lan";
                allow-update { none; };
        };
        # set zone for internal *note
        zone "0.0.10.in-addr.arpa" {
                type master;
                file "/etc/bind/0.0.10.db";
                allow-update { none; };
        };
        include "/etc/bind/named.conf.default-zones";
};

root@ knows1:~# vi /etc/bind/named.conf.external-zones
# create new
# define for external section
view "external" {
        match-clients { any; };
        # allow any query
        allow-query { any; };
        # prohibit recursion
        recursion no;
        # set zone for external
        zone "srv.world" {
                type master;
                file "/etc/bind/srv.world.wan";
                allow-update { none; };
        };
        # set zone for external *note
        zone "80.0.16.172.in-addr.arpa" {
                type master;
                file "/etc/bind/80.0.16.172.db";
                allow-update { none; };
        };
};

 # *note : For How to write for reverse resolving, Write network address reversely like below
# Case of 10.0.0.0/24
# network address        ⇒ 10.0.0.0
# range of network       ⇒ 10.0.0.0 - 10.0.0.255
# how to write           ⇒ 0.0.10.in-addr.arpa

# Case of 172.16.0.80/29
# network address        ⇒ 172.16.0.80
# range of network       ⇒ 172.16.0.80 - 172.16.0.87
# how to write           ⇒ 80.0.16.172.in-addr.arpa
[3]	Limit ranges you allow to access if needed.
root@ knows1:~# vi /etc/bind/named.conf.options
options {
        directory "/var/cache/bind";

        // If there is a firewall between you and nameservers you want
        // to talk to, you may need to fix the firewall to allow multiple
        // ports to talk.  See http://www.kb.cert.org/vuls/id/800113

        // If your ISP provided one or more IP addresses for stable
        // nameservers, you probably want to use them as forwarders.
        // Uncomment the following block, and insert the addresses replacing
        // the all-0's placeholder.

        // forwarders {
        //      0.0.0.0;
        // };
        # query range you allow
        allow-query { localhost; 10.0.0.0/24; };
        # the range to transfer zone files
        allow-transfer { localhost; 10.0.0.0/24; };
        # recursion range you allow
        allow-recursion { localhost; 10.0.0.0/24; };
        //========================================================================
        // If BIND logs error messages about the root key being expired,
        // you will need to update your keys.  See https://www.isc.org/bind-keys
        //========================================================================
        dnssec-validation auto;

        auth-nxdomain no;    # conform to RFC1035
        # change if not use IPV6
        listen-on-v6 { none; };
};





(02) Set Zone Files
----------------------
	Create zone files that servers resolve IP address from domain name.

[1]	For internal zone,
On this example, Configure BIND with internal address [10.0.0.0/24], domain name [srv.world]. Pease replace IP addresses and Domain Name to your own environment.
root@ knows1:~# vi /etc/bind/srv.world.lan
 $TTL 86400
@   IN  SOA      knows1.srv.world. root.srv.world. (
        2019071601  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
        # define name server
        IN  NS       knows1.srv.world.
        # define name server's IP address
        IN  A       10.0.0.30
        # define mail exchanger
        IN  MX 10    knows1.srv.world.

# define IP address of the hostname
 knows1     IN  A       10.0.0.30
[2]	For external zone,
On this example, Configure BIND with internal address [172.16.0.80/29], domain name [srv.world]. Pease replace IP addresses and Domain Name to your own environment.
root@ knows1:~# vi /etc/bind/srv.world.wan
 $TTL 86400
@   IN  SOA      knows1.srv.world. root.srv.world. (
        2019071601  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
        # define name server
        IN  NS       knows1.srv.world.
        # define name server's IP address
        IN  A       172.16.0.82
        # define mail exchanger
        IN  MX 10    knows1.srv.world.

# define IP address of the hostname
 knows1     IN  A       172.16.0.82
Configure Zones for Address Resolution
 	Create zone files that servers resolve domain names from IP address.

[3]	For internal zone,
On this example, Configure BIND with internal address [10.0.0.0/24], domain name [srv.world]. Pease replace IP addresses and Domain Name to your own environment.
root@ knows1:~# vi /etc/bind/0.0.10.db
 $TTL 86400
@   IN  SOA      knows1.srv.world. root.srv.world. (
        2019071601  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
        # define name server
        IN  NS       knows1.srv.world.
        # define the range of this domain included
        IN  PTR     srv.world.
        IN  A       255.255.255.0

# define hostname of the IP address
30      IN  PTR      knows1.srv.world.
[4]	For external zone,
On this example, Configure BIND with internal address [172.16.0.80/29], domain name [srv.world]. Pease replace IP addresses and Domain Name to your own environment.
root@ knows1:~# vi /etc/bind/80.0.16.172.db
 $TTL 86400
@   IN  SOA      knows1.srv.world. root.srv.world. (
        2019071601  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
        # define name server
        IN  NS       knows1.srv.world.
        # define the range of this domain included
        IN  PTR     srv.world.
        IN  A       255.255.255.248

# define hostname of the IP address
82      IN  PTR      knows1.srv.world.



(03) Verify Resolution
-----------------------

Restart BIND to apply changes and Verify name or Address Resolution.
[1]	Change DNS setting to refer to local DNS.
root@ knows1:~# systemctl restart bind9
root@ knows1:~# vi /etc/resolv.conf
# change to own address
domain srv.world
search srv.world
nameserver 10.0.0.30
[2]	Try to resolv Name or Address normally.
root@ knows1:~# dig  knows1.srv.world.

; <<>> DiG 9.11.5-P4-5.1-Debian <<>>  knows1.srv.world.
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 55942
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: 4d7dc810ee0afaa6c3256f115d2d4ffd9c70cf67412a4e9e (good)
;; QUESTION SECTION:
; knows1.srv.world.                 IN      A

;; ANSWER SECTION:
 knows1.srv.world.          86400   IN      A       10.0.0.30

;; AUTHORITY SECTION:
srv.world.              86400   IN      NS       knows1.srv.world.

;; Query time: 0 msec
;; SERVER: 10.0.0.30#53(10.0.0.30)
;; WHEN: Tue Jul 16 19:18:05 JST 2019
;; MSG SIZE  rcvd: 100

root@ knows1:~# dig -x 10.0.0.30

; <<>> DiG 9.11.5-P4-5.1-Debian <<>> -x 10.0.0.30
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 18132
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: 777591e01deae66230c2736c5d2d5029a2956dbaf6ced141 (good)
;; QUESTION SECTION:
;30.0.0.10.in-addr.arpa.                IN      PTR

;; ANSWER SECTION:
30.0.0.10.in-addr.arpa. 86400   IN      PTR      knows1.srv.world.

;; AUTHORITY SECTION:
0.0.10.in-addr.arpa.    86400   IN      NS       knows1.srv.world.

;; ADDITIONAL SECTION:
 knows1.srv.world.          86400   IN      A       10.0.0.30

;; Query time: 0 msec
;; SERVER: 10.0.0.30#53(10.0.0.30)
;; WHEN: Tue Jul 16 19:18:49 JST 2019
;; MSG SIZE  rcvd: 136


(04) Set CNAME Record
-----------------------

If you'd like to set another name (Alias) to your Host, define CNAME record in zone file.
[1]	Set CNAME record in zone file.
root@ knows1:~# vi /etc/bind/srv.world.lan
$TTL 86400
@   IN  SOA      knows1.srv.world. root.srv.world. (
        # update serial
        2019071602  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
        IN  NS       knows1.srv.world.
        IN  A       10.0.0.30
        IN  MX 10    knows1.srv.world.

 knows1     IN  A       10.0.0.30
# aliase IN CNAME server's hostname
ftp     IN  CNAME    knows1.srv.world.

root@ knows1:~# rndc reload
server reload successful
root@ knows1:~# dig ftp.srv.world.

; <<>> DiG 9.11.5-P4-5.1-Debian <<>> ftp.srv.world.
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 54525
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: af56834de0be6ce71bf860135d2d5167604e9d7b9107d0d7 (good)
;; QUESTION SECTION:
;ftp.srv.world.                 IN      A

;; ANSWER SECTION:
ftp.srv.world.          86400   IN      CNAME    knows1.srv.world.
 knows1.srv.world.          86400   IN      A       10.0.0.30

;; AUTHORITY SECTION:
srv.world.              86400   IN      NS       knows1.srv.world.

;; Query time: 0 msec
;; SERVER: 10.0.0.30#53(10.0.0.30)
;; WHEN: Tue Jul 16 19:24:07 JST 2019
;; MSG SIZE  rcvd: 118


(05) Configure Slave DNS Server
-------------------------------

DHCP Server
************
(01) Configure DHCP Server
---------------------------

Configure DHCP ( Dynamic Host Configuration Protocol ) Server. DHCP Server uses 67/UDP.
[1]	Install and configure DHCP Server.
root@ knows1:~# apt -y install isc-dhcp-server
root@ knows1:~# vi /etc/default/isc-dhcp-server
# line 4: uncomment
DHCPDv4_CONF=/etc/dhcp/dhcpd.conf
# line 17,18: specify interface to listen (replace the IF name to your environment)
# if not use IPv6, comment out the line
INTERFACESv4="ens2"
INTERFACESv6="ens2"
root@ knows1:~# vi /etc/dhcp/dhcpd.conf
# line 7: specify domain name
option domain-name "srv.world";
# line 8: specify nameserver's hostname or IP address
option domain-name-servers  knows1.srv.world;
# line 21: uncomment
authoritative;
# add to the end
# specify network address and subnet-mask
subnet 10.0.0.0 netmask 255.255.255.0 {
    # specify default gateway
    option routers      10.0.0.1;
    # specify subnet-mask
    option subnet-mask  255.255.255.0;
    # specify the range of leased IP address
    range dynamic-bootp 10.0.0.200 10.0.0.254;
}

root@ knows1:~# systemctl restart isc-dhcp-server


(02) Configure DHCP Client
---------------------------
DHCP : Configure DHCP Client (Debian)

Configure DHCP Client. DHCP Client uses 68/UDP.
[1]	On Debian client, Configure like follows to get IP address from DHCP server.
The interface name [ens2] is different on each environment, replace to your own one.
root@ knows1:~# vi /etc/network/interfaces
# line 12: change
iface ens3 inet dhcp
root@ knows1:~# systemctl restart ifup@ens2

#######################
|   Storage Server   |
#######################
 NFS
******
(01) Configure NFS Server
--------------------------

Configure NFS Server to share directories on your Network.
This example is based on the environment below.
+----------------------+          |          +----------------------+
| [    NFS Server    ] |10.0.0.30 | 10.0.0.51| [    NFS Client    ] |
|      knows1.srv.world    +----------+----------+    node01.srv.world  |
|                      |                     |                      |
+----------------------+                     +----------------------+

[1]	Install and Configure NFS Server. On this example, Configure [/home] directory as NFS Share.
root@ knows1:~# apt -y install nfs-kernel-server
root@ knows1:~# vi /etc/idmapd.conf
# line 6: uncomment and change to your domain name
Domain = srv.world
root@ knows1:~# vi /etc/exports
# write settings for NFS exports
/home 10.0.0.0/24(rw,no_root_squash)
root@ knows1:~# systemctl restart nfs-server
For basic options of exports
Option	Description
rw	Allow both read and write requests on a NFS volume.
ro	Allow only read requests on a NFS volume.
sync	Reply to requests only after the changes have been committed to stable storage. (Default)
async	This option allows the NFS server to violate the NFS protocol and reply to requests before any changes made by that request have been committed to stable storage.
secure	This option requires that requests originate on an Internet port less than IPPORT_RESERVED (1024). (Default)
insecure	This option accepts all ports.
wdelay	Delay committing a write request to disc slightly if it suspects that another related write request may be in progress or may arrive soon. (Default)
no_wdelay	This option has no effect if async is also set. The NFS server will normally delay committing a write request to disc slightly if it suspects that another related write request may be in progress or may arrive soon. This allows multiple write requests to be committed to disc with the one operation which can improve performance. If an NFS server received mainly small unrelated requests, this behaviour could actually reduce performance, so no_wdelay is available to turn it off.
subtree_check	This option enables subtree checking. (Default)
no_subtree_check	This option disables subtree checking, which has mild security implications, but can improve reliability in some circumstances.
root_squash	Map requests from uid/gid 0 to the anonymous uid/gid. Note that this does not apply to any other uids or gids that might be equally sensitive, such as user bin or group staff.
no_root_squash	Turn off root squashing. This option is mainly useful for disk-less clients.
all_squash	Map all uids and gids to the anonymous user. Useful for NFS exported public FTP directories, news spool directories, etc.
no_all_squash	Turn off all squashing. (Default)
anonuid=UID	These options explicitly set the uid and gid of the anonymous account. This option is primarily useful for PC/NFS clients, where you might want all requests appear to be from one user. As an example, consider the export entry for /home/joe in the example section below, which maps all requests to uid 150.
anongid=GID	Read above (anonuid=UID)

(02) Configure NFS Client
--------------------------

Configure NFS Client.
This example is based on the environment below.
+----------------------+          |          +----------------------+
| [    NFS Server    ] |10.0.0.30 | 10.0.0.51| [    NFS Client    ] |
|      knows1.srv.world    +----------+----------+    node01.srv.world  |
|                      |                     |                      |
+----------------------+                     +----------------------+

[1]	Configure NFS Client. On this example, Mount [/home] directory from NFS server.
root@node01:~# apt -y install nfs-common
root@node01:~# vi /etc/idmapd.conf
# line 6: uncomment and change to your domain name
Domain = srv.world
root@node01:~# mount -t nfs  knows1.srv.world:/home /home
root@node01:~# df -hT
Filesystem                  Type      Size  Used Avail Use% Mounted on
udev                        devtmpfs  2.0G     0  2.0G   0% /dev
tmpfs                       tmpfs     395M   11M  385M   3% /run
/dev/mapper/debian--vg-root ext4       26G  1.1G   23G   5% /
tmpfs                       tmpfs     2.0G     0  2.0G   0% /dev/shm
tmpfs                       tmpfs     5.0M     0  5.0M   0% /run/lock
tmpfs                       tmpfs     2.0G     0  2.0G   0% /sys/fs/cgroup
/dev/vda1                   ext2      236M   48M  176M  22% /boot
tmpfs                       tmpfs     395M     0  395M   0% /run/user/0
 knows1.srv.world:/home         nfs4       26G  1.1G   23G   5% /home
# /home from NFS server is mounted

# if you'd like to mount with NFSv3, add '-o vers=3' option
root@node01:~# mount -t nfs -o vers=3  knows1.srv.world:/home /home
[2]	Configure NFS mounting on fstab to mount it when the system boot.
root@node01:~# vi /etc/fstab
# add to the end like follows
  knows1.srv.world:/home   /home  nfs     defaults        0       0
[3]	Configure auto-mounting if you need. For example, set NFS directory on /mntdir.
root@node01:~# apt -y install autofs
root@node01:~# vi /etc/auto.master
# add to the end
 /-    /etc/auto.mount

root@node01:~# vi /etc/auto.mount
# create new : [mount point] [option] [location]
 /mntdir -fstype=nfs,rw   knows1.srv.world:/home

root@node01:~# mkdir /mntdir
root@node01:~# systemctl restart autofs
# move to the mount point to verify it works normally
root@node01:~# cd /mntdir
root@node01:/mntdir# ll
total 4
drwxr-xr-x 2 debian debian 4096 Jul  8 19:02 debian

root@node01:/mntdir# cat /proc/mounts | grep mntdir
/etc/auto.mount /mntdir autofs rw,relatime,fd=6,pgrp=2132,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=23558 0 0
 knows1.srv.world:/home /mntdir nfs4 rw,relatime,vers=4.2,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=10.0.0.31,local_lock=none,addr=10.0.0.30 0 0

(03) NFS 4 ACL Tool
--------------------

It's possible to set ACL on NFS(v4) filesystem to install NFS 4 ACL tool.
[1]	Install NFS 4 ACL Tool on NFS clients that mounts NFS share with NFSv4.
root@node01:~# apt -y install nfs4-acl-tools
[2]	On this example, Configure on the environment like follows.
root@node01:~# df -hT /mnt
Filesystem                       Type  Size  Used Avail Use% Mounted on
 knows1.srv.world:/var/lib/nfs/share nfs4   26G  1.1G   23G   5% /mnt

root@node01:~# ll /mnt
total 8
drwxr-xr-x 2 root root 4096 Jul 16 19:37 testdir
-rw-r--r-- 1 root root   10 Jul 16 19:37 test.txt
[3]	Show ACL of a file or directory on NFSv4 filesystem.
root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwatTcCy
A::GROUP@:rtcy
A::EVERYONE@:rtcy

root@node01:~# nfs4_getfacl /mnt/testdir

A::OWNER@:rwaDxtTcCy
A::GROUP@:rxtcy
A::EVERYONE@:rxtcy

# each entry means like follows
# ACE = Access Control Entry
# (ACE Type):(ACE Flags):(ACE Principal):(ACE Permissions)
Description
ACE Type
A	A = Allow : it means Allow accesses.
D	D = Deny : it means Deny accesses.
ACE Flags
d	Directory-Inherit : New sub-directory inherits the same ACE.
f	File-Inherit : New file inherits the same ACE but not inherit inheritance-flag.
n	No-Propogate-Inherit : New sub-directory inherits the same ACE but not inherit inheritance-flag.
i	Inherit-Only : New file/sub-directory inherits the same ACE but this directory does not have ACE.
ACE Principal
(USER)@(NFSDomain)	Common User
For [NFSDomain], it is just the Domain name that is specified for [Domain] value in [idmapd.conf].
(GROUP)@(NFSDomain)	Common Group
For group, Specify [g] flag like this ⇒ A:g:GROUP@NFSDomain:rxtncy
OWNER@	Special Principal : Owner
GROUP@	Special Principal : Group
EVERYONE@	Special Principal : Everyone
ACE Permissions
r	Read data of files / List files in directory
w	Write data to files / Create new files in directory
a	Append data to files / Create new sub-directory
x	Execute files / Change directory
d	Delete files or directories
D	Delete files or sub-directories under the directory
t	Read attributes of files or directories
T	Write attributes to files or directories
n	Read named attributes of files or directories
N	Write named attributes of files or directories
c	Read ACL of files or directories
C	Write ACL of files or directories
o	Change ownership of files or directories
ACE Permissions Aliases	For using nfs4_setfacl, possible to use Alias for ACE Permissions
R	R = rntcy : Generic Read
W	W = watTNcCy : Generic Write
X	X = xtcy : Generic Execute

[4]	Add or Delete ACE.
root@node01:~# ll /mnt
total 4
drwx------. 2 root root 26 Jul 20 19:12 testdir
-rwx------. 1 root root 10 Jul 20 19:11 test.txt

root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwaxtTcCy
A::GROUP@:tcy
A::EVERYONE@:tcy

# add generic read/execute for [ knows1] user to [/mnt/test.txt] file
root@node01:~# nfs4_setfacl -a A:: knows1@srv.world:rxtncy /mnt/test.txt
root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwaxtTcCy
A::1000:rxtcy
A::GROUP@:tcy
A::EVERYONE@:tcy


# verify with [ knows1] user
 knows1@node01:~$ ll /mnt
total 4
drwx------. 2 root root 26 Jul 21 10:12 testdir
-rwxr-x---. 1 root root 10 Jul 21 10:11 test.txt

 knows1@node01:~$ cat /mnt/test.txt
test file

# delete generic read/execute for [ knows1] user from [/mnt/test.txt] file
root@node01:~# nfs4_setfacl -x A::1000:rxtcy /mnt/test.txt
root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwaxtTcCy
A::GROUP@:tcy
A::EVERYONE@:tcy
[5]	Edit ACL directly.
root@node01:~# nfs4_setfacl -e /mnt/test.txt

# run an editor on $EDITOR (if null, default is [vi] editor)
A::OWNER@:rwaxtTcCy
A::GROUP@:tcy
A::EVERYONE@:tcy
[6]	Add ACE from a file.
# create ACL list
root@node01:~# vi acl.txt
 A:: knows1@srv.world:RX
A::debian@srv.world:RWX

# add ACL from the file
root@node01:~# nfs4_setfacl -A acl.txt /mnt/test.txt
root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwaxtTcCy
A::1000:rxtcy
A::1001:rwaxtcy
A::GROUP@:tcy
A::EVERYONE@:tcy
[7]	Replace current ACE to new ACE.
# create ACL list
root@node01:~# vi acl.txt
 A::OWNER@:rwaxtTcCy
A::GROUP@:tcy
A::EVERYONE@:tcy

# replace ACL from the file
root@node01:~# nfs4_setfacl -S acl.txt /mnt/test.txt
root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwaxtTcCy
A::GROUP@:tcy
A::EVERYONE@:tcy
[8]	Replace specific ACE to new ACE.
root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwaxtTcCy
A::GROUP@:tcy
A::EVERYONE@:tcy

# replace EVERYONE's ACE to read/execute
root@node01:~# nfs4_setfacl -m A::EVERYONE@:tcy A::EVERYONE@:RX /mnt/test.txt
root@node01:~# nfs4_getfacl /mnt/test.txt

A::OWNER@:rwaxtTcCy
A::GROUP@:rxtcy
A::EVERYONE@:rxtcy



iSCSI
******
(01) Configure iSCSI Target (targetcli)
-----------------------------------------


Configure Storage Server with iSCSI.
A storage on a network is called iSCSI Target, a Client which connects to iSCSI Target is called iSCSI Initiator.
This example is based on the environment below.
+----------------------+          |          +----------------------+
| [   iSCSI Target   ] |10.0.0.30 | 10.0.0.31| [ iSCSI Initiator  ] |
|      knows1.srv.world    +----------+----------+     www.srv.world    |
|                      |                     |                      |
+----------------------+                     +----------------------+

[1]	Install administration tools first.
root@ knows1:~# apt -y install targetcli-fb
[2]	Configure iSCSI Target.
For example, create an disk-image under the [/var/lib/iscsi_disks] directory and set it as a SCSI device.
# create a directory
root@ knows1:~# mkdir /var/lib/iscsi_disks
# enter the admin console
root@ knows1:~# targetcli
Warning: Could not load preferences file /root/.targetcli/prefs.bin.
targetcli shell version 2.1.fb48
Copyright 2011-2013 by Datera, Inc and others.
For help on commands, type 'help'.

/> cd backstores/fileio

# create a disk-image with the name [disk01] on [/var/lib/iscsi_disks/disk01.img] with 10G
/backstores/fileio> create disk01 /var/lib/iscsi_disks/disk01.img 10G
Created fileio disk01 with size 10737418240

/backstores/fileio> cd /iscsi

# create a target
# naming rule : [iqn.(year)-(month).(reverse of domain name):(any name you like)]
/iscsi> create iqn.2019-07.world.srv:storage.target01
Created target iqn.2019-07.world.srv:storage.target01.
Created TPG 1.
Global pref auto_add_default_portal=true
Created default portal listening on all IPs (0.0.0.0), port 3260.

/iscsi> cd iqn.2019-07.world.srv:storage.target01/tpg1/luns

# set LUN
/iscsi/iqn.20...t00/tpg1/luns> create /backstores/fileio/disk01
Created LUN 0.

/iscsi/iqn.20...t00/tpg1/luns> cd ../acls

# set ACL (it's the IQN of an initiator you permit to connect)
/iscsi/iqn.20...t00/tpg1/acls> create iqn.2019-07.world.srv:www.srv.world
Created Node ACL for iqn.2019-07.world.srv:www.srv.world
Created mapped LUN 0.

/iscsi/iqn.20...t00/tpg1/acls> cd iqn.2019-07.world.srv:www.srv.world

# set UserID for authentication
/iscsi/iqn.20....srv.world> set auth userid=username
Parameter userid is now 'username'.

/iscsi/iqn.20....srv.world> set auth password=password
Parameter password is now 'password'.

/iscsi/iqn.20....srv.world> exit
Global pref auto_save_on_exit=true
Last 10 configs saved in /etc/rtslib-fb-target/backup.
Configuration saved to /etc/rtslib-fb-target/saveconfig.json

# after configuration above, the target enters in listening like follows
root@ knows1:~# ss -napt | grep 3260
LISTEN     0      256          *:3260                     *:*
[3]	The init script is not included in targetcli related packages, so it needs to start manually after restarting System like follows.
root@ knows1:~# targetctl restore
[4]	Or it's possible to use the init script in Ubuntu like follows.
root@ knows1:~# vi /etc/init.d/rtslib-fb-targetctl
# create new
#!/bin/bash

### BEGIN INIT INFO
# Provides:             rtslib-fb-targetctl
# Required-Start:       $network $local_fs $remote_fs $syslog
# Required-Stop:        $local_fs $network $remote_fs
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Start LIO targets
# Description:          Loads configfs and restores LIO config with targetctl
### END INIT INFO

# Author: Thomas Goirand <zigo@debian.org>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="rstlib-fb targetctl"
NAME=targetctl
DAEMON=/usr/bin/${NAME}
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/rtslib-fb-targetctl
SYSTEM_USER=trove

[ -x $DAEMON ] || exit 0

. /lib/lsb/init-functions

check_configfs_module () {
        if ! modprobe configfs ; then
                echo "Could not load configfs module: exiting!"
                exit 0
        fi
        sleep 10
}

check_configfs_mounted () {
        WORD_TO_GREP_IN_PROCMOUNT=configfs
        NUM_RETRY=50
        while ! cat /proc/mounts | grep -q ${WORD_TO_GREP_IN_PROCMOUNT} && [ "${NUM_RETRY}" != 0 ] ; do
                NUM_RETRY=$(( $NUM_RETRY - 1 ))
                sleep 0.1
        done

        if ! cat /proc/mounts | grep -q ${WORD_TO_GREP_IN_PROCMOUNT} ; then
                echo " ${WORD_TO_GREP_IN_PROCMOUNT} not found in /proc/mount: exiting!"
                exit 0
        fi
}

case "$1" in
start)
        check_configfs_module
        check_configfs_mounted
        log_daemon_msg "Loading $DESC" "$NAME"
        ${DAEMON} restore
        if [ $? -gt 0 ] ; then
                log_end_msg 1
                exit 1
        fi
        log_end_msg 0
;;
stop)
        check_configfs_module
        log_daemon_msg "Unloading $DESC" "${NAME}"
        ${DAEMON} clear
        if [ $? -gt 0 ] ; then
                log_end_msg 1
                exit 1
        fi
        log_end_msg 0
;;
restart|reload|force-reload)
        $0 stop
        sleep 3
        $0 start
;;
status)
        echo "Not supported!"
        exit 1
;;
*)
        echo "usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}"
        exit 1
;;
esac

exit 0

root@ knows1:~# chmod 755 /etc/init.d/rtslib-fb-targetctl
root@ knows1:~# systemctl enable rtslib-fb-targetctl



(02) Configure iSCSI Target (tgt)
----------------------------------

Configure Storage Server with iSCSI.
On this example, Install and Configure tgt for iSCSI target.
A storage on a network is called iSCSI Target, a Client which connects to iSCSI Target is called iSCSI Initiator.
This example is based on the environment below.
+----------------------+          |          +----------------------+
| [   iSCSI Target   ] |10.0.0.30 | 10.0.0.31| [ iSCSI Initiator  ] |
|      knows1.srv.world    +----------+----------+     www.srv.world    |
|                      |                     |                      |
+----------------------+                     +----------------------+

[1]	Install administration tools first.
root@ knows1:~# apt -y install tgt dkms
[2]	Configure iSCSI Target.
For example, create an disk-image under the [/var/lib/iscsi_disks] directory and set it as a SCSI device.
# create a disk-image
root@ knows1:~# mkdir /var/lib/iscsi_disks
root@ knows1:~# dd if=/dev/zero of=/var/lib/iscsi_disks/disk01.img count=0 bs=1 seek=10G
root@ knows1:~# vi /etc/tgt/conf.d/target01.conf
# create new
# naming rule : [ iqn.(year)-(month).(reverse of domain name):(any name you like) ]
<target iqn.2019-07.world.srv: knows1.target01>
    # provided devicce as a iSCSI target
    backing-store /var/lib/iscsi_disks/disk01.img
    # iSCSI Initiator's IQN you allow to connect to this Target
    initiator-name iqn.2019-07.world.srv:www.srv.world
    # authentication info ( set any name you like for "username", "password" )
    incominguser username password
</target>

root@ knows1:~# systemctl restart tgt
# show status
root@ knows1:~# tgtadm --mode target --op show
Target 1: iqn.2019-07.world.srv: knows1.target01
    System information:
        Driver: iscsi
        State: ready
    I_T nexus information:
    LUN information:
        LUN: 0
            Type: controller
            SCSI ID: IET     00010000
            SCSI SN: beaf10
            Size: 0 MB, Block size: 1
            Online: Yes
            Removable media: No
            Prevent removal: No
            Readonly: No
            SWP: No
            Thin-provisioning: No
            Backing store type: null
            Backing store path: None
            Backing store flags:
        LUN: 1
            Type: disk
            SCSI ID: IET     00010001
            SCSI SN: beaf11
            Size: 10737 MB, Block size: 512
            Online: Yes
            Removable media: No
            Prevent removal: No
            Readonly: No
            SWP: No
            Thin-provisioning: No
            Backing store type: rdwr
            Backing store path: /var/lib/iscsi_disks/disk01.img
            Backing store flags:
    Account information:
        username
    ACL information:
        ALL
        iqn.2019-07.world.srv:www.srv.world


(03) Configure iSCSI Initiator
-------------------------------

Configure iSCSI Initiator.
This example is based on the environment below.
+----------------------+          |          +----------------------+
| [   iSCSI Target   ] |10.0.0.30 | 10.0.0.31| [ iSCSI Initiator  ] |
|      knows1.srv.world    +----------+----------+     www.srv.world    |
|                      |                     |                      |
+----------------------+                     +----------------------+

[1]	Configure iSCSI Initiator.
root@www:~# apt -y install open-iscsi parted
root@www:~# vi /etc/iscsi/initiatorname.iscsi
# change to the same IQN you set on the iSCSI target server
InitiatorName=iqn.2019-07.world.srv:www.srv.world
root@www:~# vi /etc/iscsi/iscsid.conf
# line 56: uncomment
node.session.auth.authmethod = CHAP
# line 60,61: uncomment and specify the username and password you set on the iSCSI target
node.session.auth.username = username
node.session.auth.password = password
root@www:~# systemctl restart iscsid open-iscsi
# discover target
root@www:~# iscsiadm -m discovery -t sendtargets -p 10.0.0.30
10.0.0.30:3260,1 iqn.2019-07.world.srv:storage.target01

# confirm status after discovery
root@www:~# iscsiadm -m node -o show
# BEGIN RECORD 2.0-874
node.name = iqn.2019-07.world.srv:storage.target01
node.tpgt = 1
node.startup = manual
node.leading_login = No
.....
.....
node.conn[0].iscsi.IFMarker = No
node.conn[0].iscsi.OFMarker = No
# END RECORD

# login to the target
root@www:~# iscsiadm -m node --login
Logging in to [iface: default, target: iqn.2019-07.world.srv:storage.target01, portal: 10.0.0.30,3260] (multiple)
Login to [iface: default, target: iqn.2019-07.world.srv:storage.target01, portal: 10.0.0.30,3260] successful.

# confirm the established session
root@www:~# iscsiadm -m session -o show
tcp: [1] 10.0.0.30:3260,1 iqn.2019-07.world.srv:storage.target01 (non-flash)
# confirm the partitions
root@www:~# cat /proc/partitions
major minor  #blocks  name

 254        0   31457280 sda
 254        1     248832 sda1
 254        2          1 sda2
 254        5   31205376 sda5
 253        0   27009024 dm-0
 253        1    4194304 dm-1
   8        0   10485760 sdb

# added new device provided from the target server as [sdb]
[2]	After setting iSCSI devide, configure on Initiator to use it like follwos.
# create label
root@www:~# parted --script /dev/sdb "mklabel gpt"
# create partiton
root@www:~# parted --script /dev/sdb "mkpart primary 0% 100%"
# format with ext4
root@www:~# mkfs.ext4 /dev/sdb1
mke2fs 1.44.5 (15-Dec-2018)
Creating filesystem with 2617344 4k blocks and 655360 inodes
Filesystem UUID: ef7eec3d-c0c7-459a-af44-a6cdafc316c3
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

Allocating group tables: done
Writing inode tables: done
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done

root@www:~# mount /dev/sdb1 /mnt
root@www:~# df -hT
Filesystem                  Type      Size  Used Avail Use% Mounted on
udev                        devtmpfs  2.0G     0  2.0G   0% /dev
tmpfs                       tmpfs     395M  5.4M  390M   2% /run
/dev/mapper/debian--vg-root ext4       26G  1.1G   23G   5% /
tmpfs                       tmpfs     2.0G     0  2.0G   0% /dev/shm
tmpfs                       tmpfs     5.0M     0  5.0M   0% /run/lock
tmpfs                       tmpfs     2.0G     0  2.0G   0% /sys/fs/cgroup
/dev/vda1                   ext2      236M   48M  176M  22% /boot
tmpfs                       tmpfs     395M     0  395M   0% /run/user/0
/dev/sda1                   ext4      9.8G   37M  9.3G   1% /mnt

GlusterFS
**********
(01) Install GlusterFS
-------------------------

Install GlusterFS to Configure Storage Cluster.
It is recommended to use partitions for GlusterFS volumes which are different from the / partition.
The environment on this example is set as that [sdb1] is mounted on [/glusterfs] directory for GlusterFS Configuration on all Nodes.
[1]	Install GlusterFS Server on all Nodes in Cluster.
root@node01:~# apt -y install glusterfs-server
root@node01:~# systemctl start glusterd
root@node01:~# systemctl enable glusterd
root@node01:~# gluster --version
glusterfs 5.5
Repository revision: git://git.gluster.org/glusterfs.git
Copyright (c) 2006-2016 Red Hat, Inc.
GlusterFS comes with ABSOLUTELY NO WARRANTY.
It is licensed to you under your choice of the GNU Lesser
General Public License, version 3 or any later version (LGPLv3
or later), or the GNU General Public License, version 2 (GPLv2),
in all cases as published by the Free Software Foundation.


(02) Distributed Configuration
--------------------------------

Configure Storage Clustering with GlusterFS.
For example, create a distributed volume with 2 Nodes.
This example shows to use 2 Nodes but it's possible to use more than 3 Nodes.
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#1] |10.0.0.51 | 10.0.0.52| [GlusterFS Server#2] |
|   node01.srv.world   +----------+----------+   node02.srv.world   |
|                      |                     |                      |
+----------------------+                     +----------------------+
           ⇑                                             ⇑
     file1, file3 ...                             file2, file4 ...


It is recommended to use partitions for GlusterFS volumes which are different from the / partition.
The environment on this example is set as that sdb1 is mounted on [/glusterfs] directory for GlusterFS Configuration on all Nodes.
[1]
Install GlusterFS Server on All Nodes, refer to here.
[2]	Create a Directory for GlusterFS Volume on all Nodes.
root@node01:~# mkdir -p /glusterfs/distributed
[3]	Configure Clustering like follows on a node. (it's OK on any node)
# probe the node
root@node01:~# gluster peer probe node02
peer probe: success.
# show status
root@node01:~# gluster peer status
Number of Peers: 1

Hostname: node02
Uuid: 5cbde6d6-0a59-4511-a0e0-88609f6444ec
State: Peer in Cluster (Connected)

# create volume
root@node01:~# gluster volume create vol_distributed transport tcp \
node01:/glusterfs/distributed \
node02:/glusterfs/distributed
volume create: vol_distributed: success: please start the volume to access data
# start volume
root@node01:~# gluster volume start vol_distributed
volume start: vol_distributed: success
# show volume info
root@node01:~# gluster volume info

Volume Name: vol_distributed
Type: Distribute
Volume ID: a790175e-b8d6-465e-8fab-72665ea021b4
Status: Started
Snapshot Count: 0
Number of Bricks: 2
Transport-type: tcp
Bricks:
Brick1: node01:/glusterfs/distributed
Brick2: node02:/glusterfs/distributed
Options Reconfigured:
transport.address-family: inet
nfs.disable: on
[4]
To mount GlusterFS volume on clients, refer to here.

(03) Replication Configuration
---------------------------------

Configure Storage Clustering with GlusterFS.
For example, create a Replication volume with 3 Nodes.
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#1] |10.0.0.51 | 10.0.0.52| [GlusterFS Server#2] |
|   node01.srv.world   +----------+----------+   node02.srv.world   |
|                      |          |          |                      |
+----------------------+          |          +----------------------+
                                  |
+----------------------+          |
| [GlusterFS Server#3] |10.0.0.53 |
|   node03.srv.world   +----------+
|                      |
+----------------------+


It is recommended to use partitions for GlusterFS volumes which are different from the / partition.
The environment on this example is set as that sdb1 is mounted on [/glusterfs] directory for GlusterFS Configuration on all Nodes.
[1]
Install GlusterFS Server on All Nodes, refer to here.
[2]	Create a Directory for GlusterFS Volume on all Nodes.
root@node01:~# mkdir -p /glusterfs/replica
[3]	Configure Clustering like follows on a node. (it's OK on any node)
# probe the node
root@node01:~# gluster peer probe node02
peer probe: success.
root@node01:~# gluster peer probe node03
peer probe: success.
# show status
root@node01:~# gluster peer status
Number of Peers: 2

Hostname: node02
Uuid: 5cbde6d6-0a59-4511-a0e0-88609f6444ec
State: Peer in Cluster (Connected)

Hostname: node03
Uuid: f248cfa3-28cc-41b0-ab6f-135ca74b278c
State: Peer in Cluster (Connected)

# create volume
root@node01:~# gluster volume create vol_replica replica 3 transport tcp \
node01:/glusterfs/replica \
node02:/glusterfs/replica \
node03:/glusterfs/replica
volume create: vol_replica: success: please start the volume to access data
# start volume
root@node01:~# gluster volume start vol_replica
volume start: vol_replica: success
# show volume info
root@node01:~# gluster volume info

Volume Name: vol_replica
Type: Replicate
Volume ID: 66eecc8e-e7b1-4b61-a23d-35d7e5132b41
Status: Started
Snapshot Count: 0
Number of Bricks: 1 x 3 = 3
Transport-type: tcp
Bricks:
Brick1: node01:/glusterfs/replica
Brick2: node02:/glusterfs/replica
Brick3: node03:/glusterfs/replica
Options Reconfigured:
transport.address-family: inet
nfs.disable: on
performance.client-io-threads: off
[4]
To mount GlusterFS volume on clients, refer to here.

(04) Distributed + Replication
-----------------------------------



Configure Storage Clustering with GlusterFS.
For example, create a Distributed + Replication volume with 6 Nodes.
Also Configure Arbiter Volume in order to avoid Split Brain.
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#1] |10.0.0.51 | 10.0.0.54| [GlusterFS Server#4] |
|   node01.srv.world   +----------+----------+   node04.srv.world   |
|                      |          |          |                      |
+----------------------+          |          +----------------------+
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#2] |10.0.0.52 | 10.0.0.55| [GlusterFS Server#5] |
|   node02.srv.world   +----------+----------+   node05.srv.world   |
|                      |          |          |                      |
+----------------------+          |          +----------------------+
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#3] |10.0.0.53 | 10.0.0.56| [GlusterFS Server#6] |
|   node03.srv.world   +----------+----------+   node06.srv.world   |
|                      |                     |                      |
+----------------------+                     +----------------------+
           ⇑                                             ⇑
     file1, file3 ...                             file2, file4 ...


It is recommended to use partitions for GlusterFS volumes which are different from the / partition.
The environment on this example is set as that sdb1 is mounted on [/glusterfs] directory for GlusterFS Configuration on all Nodes.
[1]
Install GlusterFS Server on All Nodes, refer to here.
[2]	Create a Directory for GlusterFS Volume on all Nodes.
root@node01:~# mkdir -p /glusterfs/dist-replica
[3]	Configure Clustering like follows on a node. (it's OK on any node)
# probe the node
root@node01:~# gluster peer probe node02
peer probe: success.
root@node01:~# gluster peer probe node03
peer probe: success.
root@node01:~# gluster peer probe node04
peer probe: success.
root@node01:~# gluster peer probe node05
peer probe: success.
root@node01:~# gluster peer probe node06
peer probe: success.
# show status
root@node01:~# gluster peer status
Number of Peers: 5

Hostname: node02
Uuid: 5cbde6d6-0a59-4511-a0e0-88609f6444ec
State: Peer in Cluster (Connected)

Hostname: node03
Uuid: f248cfa3-28cc-41b0-ab6f-135ca74b278c
State: Peer in Cluster (Connected)

Hostname: node04
Uuid: 3964d9df-6839-4eb5-8c6d-0f34cd604018
State: Peer in Cluster (Connected)

Hostname: node05
Uuid: d914c95b-756c-47da-9357-d1bff882e388
State: Peer in Cluster (Connected)

Hostname: node06
Uuid: c5ab5d35-0f86-4bf9-aa8e-e490e4c2bbf0
State: Peer in Cluster (Connected)

# create volume
root@node01:~# gluster volume create vol_dist-replica replica 3 arbiter 1 transport tcp \
node01:/glusterfs/dist-replica \
node02:/glusterfs/dist-replica \
node03:/glusterfs/dist-replica \
node04:/glusterfs/dist-replica \
node05:/glusterfs/dist-replica \
node06:/glusterfs/dist-replica
volume create: vol_dist-replica: success: please start the volume to access data
# start volume
root@node01:~# gluster volume start vol_dist-replica
volume start: vol_dist-replica: success
# show volume info
root@node01:~# gluster volume info

Volume Name: vol_dist-replica
Type: Distributed-Replicate
Volume ID: 53fd1e49-dc6e-43ed-aa14-1db97267a14c
Status: Started
Snapshot Count: 0
Number of Bricks: 2 x (2 + 1) = 6
Transport-type: tcp
Bricks:
Brick1: node01:/glusterfs/dist-replica
Brick2: node02:/glusterfs/dist-replica
Brick3: node03:/glusterfs/dist-replica (arbiter)
Brick4: node04:/glusterfs/dist-replica
Brick5: node05:/glusterfs/dist-replica
Brick6: node06:/glusterfs/dist-replica (arbiter)
Options Reconfigured:
transport.address-family: inet
nfs.disable: on
performance.client-io-threads: off
[4]
To mount GlusterFS volume on clients, refer to here.

(05) Dispersed Configuration
-------------------------------

Configure Storage Clustering with GlusterFS.
For example, create a Dispersed volume with 6 Nodes.
Dispersed Volumes is based on Erasure Coding (EC).
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#1] |10.0.0.51 | 10.0.0.54| [GlusterFS Server#4] |
|   node01.srv.world   +----------+----------+   node04.srv.world   |
|                      |          |          |                      |
+----------------------+          |          +----------------------+
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#2] |10.0.0.52 | 10.0.0.55| [GlusterFS Server#5] |
|   node02.srv.world   +----------+----------+   node05.srv.world   |
|                      |          |          |                      |
+----------------------+          |          +----------------------+
                                  |
+----------------------+          |          +----------------------+
| [GlusterFS Server#3] |10.0.0.53 | 10.0.0.56| [GlusterFS Server#6] |
|   node03.srv.world   +----------+----------+   node06.srv.world   |
|                      |                     |                      |
+----------------------+                     +----------------------+


It is recommended to use partitions for GlusterFS volumes which are different from the / partition.
The environment on this example is set as that sdb1 is mounted on [/glusterfs] directory for GlusterFS Configuration on all Nodes.
[1]
Install GlusterFS Server on All Nodes, refer to here.
[2]	Create a Directory for GlusterFS Volume on all Nodes.
root@node01:~# mkdir -p /glusterfs/dispersed
[3]	Configure Clustering like follows on a node. (it's OK on any node)
# probe the node
root@node01:~# gluster peer probe node02
peer probe: success.
root@node01:~# gluster peer probe node03
peer probe: success.
root@node01:~# gluster peer probe node04
peer probe: success.
root@node01:~# gluster peer probe node05
peer probe: success.
root@node01:~# gluster peer probe node06
peer probe: success.
# show status
root@node01:~# gluster peer status
Number of Peers: 5

Hostname: node02
Uuid: 5cbde6d6-0a59-4511-a0e0-88609f6444ec
State: Peer in Cluster (Connected)

Hostname: node03
Uuid: f248cfa3-28cc-41b0-ab6f-135ca74b278c
State: Peer in Cluster (Connected)

Hostname: node04
Uuid: 3964d9df-6839-4eb5-8c6d-0f34cd604018
State: Peer in Cluster (Connected)

Hostname: node05
Uuid: d914c95b-756c-47da-9357-d1bff882e388
State: Peer in Cluster (Connected)

Hostname: node06
Uuid: c5ab5d35-0f86-4bf9-aa8e-e490e4c2bbf0
State: Peer in Cluster (Connected)

# create volume
root@node01:~# gluster volume create vol_dispersed disperse-data 4 redundancy 2 transport tcp \
node01:/glusterfs/dispersed \
node02:/glusterfs/dispersed \
node03:/glusterfs/dispersed \
node04:/glusterfs/dispersed \
node05:/glusterfs/dispersed \
node06:/glusterfs/dispersed
volume create: vol_dispersed: success: please start the volume to access data
# start volume
root@node01:~# gluster volume start vol_dispersed
volume start: vol_dispersed: success
# show volume info
root@node01:~# gluster volume info

Volume Name: vol_dispersed
Type: Disperse
Volume ID: a0fe45e0-95e0-4d74-a117-a61f4166efef
Status: Started
Snapshot Count: 0
Number of Bricks: 1 x (4 + 2) = 6
Transport-type: tcp
Bricks:
Brick1: node01:/glusterfs/dispersed
Brick2: node02:/glusterfs/dispersed
Brick3: node03:/glusterfs/dispersed
Brick4: node04:/glusterfs/dispersed
Brick5: node05:/glusterfs/dispersed
Brick6: node06:/glusterfs/dispersed
Options Reconfigured:
transport.address-family: inet
nfs.disable: on
[4]
To mount GlusterFS volume on clients, refer to here.

(06) Configure GlusterFS Client
--------------------------------


Configure Clients to mount GlusterFS Volumes with GlusterFS Native.
If you'd like to mount with NFS, refer to here.
[1]	Install GlusterFS Client and mount GlusterFS Volumes like follows.
For example, mount [vol_distributed] volume to [/mnt].
root@client:~# apt -y install glusterfs-client
# OK to specify any Nodes in Cluster
root@client:~# mount -t glusterfs node01.srv.world:/vol_distributed /mnt
root@client:~# df -hT
Filesystem                        Type            Size  Used Avail Use% Mounted on
udev                              devtmpfs        2.0G     0  2.0G   0% /dev
tmpfs                             tmpfs           395M   11M  385M   3% /run
/dev/mapper/debian--vg-root       ext4             26G  1.2G   23G   5% /
tmpfs                             tmpfs           2.0G     0  2.0G   0% /dev/shm
tmpfs                             tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs                             tmpfs           2.0G     0  2.0G   0% /sys/fs/cgroup
/dev/vda1                         ext2            236M   48M  176M  22% /boot
tmpfs                             tmpfs           395M     0  395M   0% /run/user/0
node01.srv.world:/vol_distributed fuse.glusterfs   51G  2.8G   46G   6% /mnt


(07) GlusterFS + NFS-Ganesha
-----------------------------

Install NFS-Ganesha and integrate with GlusterFS to mount Gluster Volume with NFS protocol.
The supported NFS protocols by NFS-Ganesha are v3, v4.0, v4.1, pNFS.
For example, Configure NFS Export setting to a Gluster Volume [vol_distributed] like an example of the link.
[1]	Disable NFS feature in Gluster first.
The NFS feature in Gluster is officially deprecated.
Also if NFS server is running, stop and disable it, too.
# OK if [nfs.disable: on] (default setting)
root@node01:~# gluster volume get vol_distributed nfs.disable
Option                                  Value
------                                  -----
nfs.disable                             on

# if [nfs.disable: off], turn to disable
root@node01:~# gluster volume set vol_distributed nfs.disable on
volume set: success
# if NFS server is running, disable it
root@node01:~# systemctl stop nfs-server
root@node01:~# systemctl disable nfs-server
[2]	Install and Configure NFS-Ganesha on a Node in GlusterFS Cluster.
root@node01:~# apt -y install nfs-ganesha-gluster
root@node01:~# mv /etc/ganesha/ganesha.conf /etc/ganesha/ganesha.conf.org
root@node01:~# vi /etc/ganesha/ganesha.conf
# create new
NFS_CORE_PARAM {
    # possible to mount with NFSv3 to NFSv4 Pseudo path
    mount_path_pseudo = true;
    # NFS protocol
    Protocols = 3,4;
}
EXPORT_DEFAULTS {
    # default access mode
    Access_Type = RW;
}
EXPORT {
    # uniq ID
    Export_Id = 101;
    # mount path of Gluster Volume
    Path = "/vol_distributed";
    FSAL {
    	# any name
        name = GLUSTER;
        # hostname or IP address of this Node
        hostname="10.0.0.51";
        # Gluster volume name
        volume="vol_distributed";
    }
    # setting for root Squash
    Squash="No_root_squash";
    # NFSv4 Pseudo path
    Pseudo="/vfs_distributed";
    # allowed security options
    SecType = "sys";
}
LOG {
    # default log level
    Default_Log_Level = WARN;
}

root@node01:~# systemctl restart nfs-ganesha
root@node01:~# systemctl enable nfs-ganesha
# verify mount
root@node01:~# showmount -e localhost
Export list for localhost:
/vfs_distributed (everyone)
[3]	Verify NFS mounting on a Client.
root@client:~# apt -y install nfs-common
# specify Pseudo path set on [Pseudo=***] in ganesha.conf
root@client:~# mount -t nfs4 node01.srv.world:/vfs_distributed /mnt
root@client:~# df -hT
Filesystem                        Type      Size  Used Avail Use% Mounted on
udev                              devtmpfs  2.0G     0  2.0G   0% /dev
tmpfs                             tmpfs     395M   11M  385M   3% /run
/dev/mapper/debian--vg-root       ext4       26G  1.2G   23G   5% /
tmpfs                             tmpfs     2.0G     0  2.0G   0% /dev/shm
tmpfs                             tmpfs     5.0M     0  5.0M   0% /run/lock
tmpfs                             tmpfs     2.0G     0  2.0G   0% /sys/fs/cgroup
/dev/vda1                         ext2      236M   48M  176M  22% /boot
tmpfs                             tmpfs     395M     0  395M   0% /run/user/0
node01.srv.world:/vfs_distributed nfs4       51G  2.9G   46G   6% /mnt


#######################
| Virtualization  |
#######################
KVM
****
(01) Install KVM
---------------------

This is the Virtualization Configuration with KVM ( Kernel-based Virtual Machine ) + QEMU.
This requires that the CPU on your computer which has a function Intel VT or AMD-V.
[1]	Install required packages.
root@ knows1:~# apt -y install qemu-kvm libvirt-daemon libvirt-daemon-system virtinst libosinfo-bin bridge-utils
# make sure modules are loaded
root@ knows1:~# lsmod | grep kvm
kvm_intel             245760  0
kvm                   724992  1 kvm_intel
irqbypass              16384  1 kvm
[2]	Enable vhost-net.
root@ knows1:~# modprobe vhost_net
root@ knows1:~# lsmod | grep vhost
vhost_net              24576  0
tun                    49152  1 vhost_net
vhost                  49152  1 vhost_net
tap                    28672  1 vhost_net
root@ knows1:~# echo vhost_net >> /etc/modules
[3]	Configure Bridge networking.
root@ knows1:~# vi /etc/network/interfaces
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

auto ens2
# change existing setting like follows
iface ens2 inet manual
#iface ens2 inet static
#address 10.0.0.30
#network 10.0.0.0
#netmask 255.255.255.0
#broadcast 10.0.0.255
#gateway 10.0.0.1
#dns-nameservers 10.0.0.10

# add bridge interface setting
iface br0 inet static
address 10.0.0.30
network 10.0.0.0
netmask 255.255.255.0
broadcast 10.0.0.255
gateway 10.0.0.1
dns-nameservers 10.0.0.30
bridge_ports ens2
bridge_stp off
auto br0

root@ knows1:~# reboot
root@ knows1:~# ip addr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: ens2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000
    link/ether 52:54:00:d7:7e:1d brd ff:ff:ff:ff:ff:ff
3: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 52:54:00:d7:7e:1d brd ff:ff:ff:ff:ff:ff
    inet 10.0.0.30/24 brd 10.0.0.255 scope global br0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fed7:7e1d/64 scope link
       valid_lft forever preferred_lft forever

(02) Create Virtual Machine
-----------------------------

Install GuestOS and create Virtual Machine. This example shows to install Debian.
[1]	Install GuestOS on text mode via network, it's OK on Console or remote connection with Putty and so on. Furthermore, Virtual Machine's images are placed at [/var/lib/libvirt/images] by default as a Storage Pool, but this example shows to create and use a new Storage Pool.
# create a storage pool
root@ knows1:~# mkdir -p /var/kvm/images
root@ knows1:~# virt-install \
--name debian \
--ram 4096 \
--disk path=/var/kvm/images/debian.img,size=20 \
--vcpus 2 \
--os-type linux \
--os-variant debian9 \
--network bridge=br0 \
--graphics none \
--console pty,target_type=serial \
--location 'http://ftp.jaist.ac.jp/pub/Linux/debian/dists/ knows1/main/installer-amd64/' \
--extra-args 'console=ttyS0,115200n8 serial'
Starting install...     # installation starts
# after finishing installation, back to KVM host and shutdown the guest like follows
Loading Linux 4.19.0-5-amd64 ...
Loading initial ramdisk ...

Debian GNU/Linux 10 debian ttyS0

debian login:

The example of options above means like follows. There are many options for others, make sure with [man virt-install].
--name
specify the name of Virtual Machine
--ram
specify the amount of memory of Virtual Machine
--disk path=xxx ,size=xxx
[path=] specify the location of disks of Virtual Machine (default is [/var/lib/libvirt/images])
[size=] specify the amount of disk of Virtual Machine
--vcpus
specify the virtual CPUs
--os-type
specify the type of GuestOS
--os-variant
specify the kind of GuestOS
possible to show the list of OS with follows
(if command not found, install [libosinfo-bin] package)
# osinfo-query os
--network
specify network types of Virtual Machine
--graphics
specify the kind of graphics. if set [none], it means nographics.
--console
specify the console type
--location
specify the location of installation source where from
--extra-args
specify parameters that is set in kernel

[2]	Move to GuestOS to HostOS with Ctrl + ] key.
Move to HostOS to GuestOS with a command [virsh console (name of virtual machine)].
debian@ knows1:~$     # Ctrl + ] key
root@ knows1:~#     # HostOS console
root@ knows1:~# virsh console debian   # switch to [debian] VM console
Connected to domain debian
Escape character is ^]     # Enter key
debian@ knows1:~$     # GuestOS console
[3]	It's easy to create another VM to copy from current VM with a command below.
root@ knows1:~# virt-clone --original debian --name debian_template --file /var/kvm/images/debian_template.img
Allocating 'debian_template.img'                    |  20 GB  00:03

Clone 'debian_template' created successfully.

root@ knows1:~# ll /var/kvm/images/debian_template.img
-rw------- 1 root root 1895170048 Jul 23 19:44 /var/kvm/images/debian_template.img
root@ knows1:~# ll /etc/libvirt/qemu/debian_template.xml
-rw------- 1 root root 4765 Jul 23 10:44 /etc/libvirt/qemu/debian_template.xml



(03) Create Virtual Machine (GUI)
----------------------------------

If you installed Desktop Environment,
it's possible to create a Virtual machine on GUI. This example shows to install Windows Server 2019 on GUI.
[1]	Install required packages.
root@ knows1:~# apt -y install virt-manager qemu-system
[2]	Start Desktop and run [Virtual Machine Manager], then, Click [New] button (it's just the PC-icon on upper-left) and open a wizard to create a new Virtual Machine.

[3]	Specify the installation source.

[4]	Select Installation media or ISO image, and specify OS type and version. Windows Server 2019 is not listed in Version choices yet, so Windows Server 2016 is selected automatically.

[5]	Specify the amount of memories and number of virtual CPUs.

[6]	Specify the amount of disks.

[7]	Input Virtual Machine's name and also confirm selections.

[8]	Windows Server 2019 installer starts.

[9]	Installation finished and Windows Server 2019 is running.

(04) Libvirt Basic Operation
-----------------------------

This is the Basic Operarion example with virsh command which is included in Libvirt package.
[1]	Start Virtual Machine.
# Start Virtual Machine [debian]
root@ knows1:~# virsh start debian
Domain debian started
# start and connect to console of [debian]
root@ knows1:~# virsh start debian --console
Domain debian started
Connected to domain debian
[2]	Stop Virtual Machine.
# Stop Virtual Machine [debian]
root@ knows1:~# virsh shutdown debian
Domain debian is being shutdown
# Stop Virtual Machine [debian] forcely
root@ knows1:~# virsh destroy debian
Domain debian destroyed
[3]	Set auto-start for Virtual Machines.
# Enable auto-start for [debian]
root@ knows1:~# virsh autostart debian
Domain debian marked as autostarted
# Disable auto-start for [debian]
root@ knows1:~# virsh autostart --disable debian
Domain debian unmarked as autostarted
[4]	List all Virtual Machines.
# List all active Virtual Machines
root@ knows1:~# virsh list
 Id   Name     State
------------------------
 3    debian   running

# List all Virtual Machines included inactives
root@ knows1:~# virsh list --all
 Id   Name              State
----------------------------------
 3    debian            running
 -    debian_template   shut off
[5]	Switch console,
Move to GuestOS to HostOS with Ctrl + ] key.
Move to HostOS to GuestOS with a command [virsh console (name of virtual machine)].
root@ knows1:~# virsh console debian     # connect to [debian]
Connected to domain debian
Escape character is ^]     # Enter key
Debian GNU/Linux 10 debian ttyS0

debian login:   # GuestOS console

debian login:   # Ctrl + ] key

root@ knows1:~#     # HostOS console
[6]	For Other options below, there are many options, try to verify them.
root@ knows1:~# virsh --help

virsh [options]... [<command_string>]
virsh [options]... <command> [args...]

  options:
    -c | --connect=URI      hypervisor connection URI
    -r | --readonly         connect readonly
    -d | --debug=NUM        debug level [0-4]
    -h | --help             this help
    -q | --quiet            quiet mode
    -t | --timing           print timing information
    -l | --log=FILE         output logging to file
    -v                      short version
    -V                      long version
         --version[=TYPE]   version, TYPE is short or long (default short)
    -e | --escape <char>    set escape sequence for console

  commands (non interactive mode):

 Domain Management (help keyword 'domain')
    attach-device                  attach device from an XML file
    attach-disk                    attach disk device
    attach-interface               attach network interface
    autostart                      autostart a domain
    blkdeviotune                   Set or query a block device I/O tuning parameters.
    blkiotune                      Get or set blkio parameters
    blockpull                      Populate a disk from its backing image.
    blockjob                       Manage active block operations.
    blockresize                    Resize block device of domain.
    console                        connect to the guest console
    cpu-baseline                   compute baseline CPU
    cpu-compare                    compare host CPU with a CPU described by an XML file
    create                         create a domain from an XML file
    define                         define (but don't start) a domain from an XML file
    destroy                        destroy (stop) a domain
    detach-device                  detach device from an XML file
    detach-disk                    detach disk device
    detach-interface               detach network interface
    domid                          convert a domain name or UUID to domain id
    domif-setlink                  set link state of a virtual interface
    domjobabort                    abort active domain job
    domjobinfo                     domain job information
    domname                        convert a domain id or UUID to domain name
    domuuid                        convert a domain name or id to domain UUID
    domxml-from-native             Convert native config to domain XML
    domxml-to-native               Convert domain XML to native config
    dump                           dump the core of a domain to a file for analysis
    dumpxml                        domain information in XML
    edit                           edit XML configuration for a domain
    inject-nmi                     Inject NMI to the guest
    send-key                       Send keycodes to the guest
    managedsave                    managed save of a domain state
    managedsave-remove             Remove managed save of a domain
    maxvcpus                       connection vcpu maximum
    memtune                        Get or set memory parameters
    migrate                        migrate domain to another host
    migrate-setmaxdowntime         set maximum tolerable downtime
    migrate-setspeed               Set the maximum migration bandwidth
    migrate-getspeed               Get the maximum migration bandwidth
    reboot                         reboot a domain
    reset                          reset a domain
    restore                        restore a domain from a saved state in a file
    resume                         resume a domain
    save                           save a domain state to a file
    save-image-define              redefine the XML for a domain's saved state file
    save-image-dumpxml             saved state domain information in XML
    save-image-edit                edit XML for a domain's saved state file
    schedinfo                      show/set scheduler parameters
    screenshot                     take a screenshot of a current domain console and store it into a file
    setmaxmem                      change maximum memory limit
    setmem                         change memory allocation
    setvcpus                       change number of virtual CPUs
    shutdown                       gracefully shutdown a domain
    start                          start a (previously defined) inactive domain
    suspend                        suspend a domain
    ttyconsole                     tty console
    undefine                       undefine a domain
    update-device                  update device from an XML file
    vcpucount                      domain vcpu counts
    vcpuinfo                       detailed domain vcpu information
    vcpupin                        control or query domain vcpu affinity
    version                        show version
    vncdisplay                     vnc display

 Domain Monitoring (help keyword 'monitor')
    domblkinfo                     domain block device size information
    domblklist                     list all domain blocks
    domblkstat                     get device block stats for a domain
    domcontrol                     domain control interface state
    domif-getlink                  get link state of a virtual interface
    domifstat                      get network interface stats for a domain
    dominfo                        domain information
    dommemstat                     get memory statistics for a domain
    domstate                       domain state
    list                           list domains

 Host and Hypervisor (help keyword 'host')
    capabilities                   capabilities
    connect                        (re)connect to hypervisor
    freecell                       NUMA free memory
    hostname                       print the hypervisor hostname
    nodecpustats                   Prints cpu stats of the node.
    nodeinfo                       node information
    nodememstats                   Prints memory stats of the node.
    nodesuspend                    suspend the host node for a given time duration
    qemu-attach                    QEMU Attach
    qemu-monitor-command           QEMU Monitor Command
    sysinfo                        print the hypervisor sysinfo
    uri                            print the hypervisor canonical URI

 Interface (help keyword 'interface')
    iface-begin                    create a snapshot of current interfaces settings, which can be later commited
                                   (iface-commit) or restored (iface-rollback)
    iface-bridge                   create a bridge device and attach an existing network device to it
    iface-commit                   commit changes made since iface-begin and free restore point
    iface-define                   define (but don't start) a physical host interface from an XML file
    iface-destroy                  destroy a physical host interface (disable it / "if-down")
    iface-dumpxml                  interface information in XML
    iface-edit                     edit XML configuration for a physical host interface
    iface-list                     list physical host interfaces
    iface-mac                      convert an interface name to interface MAC address
    iface-name                     convert an interface MAC address to interface name
    iface-rollback                 rollback to previous saved configuration created via iface-begin
    iface-start                    start a physical host interface (enable it / "if-up")
    iface-unbridge                 undefine a bridge device after detaching its slave device
    iface-undefine                 undefine a physical host interface (remove it from configuration)

 Network Filter (help keyword 'filter')
    nwfilter-define                define or update a network filter from an XML file
    nwfilter-dumpxml               network filter information in XML
    nwfilter-edit                  edit XML configuration for a network filter
    nwfilter-list                  list network filters
    nwfilter-undefine              undefine a network filter

 Networking (help keyword 'network')
    net-autostart                  autostart a network
    net-create                     create a network from an XML file
    net-define                     define (but don't start) a network from an XML file
    net-destroy                    destroy (stop) a network
    net-dumpxml                    network information in XML
    net-edit                       edit XML configuration for a network
    net-info                       network information
    net-list                       list networks
    net-name                       convert a network UUID to network name
    net-start                      start a (previously defined) inactive network
    net-undefine                   undefine an inactive network
    net-uuid                       convert a network name to network UUID

 Node Device (help keyword 'nodedev')
    nodedev-create                 create a device defined by an XML file on the node
    nodedev-destroy                destroy (stop) a device on the node
    nodedev-dettach                dettach node device from its device driver
    nodedev-dumpxml                node device details in XML
    nodedev-list                   enumerate devices on this host
    nodedev-reattach               reattach node device to its device driver
    nodedev-reset                  reset node device

 Secret (help keyword 'secret')
    secret-define                  define or modify a secret from an XML file
    secret-dumpxml                 secret attributes in XML
    secret-get-value               Output a secret value
    secret-list                    list secrets
    secret-set-value               set a secret value
    secret-undefine                undefine a secret

 Snapshot (help keyword 'snapshot')
    snapshot-create                Create a snapshot from XML
    snapshot-create-as             Create a snapshot from a set of args
    snapshot-current               Get or set the current snapshot
    snapshot-delete                Delete a domain snapshot
    snapshot-dumpxml               Dump XML for a domain snapshot
    snapshot-edit                  edit XML for a snapshot
    snapshot-list                  List snapshots for a domain
    snapshot-parent                Get the name of the parent of a snapshot
    snapshot-revert                Revert a domain to a snapshot

 Storage Pool (help keyword 'pool')
    find-storage-pool-sources-as   find potential storage pool sources
    find-storage-pool-sources      discover potential storage pool sources
    pool-autostart                 autostart a pool
    pool-build                     build a pool
    pool-create-as                 create a pool from a set of args
    pool-create                    create a pool from an XML file
    pool-define-as                 define a pool from a set of args
    pool-define                    define (but don't start) a pool from an XML file
    pool-delete                    delete a pool
    pool-destroy                   destroy (stop) a pool
    pool-dumpxml                   pool information in XML
    pool-edit                      edit XML configuration for a storage pool
    pool-info                      storage pool information
    pool-list                      list pools
    pool-name                      convert a pool UUID to pool name
    pool-refresh                   refresh a pool
    pool-start                     start a (previously defined) inactive pool
    pool-undefine                  undefine an inactive pool
    pool-uuid                      convert a pool name to pool UUID

 Storage Volume (help keyword 'volume')
    vol-clone                      clone a volume.
    vol-create-as                  create a volume from a set of args
    vol-create                     create a vol from an XML file
    vol-create-from                create a vol, using another volume as input
    vol-delete                     delete a vol
    vol-download                   Download a volume to a file
    vol-dumpxml                    vol information in XML
    vol-info                       storage vol information
    vol-key                        returns the volume key for a given volume name or path
    vol-list                       list vols
    vol-name                       returns the volume name for a given volume key or path
    vol-path                       returns the volume path for a given volume name or key
    vol-pool                       returns the storage pool for a given volume key or path
    vol-upload                     upload a file into a volume
    vol-wipe                       wipe a vol

 Virsh itself (help keyword 'virsh')
    cd                             change the current directory
    echo                           echo arguments
    exit                           quit this interactive terminal
    help                           print help
    pwd                            print the current directory
    quit                           quit this interactive terminal


  (specify help <group> for details about the commands in the group)

  (specify help <command> for details about the command)


(05) Virtual Management tools
-------------------------------

Install useful tools for virtual machine management.
[1]	Install required packages.
root@ knows1:~# apt -y install libguestfs-tools virt-top
[2]	Get official OS image and Create a Virtual Machine.
( If you'd like to do from OS installation, refer to here of [1] )
# display available OS template
root@ knows1:~# virt-builder -l
.....
.....
cirros-0.3.1             x86_64     CirrOS 0.3.1
cirros-0.3.5             x86_64     CirrOS 0.3.5
debian-6                 x86_64     Debian 6 (Squeeze)
debian-7                 sparc64    Debian 7 (Wheezy) (sparc64)
debian-7                 x86_64     Debian 7 (wheezy)
debian-8                 x86_64     Debian 8 (jessie)
debian-9                 x86_64     Debian 9 (stretch)
fedora-26                aarch64    FedoraÂ® 26 Server (aarch64)
.....
.....
# create an image of Debian 9
root@ knows1:~# virt-builder debian-9 --format qcow2 --size 10G -o debian-9.qcow2 --root-password password
[   3.7] Downloading: http://builder.libguestfs.org/debian-9.xz
######################################################################### 100.0%
[ 110.6] Planning how to build this image
[ 110.6] Uncompressing
[ 116.0] Resizing (using virt-resize) to expand the disk to 10.0G
.....
.....
                   Output file: debian-9.qcow2
                   Output size: 10.0G
                 Output format: qcow2
            Total usable space: 9.8G
                    Free space: 9.0G (91%)

# to configure VM with the image above, run virt-install
root@ knows1:~# virt-install \
--name debian-9 \
--ram 4096 \
--disk path=/var/kvm/images/debian-9.qcow2 \
--vcpus 2 \
--os-type linux \
--os-variant debian9 \
--network bridge=br0 \
--graphics none \
--serial pty \
--console pty \
--boot hd \
--noreboot \
--import
[3]	[ls] a directory in a virtual machine.
root@ knows1:~# virt-ls -l -d debian /root
total 20
drwx------  2 0 0 4096 Jul 23 01:44 .
drwxr-xr-x 18 0 0 4096 Jul 23 01:26 ..
-rw-------  1 0 0   32 Jul 23 02:33 .bash_history
-rw-r--r--  1 0 0  570 Jan 31  2010 .bashrc
-rw-r--r--  1 0 0  148 Aug 17  2015 .profile
[4]	[cat] a file in a virtual machine.
root@ knows1:~# virt-cat -d debian /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
.....
.....
[5]	Edit a file in a virtual machine.
root@ knows1:~# virt-edit -d debian /etc/fstab

# /etc/fstab: static file system information.
# ½
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
/dev/mapper/debian--vg-root /                 ext4    errors=remount-ro 0       1
# /boot was on /dev/vda1 during installation
UUID=fb3e573f-3b9c-4876-a5af-07c860a14128     /boot  ext2    defaults 0       2
/dev/mapper/debian--vg-swap_1 none            swap    sw              0       0
[6]	Display disk usage in a virtual machine.
root@ knows1:~# virt-df -d debian
Filesystem                           1K-blocks       Used  Available  Use%
debian:/dev/sda1                        240972      48975     179556   21%
debian:/dev/debian-vg/root            16182156     967052   14373376    6%
[7]	Mount a disk for a virtual machine.
root@ knows1:~# guestmount -d debian -i /mnt
root@ knows1:~# ll /mnt
total 73
lrwxrwxrwx  1 root root     7 Jul 23 10:24 bin -> usr/bin
drwxr-xr-x  4 root root  1024 Jul 23 10:31 boot
drwxr-xr-x  4 root root  4096 Jul 23 10:24 dev
drwxr-xr-x 70 root root  4096 Jul 23 11:29 etc
drwxr-xr-x  3 root root  4096 Jul 23 10:32 home
.....
.....
[8]	Display the status of virtual machines.
root@ knows1:~# virt-top
virt-top 19:41:31 - x86_64 6/6CPU 2593MHz 16042MB
1 domains, 1 active, 1 running, 0 sleeping, 0 paused, 0 inactive D:0 O:0 X:0
CPU: 0.0%  Mem: 4096 MB (4096 MB by guests)

   ID S RDRQ WRRQ RXBY TXBY %CPU %MEM    TIME   NAME
    1 R                      0.0  0.0   0:07.37 debian

(06) Configure SPICE Server
------------------------------

Install Desktop Virtualization "SPICE ( Simple Protocol for Independent Computing Environment )".
It's possible to connect to virtual machines from remote client computer.
[1]	Edit existing virtual machine's xml-file and start virtual machine with SPICE like follows.
The example on this site shows to create a virtual machine without graphics,
so it's OK to change settings like follows, but if you created virtual machine with graphics, Remove "<graphics>***" and " <video>***" sections in xml file because qxl is used for graphics.
# edit the configration of [debian]
root@ knows1:~# virsh edit debian
<domain type='kvm'>
  <name>debian</name>
  <uuid>bd02b063-1330-4796-8c7e-8354a93eb0e3</uuid>
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
  .....
  .....
    # add follows
    # set any password for [passwd=***] section
    # set a uniq slot number for [slot=***]
    <graphics type='spice' port='5900' autoport='no' listen='0.0.0.0' passwd='password'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
    <video>
      <model type='qxl' ram='65536' vram='32768' heads='1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0'/>
    </video>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </memballoon>
  </devices>
</domain>

Domain debian XML configuration edited.

# start VM
root@ knows1:~# virsh start debian
Domain debian started
[2]
That's OK. See next section to connect to SPICE server from SPICE client.
[3]	By the way, if you'd like to enable SPICE on initial creating of virtual machine, specify like follows. Then, it's possible to install Systems with SPICE which requires GUI like Windows without installing Desktop Environment on KVM Host computer.
root@ knows1:~# virt-install \
--name Win2k19 \
--ram 6144 \
--disk path=/var/kvm/images/Win2k19.img,size=100 \
--vcpus=4 \
--os-type windows \
--os-variant=win2k19 \
--network bridge=br0 \
--graphics spice,listen=0.0.0.0,password=password,keymap=ja \
--video qxl \
--cdrom /tmp/Win2019_JA-JP.ISO

(07) Configure SPICE Client
----------------------------

Connect to a virtual machine with SPICE Client on Debian Computer.
[1]	Install required packages.
root@ knows1:~# apt -y install virt-viewer
[2]	Run [Remote Viewer].

[3]	Input [spice://(Server name or IP address):(port)] and click [Connect] button.

[4]	Input password you set and click the [OK] button.

[5]	After successing authentication, it's possible to connect to VM.

SPICE Client : Windows

SPICE client for Windows is also provided, so it's possible to connect from Windows.
This example uses Windows 10 for SPICE client.
[6]	Download Virt-Viewer Installer for Windows from the site below.
⇒ http://www.spice-space.org/download.html
After installing and starting [Remote Viewer].

[7]	Input [spice://(server's hostname or IP address):(port)] in the URL field and click [Connect] button.

[8]	Input password you set and click the [OK] button.

[9]	After successing authentication, it's possible to connect to VM.


(08) Nested KVM
------------------

Configure nested KVM.
It's possible to install KVM Hypervisor and create virtual machines as nested KVM on KVM host.
[1]	Enable the setting for Nested KVM.
# show the current setting ( if the result is [Y], it's OK )
root@ knows1:~# cat /sys/module/kvm_intel/parameters/nested
Y
# if the result is [N], change like follows and reboot the system )
root@ knows1:~# echo 'options kvm_intel nested=1' >> /etc/modprobe.d/qemu-system-x86.conf
[2]	Edit the configuration of an existing virtual machine you'd like to set Nested like follows.
That's OK, it's possible to create virtual machine on GuestOS.
# edit VM [debian]
root@ knows1:~# virsh edit debian
# change cpu mode like follows
<cpu mode='host-passthrough'>

(09) Live Migration
---------------------

This is the example to use Live Migration function for Virtual Machines.
This requires 2 KVM host server and a storage server like follows.
Please set DNS or hosts to resolve names or IP addresses normally, first.
                      +----------------------+
                      |   [  NFS Servver  ]  |
                      |     nfs.srv.world    |
                      |                      |
                      +-----------+----------+
                                  |10.0.0.35
                                  |
+----------------------+          |          +----------------------+
|  [   KVM Host #1  ]  |10.0.0.51 | 10.0.0.52|  [  KVM Host #2   ]  |
|                      +----------+----------+                      |
|   kvm01.srv.world    |                     |    kvm02.srv.world   |
+----------------------+                     +----------------------+

[1]
Configure Storage server which has virtual machine images.
For Storage server, it's OK to use NFS, iSCSI, GlusterFS and so on.
This example uses NFS Storage server.
[2]
Configure 2 KVM host servers and mount a directory provided from Storage server on the same mount point on both KVM server.
This example mounts on [/var/kvm/images].
And also, 2 servers need to be resolv hostname or IP address each other via DNS or local hosts file.
[3]
Set SSH key-pair for root account because SSH is used between 2 KVM servers.
[4]	Create a Virtual Machine on a KVM Host and migrate it to another KVM Host like follows.
# edit settings of VM you'd like to migrate
root@kvm01:~# virsh edit debian
 <disk type='file' device='disk'>
      # add: sepcify disk cache mode [none]
      <driver name='qemu' type='qcow2' cache='none'/>
      <source file='/var/kvm/images/debian.img'/>

root@kvm01:~# virsh start debian
root@kvm01:~# virsh list
 Id   Name     State
------------------------
 1    debian   running

root@kvm01:~# virsh migrate --live debian qemu+ssh://10.0.0.52/system
root@kvm01:~# virsh list
 Id   Name   State
--------------------
# VM is just migrated to another Host
### on another KVM Host ###
root@kvm02:~# virsh list
 Id   Name     State
------------------------
 1    debian   running

# back to the KVM Host again like follows
root@kvm02:~# virsh migrate --live debian qemu+ssh://10.0.0.51/system
root@kvm02:~# virsh list
 Id    Name             State
--------------------------------------



(10) Storage Migration
------------------------

This is the example to use Storage Migration function for virtual machines.
The different point of Storage Migration from Live Migration is that Storage Migration does not need a Storage server which has virtual machine images, when executing Storage Migration, virtual machine image on a KVM host is migrated on another KVM host.
                          Storage Migration
                        <------------------->

+----------------------+                     +----------------------+
|  [   KVM Host #1  ]  |10.0.0.51   10.0.0.52|  [  KVM Host #2   ]  |
|                      +---------------------+                      |
|   kvm01.srv.world    |                     |    kvm02.srv.world   |
+----------------------+                     +----------------------+

[1]
Configure 2 KVM Host Servers and Create a Virtual Machine on a KVM Host.
2 KVM Host Servers need to be resolv hostname or IP address each other via DNS or local hosts file.
[2]	Show the file size of a Virtual Machine image on a KVM host, and move to another KVM Host, then create a empty disk image that is the same size of Virtual Machine.
# show the size of Virtual machine
root@kvm01:~# ll /var/kvm/images
total 7237660
-rw------- 1 root root 21478375424 Jul 22 22:16 debian.img

### on another KVM host ###
# create a disk which is the same size of a Virtual Machine
root@kvm02:~# qemu-img create -f qcow2 /var/kvm/images/debian.img 21478375424
root@kvm02:~# ll /var/kvm/images
total 196
-rw-r--r-- 1 root root 196936 Jul 23 19:18 debian.img
[3]	That's OK, execute Storage Migration like follows.
root@kvm01:~# virsh list
 Id   Name     State
------------------------
 1    debian   running

root@kvm01:~# virsh migrate --live --copy-storage-all debian qemu+ssh://10.0.0.52/system
root@kvm01:~# virsh list
 Id   Name   State
--------------------
# VM is just migrated
### on another KVM host ###
root@kvm02:~# virsh list
 Id   Name     State
------------------------
 1    debian   running

# back to another host, run Live migration with unsafe option
root@kvm02:~# virsh migrate --live --unsafe debian qemu+ssh://10.0.0.51/system
root@kvm02:~# virsh list
 Id   Name   State
--------------------



 VirtualBox
************
(01) Install VirtualBox
--------------------------
Install Oracle VM VirtualBox to configure Virtualization Environment.
[1]	Install required packages.
root@ knows1:~# LINUX_HEADERS=$(uname -r)
root@ knows1:~# apt -y install gcc make linux-headers-$LINUX_HEADERS dkms
[2]	Install VirtualBox 6.0.
root@ knows1:~# vi /etc/apt/sources.list
# add to the end
deb https://download.virtualbox.org/virtualbox/debian  knows1 contrib
root@ knows1:~# wget https://www.virtualbox.org/download/oracle_vbox_2016.asc
root@ knows1:~# apt-key add oracle_vbox_2016.asc
OK
root@ knows1:~# apt update
root@ knows1:~# apt -y install virtualbox-6.0
root@ knows1:~# VBoxManage -v
6.0.10r132072
[3]	Install extension pack to use VRDP (Virtual Remote Desktop Protocol).
# confirm installed version
root@ knows1:~# dpkg -l virtualbox-6.0
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name           Version                     Architecture Description
+++-==============-===========================-============-====================
ii  virtualbox-6.0 6.0.10-132072~Ubuntu~bionic amd64        Oracle VM VirtualBox

# download the same version of extension pack
root@ knows1:~# wget http://download.virtualbox.org/virtualbox/6.0.10/Oracle_VM_VirtualBox_Extension_Pack-6.0.10.vbox-extpack
root@ knows1:~# VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-6.0.10.vbox-extpack
.....
.....
Do you agree to these license terms and conditions (y/n)? y

License accepted. For batch installation add
--accept-license=56be48f923303c8cababb0bb4c478284b688ed23f16d775d729b89a2e8e5f9eb
to the VBoxManage command line.

0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Successfully installed "Oracle VM VirtualBox Extension Pack".

root@ knows1:~# VBoxManage list extpacks
Extension Packs: 1
Pack no. 0:   Oracle VM VirtualBox Extension Pack
Version:      6.0.10
Revision:     132072
Edition:
Description:  USB 2.0 and USB 3.0 Host Controller, Host Webcam, VirtualBox RDP, PXE ROM, Disk Encryption, NVMe.
VRDE Module:  VBoxVRDP
Usable:       true
Why unusable:

(02) Create Virtual Machine
----------------------------


Create a Virtual Machine.
On this example, create it to install Debian 10.
[1]	Create a Virtual Machine.
# create a directory for VM
root@ knows1:~# mkdir /var/vbox
# create a VM
root@ knows1:~# VBoxManage createvm \
--name Debian_10 \
--ostype Debian_64 \
--register \
--basefolder /var/vbox
Virtual machine 'Debian_10' is created and registered.
UUID: 31dcfe03-36ac-4b99-ae1b-950b7c6f2792
Settings file: '/var/vbox/Debian_10/Debian_10.vbox'
# modify settings for VM
# replace the interface name [ens2] to your environment
root@ knows1:~# VBoxManage modifyvm Debian_10 \
--cpus 4 \
--memory 4096 \
--nic1 bridged \
--bridgeadapter1 ens2 \
--boot1 dvd \
--vrde on \
--vrdeport 5001
# configure storage for VM
root@ knows1:~# VBoxManage storagectl Debian_10 --name "Debian_10_SATA" --add sata
root@ knows1:~# VBoxManage createhd \
--filename /var/vbox/Debian_10/Debian_10.vdi \
--size 20480 \
--format VDI \
--variant Standard
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Medium created. UUID: 8722b6cc-3601-4738-a7ab-922703624256
root@ knows1:~# VBoxManage storageattach Debian_10 \
--storagectl Debian_10_SATA \
--port 1 \
--type hdd \
--medium /var/vbox/Debian_10/Debian_10.vdi
# configure DVD drive for VM
# the example below specifies an ISO file for installation
root@ knows1:~# VBoxManage storageattach Debian_10 \
--storagectl Debian_10_SATA \
--port 0 \
--type dvddrive \
--medium /tmp/debian-10.0.0-amd64-DVD-1.iso
# confirm settings for VM
root@ knows1:~# VBoxManage showvminfo Debian_10
Name:                        Debian_10
Groups:                      /
Guest OS:                    Debian (64-bit)
UUID:                        31dcfe03-36ac-4b99-ae1b-950b7c6f2792
Config file:                 /var/vbox/Debian_10/Debian_10.vbox
Snapshot folder:             /var/vbox/Debian_10/Snapshots
Log folder:                  /var/vbox/Debian_10/Logs
Hardware UUID:               31dcfe03-36ac-4b99-ae1b-950b7c6f2792
Memory size                  4096MB
Page Fusion:                 disabled
VRAM size:                   8MB
CPU exec cap:                100%
HPET:                        disabled
CPUProfile:                  host
Chipset:                     piix3
Firmware:                    BIOS
Number of CPUs:              4
PAE:                         enabled
Long Mode:                   enabled
Triple Fault Reset:          disabled
APIC:                        enabled
X2APIC:                      enabled
Nested VT-x/AMD-V:           disabled
CPUID Portability Level:     0
CPUID overrides:             None
.....
.....
[2]	Start Virtual Machine.
root@ knows1:~# VBoxManage startvm Debian_10 --type headless
Waiting for VM "Debian_10" to power on...
VM "Debian_10" has been successfully started.
[3]	On enabling VRDP environment, it's possible to connect with RDP. The example below is on Windows 10.
Connect to [(VirtualBox Server's Hostname or IP address):(vrdeport set for the VM)].

[4]	Just connected.

[5]	Installation has finished and Virtual Machine is running.


(03) Install GuestAdditions
-------------------------------

Install GuestAdditions into a Virtual Machine to improve Virtual Machine's System Performance.
The example below is to install GuestAdditions on a Virtual Machine [Debian_10].
[1]	Attach GuestAdditions' disk to the VM on VirtualBox Host.
The target VM must be stopped.
root@ knows1:~# VBoxManage storageattach Debian_10 \
--storagectl Debian_10_SATA \
--port 0 \
--type dvddrive \
--medium /usr/share/virtualbox/VBoxGuestAdditions.iso
[2]	Start the VM and login to it, then Install GuestAdditions on it.
# install required package first
root@guest:~# LINUX_HEADERS=$(uname -r)
root@guest:~# apt -y install gcc make bzip2 linux-headers-$LINUX_HEADERS
root@guest:~# mount /dev/cdrom /mnt
root@guest:~# cd /mnt
root@guest:/mnt# ./VBoxLinuxAdditions.run
Verifying archive integrity... All good.
Uncompressing VirtualBox 6.0.10 Guest Additions for Linux........
VirtualBox Guest Additions installer
Copying additional installer modules ...
Installing additional modules ...
VirtualBox Guest Additions: Starting.
VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel
modules.  This may take a while.
VirtualBox Guest Additions: To build modules for other installed kernels, run
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup <version>
VirtualBox Guest Additions: or
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all
VirtualBox Guest Additions: Building the modules for kernel 4.19.0-5-amd64.
update-initramfs: Generating /boot/initrd.img-4.19.0-5-amd64
VirtualBox Guest Additions: Running kernel modules will not be replaced until
the system is restarted

root@guest:/mnt# reboot

After installing GuestAdditions, System Performance will be improved.

(04) Create Virtual Machine (GUI)
------------------------------------

If you installed Desktop Environment, it's possible to create Virtual Machines on GUI.
This example shows to install Windows Server 2019 on GUI.
[1]	Run [Applications] - [Oracle VM VirtulBox].

[2]	Click [New] button on upper menu.

[3]	Select the type of OS for VM. Windows Server 2019 is not listed yet, so Select Server 2016 on the example below.

[4]	Specify amount of memory for Virtual Machine.

[5]	It's the settings for disks of Virtual Machine. This example shows to select [Create a virtual hard disk now].

[6]	Specify the type of Virtual hard disk. This example shows to select [VDI].

[7]	Specify the type of growing for Virtual hard disk. This example shows to select [Fixed size].

[8]	Specify amount of Virtual hard disk.

[9]	Configuration wizard finished. For initial booting of VM, it's necessarry to install OS, so click [Settings] button to specify installation media.

[10]	Select [Storage] on the left menu and click DVD icon on the right pane.

[11]	Specify installation media.

[12]	Back to main menu and click [Start] button to start Virtual Machine.

[13]	Virtual Machine started.

[14]	Installation has finished and Virtual Machine is running.




 Vagrant
**********
(01) Install Vagrant
---------------------


Install Vagrant that is wrapper tool for Virtualization software like VirtualBox or others.
Vagrant supports many Virtualization software like VirtualBox or KVM and others, on this example, it is based on the VirtualBox installed environment.
[1]	Install Vagrant.
root@ knows1:~# apt -y install vagrant
[2]	Basic usage of Vagrant.
# download and add virtual machine images
# for downloadable image, refer to the official site below
# ⇒ https://app.vagrantup.com/boxes/search
root@ knows1:~# vagrant box add generic/debian10
==> box: Loading metadata for box 'generic/debian10'
    box: URL: https://vagrantcloud.com/generic/debian10
This box can work with multiple providers! The providers that it
can work with are listed below. Please review the list and choose
the provider you will be working with.

1) hyperv
2) libvirt
3) parallels
4) virtualbox
5) vmware_desktop

Enter your choice: 4
==> box: Adding box 'generic/debian10' (v1.9.20) for provider: virtualbox
    box: Downloading: https://vagrantcloud.com/generic/boxes/debian10/versions/1.9.20/providers/virtualbox.box
    box: Download redirected to host: vagrantcloud-files-production.s3.amazonaws.com
==> box: Successfully added box 'generic/debian10' (v1.9.20) for 'virtualbox'!


# initialize ([Vagrantfile] is created on the current path)
root@ knows1:~# vagrant init generic/debian10
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.

# start virtual machine
root@ knows1:~# vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Importing base box 'generic/debian10'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'generic/debian10' version '1.9.20' is up to date...
==> default: Setting the name of the VM: root_default_1564021739950_83316
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Running 'pre-boot' VM customizations...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default:
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair for better security.
    default:
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it's present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==> default: Machine booted and ready!
==> default: Checking for guest additions in VM...
    default: The guest additions on this VM do not match the installed version of
    default: VirtualBox! In most cases this is fine, but in rare cases it can
    default: prevent things such as shared folders from working properly. If you see
    default: shared folder errors, please make sure the guest additions within the
    default: virtual machine match the version of VirtualBox you have installed on
    default: your host and reload your VM.
    default:
    default: Guest Additions Version: 5.2.0 r68940
    default: VirtualBox Version: 6.0

# show state of virtual machine
root@ knows1:~# vagrant status
Current machine states:

default                   running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.

# connect to virtual machine with SSH
root@ knows1:~# vagrant ssh
vagrant@debian10:~$

vagrant@debian10:~$ exit

# stop virtual machine
root@ knows1:~# vagrant halt
==> default: Attempting graceful shutdown of VM...
# if you'd like to change settings of virtual machine, edit Vagrantfile
root@ knows1:~# vi Vagrantfile
# for example to change CPU and Memory settings
# uncomment line 57 like follows and add or change values
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "4096"
     vb.cpus = 2
  end

#######################
| Container Platform  |
#######################
 Docker
*********
(01) Install Docker
-----------------------

Install Docker which is the Operating System-Level Virtualization Tool, which automates the deployment of applications inside Containers.
[1]	Install Docker.
root@ knows1:~# apt -y install docker.io
[2]	Download an official image and create a Container and output the words [Welcome to the Docker World] inside the Container.
# download the image
root@ knows1:~# docker pull debian
Using default tag: latest
latest: Pulling from library/debian
5ae19949497e: Pull complete
Digest: sha256:903779f30a7ee46937bfb21406f125d5fdace4178074e1cc71c49039ebf7f48f
Status: Downloaded newer image for debian:latest

# run echo inside Container
root@ knows1:~# docker run debian /bin/echo "Welcome to the Docker World!"
Welcome to the Docker World!
[3]	Connect to the interactive session of a Container with [i] and [t] option like follows. If exit from the Container session, the process of a Container finishes.
root@ knows1:~# docker run -it debian /bin/bash
root@7f48eb4b9db4:/#     # Container's console
root@7f48eb4b9db4:/# uname -a
Linux 7f48eb4b9db4 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64 GNU/Linux
root@7f48eb4b9db4:/# exit
exit
root@ knows1:~#     # come back
[4]	If exit from the Container session with keeping container's process, push [Ctrl+p] and [Ctrl+q] key.
root@ knows1:~# docker run -it debian /bin/bash
root@155deb48bfb8:/# root@ knows1:~#     # Ctrl+p, Ctrl+q
# show docker process
root@ knows1:~# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
155deb48bfb8        debian              "/bin/bash"         16 seconds ago      Up 14 seconds                           agitated_albattani

# connect to container's session
root@ knows1:~# docker attach 155deb48bfb8
root@155deb48bfb8:/#
# shutdown container's process from Host's console
root@ knows1:~# docker kill 155deb48bfb8
155deb48bfb8
root@ knows1:~# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES


(02) Add Container images
-----------------------------

Add Container images you created.
[1]	For exmaple, update official image with installing Apache2 and add it as a new image for container. The container is generated every time for executing docker run command, so add the latest executed container like follows.
# show images
root@ knows1:~# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
debian              latest              00bf7fdd8baf        2 weeks ago         114MB

# start a Container and install apache2
root@ knows1:~# docker run debian /bin/bash -c "apt-get update; apt-get -y install apache2"
root@ knows1:~# docker ps -a | head -2
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                       PORTS               NAMES
f273ecfea032        debian              "/bin/bash -c 'apt-g…"   36 seconds ago      Exited (0) 7 seconds ago                         loving_cocks

# add the image
root@ knows1:~# docker commit f273ecfea032 srv.world/debian_apache2
sha256:4295df3e5c82c024da75f82181b00004e2a3e4c5fcbe120dc8e3a2a74705f545

root@ knows1:~# docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
srv.world/debian_apache2   latest              4295df3e5c82        13 seconds ago      243MB
debian                     latest              00bf7fdd8baf        2 weeks ago         114MB

# Generate a Container from the new image and execute [which] to make sure httpd exists
root@ knows1:~# docker run srv.world/debian_apache2 /usr/bin/which apache2
/usr/sbin/apache2


(03) Access to Container Services
------------------------------------

If you'd like to access to services like HTTP or SSH which is running in Containers as a daemon, Configure like follows.
[1]	For exmaple, use a Container which has Apache2.
# start the Container and also run Apache2
# map the port of Host and the port of Container with [-p xxx:xxx]
root@ knows1:~# docker run -t -d -p 8081:80 srv.world/debian_apache2 /usr/sbin/apachectl -D FOREGROUND
a59a297105ac4e2edac34f530b419f4710307c51a4bbc820a462876ca18673b3

root@ knows1:~# docker ps
CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS                  NAMES
a59a297105ac        srv.world/debian_apache2   "/usr/sbin/apachectl…"   27 seconds ago      Up 25 seconds       0.0.0.0:8081->80/tcp   laughing_pike

# create a test page
root@ knows1:~# docker exec a59a297105ac /bin/bash -c 'echo "Apache2 on Docker Container" > /var/www/html/index.html'
# verify it works normally
root@ knows1:~# curl localhost:8081
Apache2 on Docker Container

(04) Use Dockerfile
----------------------

Use Dockerfile and create Docker images automatically.
It is also useful for configuration management.
[1]	For example, Create a Dockerfile to install apache2 and sshd and also install Supervisor to control multiple services on a Container.
root@ knows1:~# vi Dockerfile
# create new
 FROM debian
MAINTAINER ServerWorld <admin@srv.world>

RUN apt-get update
RUN apt-get -y install openssh-server apache2 supervisor
RUN echo "Hello DockerFile World" > /var/www/html/index.html
RUN mkdir /var/run/sshd; chmod 755 /var/run/sshd
RUN mkdir /root/.ssh; chown root. /root/.ssh; chmod 700 /root/.ssh
RUN ssh-keygen -A

ADD supervisord.conf /etc/supervisor/supervisord.conf
ADD .ssh/id_rsa.pub /root/.ssh/authorized_keys

EXPOSE 22 80
CMD ["/usr/bin/supervisord"]

# create a Supervisor template
root@ knows1:~# vi supervisord.conf
 [supervisord]
nodaemon=true

[program:sshd]
command=/usr/sbin/sshd -D
autostart=true
autorestart=true

[program:apache2]
command=/usr/sbin/apachectl -D FOREGROUND
autostart=true
autorestart=true

# generate SSH key
root@ knows1:~# ssh-keygen -q -N "" -f /root/.ssh/id_rsa
# build image ⇒ docker build -t [image name]:[tag] ./
root@ knows1:~# docker build -t web_server:latest ./
Sending build context to Docker daemon  25.09kB
Step 1/12 : FROM debian
 ---> 00bf7fdd8baf
Step 2/12 : MAINTAINER ServerWorld <admin@srv.world>
 ---> Running in 464a037bb269
Removing intermediate container 464a037bb269
 ---> da7062920d80
Step 3/12 : RUN apt-get update
 ---> Running in a5f6c9129047
.....
.....
Successfully built 42e95a62ed8e
Successfully tagged web_server:latest

root@ knows1:~# docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
web_server                 latest              42e95a62ed8e        43 seconds ago      300MB
srv.world/debian_apache2   latest              4295df3e5c82        6 minutes ago       243MB
debian                     latest              00bf7fdd8baf        2 weeks ago         114MB

# run Container on background
root@ knows1:~# docker run -d -p 2022:22 -p 8081:80 web_server
ad9085a4054fa94f0a8b0ecb44eb01311e17af2bb289fc2b7d5b1ff08de57648
root@ knows1:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                        NAMES
ad9085a4054f        web_server          "/usr/bin/supervisord"   27 seconds ago      Up 26 seconds       0.0.0.0:2022->22/tcp, 0.0.0.0:8081->80/tcp   distracted_visvesvaraya

# verify accesses
root@ knows1:~# curl localhost:8081
Hello DockerFile World
root@ knows1:~# ssh -p 2022 localhost /bin/hostname
The authenticity of host '[localhost]:2022 ([::1]:2022)' can't be established.
ECDSA key fingerprint is SHA256:LZCF9x1nEZn442WB4WUMz/Lz0WQ90b4wVeXb2fqQ/os.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:2022' (ECDSA) to the list of known hosts.
ad9085a4054f
The format of Dockerfile is [INSTRUCTION arguments] .
Refer to the following description for INSTRUCTION.
INSTRUCTION	Description
FROM	iIt sets the Base Image for subsequent instructions.
MAINTAINER	It sets the Author field of the generated images.
RUN	It will execute any commands when Docker image will be created.
CMD	It will execute any commands when Docker container will be executed.
ENTRYPOINT	It will execute any commands when Docker container will be executed.
LABEL	It adds metadata to an image.
EXPOSE	It informs Docker that the container will listen on the specified network ports at runtime.
ENV	It sets the environment variable.
ADD	It copies new files, directories or remote file URLs.
COPY	It copies new files or directories.
The differences of [ADD] are that it's impossible to specify remore URL and also it will not extract archive files automatically.
VOLUME	It creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers
USER	It sets the user name or UID.
WORKDIR	It sets the working directory.


(05) Use Persistent Storage
-------------------------------

When Container is removed, data in it are also lost, so it's necessary to use external filesystem in Container as persistent storage if you need.
[1]	For exmaple, create a Container only for using to save data as a storage server with an image busybox.
root@ knows1:~# vi Dockerfile
# create new
 FROM busybox
MAINTAINER ServerWorld <admin@srv.world>

VOLUME /storage
CMD /bin/sh

# build image
root@ knows1:~# docker build -t storage ./
root@ knows1:~# docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
storage                    latest              51e28000b0fb        2 seconds ago       1.22MB
web_server                 latest              42e95a62ed8e        16 minutes ago      300MB
srv.world/debian_apache2   latest              4295df3e5c82        22 minutes ago      243MB
busybox                    latest              db8ee88ad75f        5 days ago          1.22MB
debian                     latest              00bf7fdd8baf        2 weeks ago         114MB

# generate a Container with any name you like
root@ knows1:~# docker run -it --name storage_server storage
/ # exit
[2]	To use the Container above as a Storage Server from other Containers, add an option [--volumes-from].
root@ knows1:~# docker run -it --name debian_server --volumes-from storage_server debian /bin/bash
root@da389fad6f25:/# df -hT
Filesystem                  Type     Size  Used Avail Use% Mounted on
overlay                     overlay   63G  4.6G   55G   8% /
tmpfs                       tmpfs     64M     0   64M   0% /dev
tmpfs                       tmpfs    7.9G     0  7.9G   0% /sys/fs/cgroup
/dev/mapper/debian--vg-root ext4      63G  4.6G   55G   8% /storage
shm                         tmpfs     64M     0   64M   0% /dev/shm
tmpfs                       tmpfs    7.9G     0  7.9G   0% /proc/acpi
tmpfs                       tmpfs    7.9G     0  7.9G   0% /sys/firmware

root@da389fad6f25:/# echo "persistent storage" >> /storage/testfile.txt
root@da389fad6f25:/# ls -l /storage
total 4
-rw-r--r-- 1 root root 19 Jul 24 04:43 testfile.txt
[3]	Make sure datas are saved to run a Container of Storage Server like follows.
root@ knows1:~# docker start storage_server
root@ knows1:~# docker exec -it storage_server cat /storage/testfile.txt
persistent storage
[4]	For other way to save data in external filesystem, it's possible to mount a directory on Docker Host into Containers.
# create a directory
root@ knows1:~# mkdir -p /var/lib/docker/disk01
root@ knows1:~# echo "persistent storage" >> /var/lib/docker/disk01/testfile.txt
# run a Container with mounting the directory above on /mnt
root@ knows1:~# docker run -it -v /var/lib/docker/disk01:/mnt debian /bin/bash
root@8490041a0db2:/# df -hT
Filesystem                  Type     Size  Used Avail Use% Mounted on
overlay                     overlay   63G  4.6G   55G   8% /
tmpfs                       tmpfs     64M     0   64M   0% /dev
tmpfs                       tmpfs    7.9G     0  7.9G   0% /sys/fs/cgroup
/dev/mapper/debian--vg-root ext4      63G  4.6G   55G   8% /mnt
shm                         tmpfs     64M     0   64M   0% /dev/shm
tmpfs                       tmpfs    7.9G     0  7.9G   0% /proc/acpi
tmpfs                       tmpfs    7.9G     0  7.9G   0% /sys/firmware

root@4526babc56ec:/# cat /mnt/testfile.txt
persistent storage


(06) Use Docker-Registry
-------------------------------

Install Docker-Registry to build Private Registry for Docker images.
[1]
On The Host which Docker-Registry Container runs, Get SSL Certificates, refer to here.
This example is based on the case that SSL certificates are gotten under the [/etc/letsencrypt/live/ knows1.srv.world] and set the [Common Name] as [ knows1.srv.world].
[2]	Copy to locate Certificates and pull Registry Image (v2).
Container Images are located under [/var/lib/regstry] on Registry v2 Container, so map to mount [/var/lib/docker/registry] on parent Host for Registry Container to use as Persistent Storage.
root@ knows1:~# mkdir -p /etc/docker/certs.d/ knows1.srv.world:5000
root@ knows1:~# cp -p /etc/letsencrypt/live/ knows1.srv.world/cert.pem /etc/docker/certs.d/ knows1.srv.world:5000/ca.crt
root@ knows1:~# docker pull registry:2
root@ knows1:~# mkdir /var/lib/docker/registry
root@ knows1:~# docker run -d -p 5000:5000 \
-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/fullchain.pem \
-e REGISTRY_HTTP_TLS_KEY=/certs/privkey.pem \
-v /etc/letsencrypt/live/ knows1.srv.world:/certs \
-v /var/lib/docker/registry:/var/lib/registry \
registry:2
 131143d2def7d089976ce6dd658bf9c4ccc4e43beff3f6932da4d9c81841a768
root@ knows1:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
131143d2def7        registry:2          "/entrypoint.sh /etc…"   11 seconds ago      Up 10 seconds       0.0.0.0:5000->5000/tcp   clever_williamson
[3]	For pushing local Image to Registry Container server, set like follows.
# list images on Registry container
root@ knows1:~# curl https:// knows1.srv.world:5000/v2/_catalog
{"repositories":[]}
root@ knows1:~# docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
storage                    latest              51e28000b0fb        8 minutes ago       1.22MB
web_server                 latest              42e95a62ed8e        25 minutes ago      300MB
srv.world/debian_apache2   latest              4295df3e5c82        31 minutes ago      243MB
busybox                    latest              db8ee88ad75f        5 days ago          1.22MB
debian                     latest              00bf7fdd8baf        2 weeks ago         114MB
registry                   2                   f32a97de94e1        4 months ago        25.8MB

# set a tag and push
root@ knows1:~# docker tag debian  knows1.srv.world:5000/debian_reg
root@ knows1:~# docker push  knows1.srv.world:5000/debian_reg
The push refers to repository [ knows1.srv.world:5000/debian_reg]
.....
.....
31b0e148310d: Pushed
latest: digest: sha256:2ea543d7e388e3cee7be9d37ae93b1eab62a108716e64bb71f6fa93948967e73 size: 529
root@ knows1:~# docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE
storage                         latest              51e28000b0fb        10 minutes ago      1.22MB
web_server                      latest              42e95a62ed8e        26 minutes ago      300MB
srv.world/debian_apache2        latest              4295df3e5c82        32 minutes ago      243MB
busybox                         latest              db8ee88ad75f        5 days ago          1.22MB
 knows1.srv.world:5000/debian_reg   latest              00bf7fdd8baf        2 weeks ago         114MB
debian                          latest              00bf7fdd8baf        2 weeks ago         114MB
registry                        2                   f32a97de94e1        4 months ago        25.8MB

root@ knows1:~# curl https:// knows1.srv.world:5000/v2/_catalog
{"repositories":["debian_reg"]}
[4]	For getting images from Registry Container server on a Docker node, set like follows.
# get certificates from Registry Container
root@node01:~# mkdir -p /etc/docker/certs.d/ knows1.srv.world:5000
root@node01:~# cd /etc/docker/certs.d/ knows1.srv.world:5000
root@node01:/etc/...5000# scp debian@ knows1.srv.world:"/etc/docker/certs.d/ knows1.srv.world:5000/ca.crt" ./
root@node01:~# docker pull  knows1.srv.world:5000/debian_reg
Using default tag: latest
latest: Pulling from debian_reg
5ae19949497e: Pull complete
Digest: sha256:2ea543d7e388e3cee7be9d37ae93b1eab62a108716e64bb71f6fa93948967e73
Status: Downloaded newer image for  knows1.srv.world:5000/debian_reg:latest
root@node01:~# docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE
 knows1.srv.world:5000/debian_reg   latest              00bf7fdd8baf        2 weeks ago         114MB


(07) Use Docker-Registry (Auth)
---------------------------------

Configure Docker Private Registry which requires user authentication.
[1]
On the Node which you run Registry Pod, Get SSL certificates, refer to here.
[2]	Install htpasswd command for adding users.
root@ knows1:~# apt -y install apache2-utils
[3]	Add any user you like.
root@ knows1:~# htpasswd -Bc /etc/docker/.htpasswd admin
New password:
Re-type new password:
Adding password for user admin
[4]	On this example, certificates are saved under [/etc/letsencrypt/live/(FQDN)] on Registry Node.
Run Registry Pod with htpasswd file created above and certificates.
root@ knows1:~# mkdir /etc/docker/certs.d
root@ knows1:~# cp /etc/letsencrypt/live/ knows1.srv.world/fullchain.pem /etc/docker/certs.d/server.crt
root@ knows1:~# cp /etc/letsencrypt/live/ knows1.srv.world/privkey.pem /etc/docker/certs.d/server.key
root@ knows1:~# docker run -d -p 5000:5000 --restart=always --name registry \
-v /var/lib/registry:/var/lib/registry \
-v /etc/docker/certs.d:/certs \
-v /etc/docker:/auth \
-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/server.crt \
-e REGISTRY_HTTP_TLS_KEY=/certs/server.key \
-e REGISTRY_AUTH=htpasswd \
-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/.htpasswd \
-e REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm" \
registry:2
e2c22e4df789fed4a03a3eaf281d8e03d223afd2359531a85e2dd357ddfbde37

root@ knows1:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
e2c22e4df789        registry:2          "/entrypoint.sh /etc…"   9 minutes ago       Up 9 minutes        0.0.0.0:5000->5000/tcp   registry
[5]	That's OK to configure registry. Try to Push/Pull images from your Private Registry on any Docker nodes.
# login with a user you added
root@node01:~# docker login  knows1.srv.world:5000
Username: admin
Password:
Login Succeeded
root@node01:~# docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE
nginx                           latest              e445ab08b2be        9 hours ago         126MB

root@node01:~# docker tag nginx  knows1.srv.world:5000/nginx
root@node01:~# docker push  knows1.srv.world:5000/nginx
The push refers to repository [ knows1.srv.world:5000/nginx]
fe6a7a3b3f27: Pushed
d0673244f7d4: Pushed
d8a33133e477: Pushed
latest: digest: sha256:dc85890ba9763fe38b178b337d4ccc802874afe3c02e6c98c304f65b08af958f size: 948

root@node01:~# docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE
 knows1.srv.world:5000/nginx        latest              e445ab08b2be        9 hours ago         126MB
nginx                           latest              e445ab08b2be        9 hours ago         126MB

(08) Use Docker Compose
--------------------------

To Install Docker Compose, it's easy to configure and run multiple containers as a Docker application.
[1]	Install Docker Compose.
root:~# apt -y install docker-compose
[2]	For example, Configure an application that has WEB and DB services with Docker Compose.
# define WEB service container
root@ knows1:~# vi Dockerfile
 FROM debian
MAINTAINER ServerWorld <admin@srv.world>

RUN apt-get update
RUN apt-get -y install apache2

EXPOSE 80
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

# define application configration
root@ knows1:~# vi docker-compose.yml
 version: '3'
services:
  db:
    image: mariadb
    volumes:
      - /var/lib/docker/disk01:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER:  knows1
      MYSQL_PASSWORD: password
      MYSQL_DATABASE:  knows1_db
    ports:
      - "3306:3306"
  web:
    build: .
    ports:
      - "80:80"
    volumes:
      - /var/lib/docker/disk02:/var/www/html

# buid and run
root@ knows1:~# docker-compose up -d
Creating network "root_default" with the default driver
Pulling db (mariadb:)...
latest: Pulling from library/mariadb
.....
.....
Creating root_db_1  ... done
Creating root_web_1 ... done

root@ knows1:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                    NAMES
13ee0aae751b        mariadb             "docker-entrypoint.s…"   About a minute ago   Up About a minute   0.0.0.0:3306->3306/tcp   root_db_1
3f4cb4966ffa        root_web            "/usr/sbin/apachectl…"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp       root_web_1

# verify accesses
root@ knows1:~# mysql -h 127.0.0.1 -u root -p -e "show variables like 'hostname';"
Enter password:
+---------------+--------------+
| Variable_name | Value        |
+---------------+--------------+
| hostname      | 13ee0aae751b |
+---------------+--------------+

root@ knows1:~# mysql -h 127.0.0.1 -u  knows1 -p -e "show databases;"
Enter password:
+--------------------+
| Database           |
+--------------------+
|  knows1_db          |
| information_schema |
+--------------------+

root@ knows1:~# echo "Hello Docker Compose World" > /var/lib/docker/disk02/index.html
root@ knows1:~# curl 127.0.0.1
Hello Docker Compose World
[3]	Other basic operations of Docker Compose are follows.
# verify state of containers
root@ knows1:~# docker-compose ps
   Name                 Command               State           Ports
----------------------------------------------------------------------------
root_db_1    docker-entrypoint.sh mysqld      Up      0.0.0.0:3306->3306/tcp
root_web_1   /usr/sbin/apachectl -D FOR ...   Up      0.0.0.0:80->80/tcp

# show logs of containers
root@ knows1:~# docker-compose logs
db_1   | Initializing database
db_1   |
db_1   |
db_1   | PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !
db_1   | To do so, start the server, then issue the following commands:
db_1   |
db_1   | '/usr/bin/mysqladmin' -u root password 'new-password'
db_1   | '/usr/bin/mysqladmin' -u root -h  password 'new-password'
.....
.....
db_1   | 2019-07-24  5:31:31 0 [Note] Added new Master_info '' to hash table
db_1   | 2019-07-24  5:31:31 0 [Note] mysqld: ready for connections.
db_1   | Version: '10.4.6-MariaDB-1:10.4.6+maria~ knows1'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  mariadb.org binary distribution

# run any commands inside a container
# container name is just the one set in [docker-compose.yml]
root@ knows1:~# docker-compose exec db /bin/bash
root@13ee0aae751b:/#

# stop application and also shutdown all containers
root@ knows1:~# docker-compose stop
Stopping root_db_1  ... done
Stopping root_web_1 ... done

# start a service alone in application
# if set dependency, other container starts
root@ knows1:~# docker-compose up -d web
Starting root_web_1 ... done

root@ knows1:~# docker-compose ps
   Name                 Command               State          Ports
-------------------------------------------------------------------------
root_db_1    docker-entrypoint.sh mysqld      Exit 0
root_web_1   /usr/sbin/apachectl -D FOR ...   Up       0.0.0.0:80->80/tcp

# remove all containers in application
# if a container is running, it won't be removed
root@ knows1:~# docker-compose rm
Going to remove root_db_1, root_web_1
Are you sure? [yN] y
Removing root_db_1  ... done
Removing root_web_1 ... done

(09) Configure Swarm Cluster
--------------------------------

Configure Docker Swarm to create Docker Cluster with multiple Docker nodes.
On this example, Configure Swarm Cluster with 3 Docker nodes like follows.
There are 2 roles on Swarm Cluster, those are [Manager nodes] and [Worker nodes
This example shows to set those roles like follows.
 -----------+---------------------------+--------------------------+------------
            |                           |                          |
        eth0|10.0.0.51              eth0|10.0.0.52             eth0|10.0.0.53
 +----------+-----------+   +-----------+----------+   +-----------+----------+
 | [ node01.srv.world ] |   | [ node02.srv.world ] |   | [ node03.srv.world ] |
 |       Manager        |   |        Worker        |   |        Worker        |
 +----------------------+   +----------------------+   +----------------------+

[1]
Install and run Docker service on all nodes, refer to here.
[2]	Configure Swarm Cluster on Manager Node.
root@node01:~# docker swarm init
Swarm initialized: current node (al73w42dwnui659iyomjcekds) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-19qm6ypn0d25pwisgcsjak9m31mwesutrl9448q7l92oe2izwb-8z3dk7xs19tuc1rxf9a2ix4tu 10.0.0.51:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
[3]	Join in Swarm Cluster on all Worker Nodes.
It's OK to run the command which was shown when running swarm init on Manager Node.
root@node02:~# docker swarm join \
--token SWMTKN-1-19qm6ypn0d25pwisgcsjak9m31mwesutrl9448q7l92oe2izwb-8z3dk7xs19tuc1rxf9a2ix4tu 10.0.0.51:2377
This node joined a swarm as a worker.
[4]	Verify with a command [node ls] that worker nodes could join in Cluster normally.
root@node01:~# docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
al73w42dwnui659iyomjcekds *   node01.srv.world    Ready               Active              Leader              18.09.1
3nvb18sjv4ric46kawvfosx9h     node02.srv.world    Ready               Active                                  18.09.1
zr23tmq3dj938va6lchm88y0f     node03.srv.world    Ready               Active                                  18.09.1
[5]	After creating Swarm Cluster, next, configure services that the Swarm Cluster provides.
Create the same container image on all Nodes for the service first.
On this exmaple, create a Container image which provides http service like follows on all Nodes.
root@node01:~# vi Dockerfile
 FROM debian
MAINTAINER ServerWorld <admin@srv.world>

RUN apt-get update
RUN apt-get -y install apache2
RUN echo "node01" > /var/www/html/index.html

EXPOSE 80
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

root@node01:~# docker build -t apache2_server:latest ./
[6]	Configure service on Manager Node.
After successing to configure service, access to the Manager node's Hostname or IP address to verify it works normally. By the way, requests to worker nodes are load-balanced with round-robin like follows.
root@node01:~# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
apache2_server      latest              41d978b3ce45        10 seconds ago      243MB
debian              latest              00bf7fdd8baf        2 weeks ago         114MB

# create a service with 2 repricas
root@node01:~# docker service create --name swarm_cluster --replicas=2 -p 80:80 apache2_server:latest
image apache2_server:latest could not be accessed on a registry to record
its digest. Each node will access apache2_server:latest independently,
possibly leading to different nodes running different
versions of the image.
.....
.....
1/2: running
2/2: running
verify: Service converged

# show service list
root@node01:~# docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                   PORTS
tbnpvw5b871p        swarm_cluster       replicated          2/2                 apache2_server:latest   *:80->80/tcp

# inspect the service
root@node01:~# docker service inspect swarm_cluster --pretty
ID:             tbnpvw5b871puheptpakzcxby
Name:           swarm_cluster
Service Mode:   Replicated
 Replicas:      2
Placement:
UpdateConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Update order:      stop-first
RollbackConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Rollback order:    stop-first
ContainerSpec:
 Image:         apache2_server:latest
 Init:          false
Resources:
Endpoint Mode:  vip
Ports:
 PublishedPort = 80
  Protocol = tcp
  TargetPort = 80
  PublishMode = ingress

# show service state
root@node01:~# docker service ps swarm_cluster
ID                  NAME                IMAGE                   NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
bdjrhe896xye        swarm_cluster.1     apache2_server:latest   node02.srv.world    Running             Running 47 seconds ago
fcq9es71z8zf        swarm_cluster.2     apache2_server:latest   node01.srv.world    Running             Running 47 seconds ago

# verify it works normally
root@node01:~# curl http://node01.srv.world
node02
root@node01:~# curl http://node01.srv.world
node01
root@node01:~# curl http://node01.srv.world
node02
root@node01:~# curl http://node01.srv.world
node01
[7]	If you'd like to change the number of repricas, configure like follows.
# change repricas to 3
root@node01:~# docker service scale swarm_cluster=3
swarm_cluster scaled to 3
overall progress: 3 out of 3 tasks
1/3: running
2/3: running
3/3: running
verify: Service converged
root@node01:~# docker service ps swarm_cluster
ID                  NAME                IMAGE                   NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
bdjrhe896xye        swarm_cluster.1     apache2_server:latest   node02.srv.world    Running             Running about a minute ago
fcq9es71z8zf        swarm_cluster.2     apache2_server:latest   node01.srv.world    Running             Running about a minute ago
xghvm62h2o4x        swarm_cluster.3     apache2_server:latest   node03.srv.world    Running             Running 7 seconds ago

# verify working
root@node01:~# curl http://node01.srv.world
node03
root@node01:~# curl http://node01.srv.world
node02
root@node01:~# curl http://node01.srv.world
node01


#######################
| Directory Server |
#######################
OpenLDAP
*********
(01) Configure LDAP Server
-----------------------------

Configure LDAP Server in order to share users' accounts in your local networks.
[1]	Install OpenLDAP.
root@ knows1:~# apt -y install slapd ldap-utils
# set LDAP admin password during installation like follows
 +--------------------------| Configuring slapd |-------------------------+
 | Please enter the password for the admin entry in your LDAP directory.  |
 |                                                                        |
 | Administrator password:                                                |
 |                                                                        |
 | ********______________________________________________________________ |
 |                                                                        |
 |                                 <Ok>                                   |
 |                                                                        |
 +------------------------------------------------------------------------+

# confirm settings
root@ knows1:~# slapcat
dn: dc=srv,dc=world
objectClass: top
objectClass: dcObject
objectClass: organization
o: srv.world
dc: srv
structuralObjectClass: organization
entryUUID: 08b3ae24-42fa-1039-8da0-ef6bf22a19f7
creatorsName: cn=admin,dc=srv,dc=world
createTimestamp: 20190725073200Z
entryCSN: 20190725073200.275709Z#000000#000#000000
modifiersName: cn=admin,dc=srv,dc=world
modifyTimestamp: 20190725073200Z

dn: cn=admin,dc=srv,dc=world
objectClass: simpleSecurityObject
objectClass: organizationalRole
cn: admin
description: LDAP administrator
userPassword:: e1NTSEF9RG5yMWY1VGFnemc1WUlPMDJOQzY3dC9zbHVYZXhTZFo=
structuralObjectClass: organizationalRole
entryUUID: 08b9c85e-42fa-1039-8da1-ef6bf22a19f7
creatorsName: cn=admin,dc=srv,dc=world
createTimestamp: 20190725073200Z
entryCSN: 20190725073200.315769Z#000000#000#000000
modifiersName: cn=admin,dc=srv,dc=world
modifyTimestamp: 20190725073200Z
[2]	Add base dn for Users and Groups.
root@ knows1:~# vi base.ldif
# create new
# change to your own suffix for the field [dc=srv,dc=world]
 dn: ou=people,dc=srv,dc=world
objectClass: organizationalUnit
ou: people

dn: ou=groups,dc=srv,dc=world
objectClass: organizationalUnit
ou: groups

root@ knows1:~# ldapadd -x -D cn=admin,dc=srv,dc=world -W -f base.ldif
Enter LDAP Password:     # LDAP admin password (set in installation of openldap)
adding new entry "ou=people,dc=srv,dc=world"

adding new entry "ou=groups,dc=srv,dc=world"


(02) Add LDAP User Accounts
-----------------------------

Add LDAP User Accounts in the OpenLDAP Server.
[1]	Add a user.
# generate encrypted password
root@ knows1:~# slappasswd
New password:
Re-enter new password:
{SSHA}xxxxxxxxxxxxxxxxx
root@ knows1:~# vi ldapuser.ldif
# create new
# replace to your own domain name for "dc=***,dc=***" section
 dn: uid= knows1,ou=people,dc=srv,dc=world
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
cn:  knows1
sn: ubuntu
userPassword: {SSHA}xxxxxxxxxxxxxxxxx
loginShell: /bin/bash
uidNumber: 2000
gidNumber: 2000
homeDirectory: /home/ knows1

dn: cn= knows1,ou=groups,dc=srv,dc=world
objectClass: posixGroup
cn:  knows1
gidNumber: 2000
memberUid:  knows1

root@ knows1:~# ldapadd -x -D cn=admin,dc=srv,dc=world -W -f ldapuser.ldif
Enter LDAP Password:
adding new entry "uid= knows1,ou=people,dc=srv,dc=world"

adding new entry "cn= knows1,ou=groups,dc=srv,dc=world"
[2]	Add users and groups in local passwd/group to LDAP directory.
root@ knows1:~# vi ldapuser.sh
# extract local users and groups who have 1000-9999 digit UID
# replace "SUFFIX=***" to your own domain name
# this is an example, free to modify
 #!/bin/bash

SUFFIX='dc=srv,dc=world'
LDIF='ldapuser.ldif'

echo -n > $LDIF
GROUP_IDS=()
grep "x:[1-9][0-9][0-9][0-9]:" /etc/passwd | (while read TARGET_USER
do
    USER_ID="$(echo "$TARGET_USER" | cut -d':' -f1)"

    USER_NAME="$(echo "$TARGET_USER" | cut -d':' -f5 | cut -d',' -f1 )"
    [ ! "$USER_NAME" ] && USER_NAME="$USER_ID"

    LDAP_SN="$(echo "$USER_NAME" | awk '{print $2}')"
    [ ! "$LDAP_SN" ] && LDAP_SN="$USER_ID"

    LASTCHANGE_FLAG="$(grep "${USER_ID}:" /etc/shadow | cut -d':' -f3)"
    [ ! "$LASTCHANGE_FLAG" ] && LASTCHANGE_FLAG="0"

    SHADOW_FLAG="$(grep "${USER_ID}:" /etc/shadow | cut -d':' -f9)"
    [ ! "$SHADOW_FLAG" ] && SHADOW_FLAG="0"

    GROUP_ID="$(echo "$TARGET_USER" | cut -d':' -f4)"
    [ ! "$(echo "${GROUP_IDS[@]}" | grep "$GROUP_ID")" ] && GROUP_IDS=("${GROUP_IDS[@]}" "$GROUP_ID")

    echo "dn: uid=$USER_ID,ou=people,$SUFFIX" >> $LDIF
    echo "objectClass: inetOrgPerson" >> $LDIF
    echo "objectClass: posixAccount" >> $LDIF
    echo "objectClass: shadowAccount" >> $LDIF
    echo "sn: $LDAP_SN" >> $LDIF
    echo "givenName: $(echo "$USER_NAME" | awk '{print $1}')" >> $LDIF
    echo "cn: $(echo "$USER_NAME" | awk '{print $1}')" >> $LDIF
    echo "displayName: $USER_NAME" >> $LDIF
    echo "uidNumber: $(echo "$TARGET_USER" | cut -d':' -f3)" >> $LDIF
    echo "gidNumber: $(echo "$TARGET_USER" | cut -d':' -f4)" >> $LDIF
    echo "userPassword: {crypt}$(grep "${USER_ID}:" /etc/shadow | cut -d':' -f2)" >> $LDIF
    echo "gecos: $USER_NAME" >> $LDIF
    echo "loginShell: $(echo "$TARGET_USER" | cut -d':' -f7)" >> $LDIF
    echo "homeDirectory: $(echo "$TARGET_USER" | cut -d':' -f6)" >> $LDIF
    echo "shadowExpire: $(passwd -S "$USER_ID" | awk '{print $7}')" >> $LDIF
    echo "shadowFlag: $SHADOW_FLAG" >> $LDIF
    echo "shadowWarning: $(passwd -S "$USER_ID" | awk '{print $6}')" >> $LDIF
    echo "shadowMin: $(passwd -S "$USER_ID" | awk '{print $4}')" >> $LDIF
    echo "shadowMax: $(passwd -S "$USER_ID" | awk '{print $5}')" >> $LDIF
    echo "shadowLastChange: $LASTCHANGE_FLAG" >> $LDIF
    echo >> $LDIF
done

for TARGET_GROUP_ID in "${GROUP_IDS[@]}"
do
    LDAP_CN="$(grep ":${TARGET_GROUP_ID}:" /etc/group | cut -d':' -f1)"

    echo "dn: cn=$LDAP_CN,ou=groups,$SUFFIX" >> $LDIF
    echo "objectClass: posixGroup" >> $LDIF
    echo "cn: $LDAP_CN" >> $LDIF
    echo "gidNumber: $TARGET_GROUP_ID" >> $LDIF

    for MEMBER_UID in $(grep ":${TARGET_GROUP_ID}:" /etc/passwd | cut -d':' -f1,3)
    do
        UID_NUM=$(echo "$MEMBER_UID" | cut -d':' -f2)
        [ $UID_NUM -ge 1000 -a $UID_NUM -le 9999 ] && echo "memberUid: $(echo "$MEMBER_UID" | cut -d':' -f1)" >> $LDIF
    done
    echo >> $LDIF
done
)

root@ knows1:~# bash ldapuser.sh
root@ knows1:~# ldapadd -x -D cn=admin,dc=srv,dc=world -W -f ldapuser.ldif
Enter LDAP Password:
adding new entry "uid=debian,ou=people,dc=srv,dc=world"

adding new entry "uid=ubuntu,ou=people,dc=srv,dc=world"

adding new entry "uid=redhat,ou=people,dc=srv,dc=world"

adding new entry "cn=debian,ou=groups,dc=srv,dc=world"

adding new entry "cn=ubuntu,ou=groups,dc=srv,dc=world"

adding new entry "cn=redhat,ou=groups,dc=srv,dc=world"
[3]	If you'd like to delete LDAP User or Group, Do as below.
root@ knows1:~# ldapdelete -x -W -D 'cn=admin,dc=srv,dc=world' "uid= knows1,ou=people,dc=srv,dc=world"
Enter LDAP Password:
root@ knows1:~# ldapdelete -x -W -D 'cn=admin,dc=srv,dc=world' "cn= knows1,ou=groups,dc=srv,dc=world"
Enter LDAP Password:



(03) Configure LDAP Client
---------------------------

Configure LDAP Client in order to share users' accounts in your local networks.
[1]	Configure LDAP Client.
root@www:~# apt -y install libnss-ldap libpam-ldap ldap-utils
(1) specify LDAP server's URI
 +-----------------------| Configuring libnss-ldap |-------------------------+
 | Please enter the URI of the LDAP server to use. This is a string in the   |
 | form of ldap://<hostname or IP>:<port>/. ldaps:// or ldapi:// can also    |
 | be used. The port number is optional.                                     |
 |                                                                           |
 | Note: It is usually a good idea to use an IP address because it reduces   |
 | risks of failure in the event name service problems.                      |
 |                                                                           |
 | LDAP server Uniform Resource Identifier:                                  |
 |                                                                           |
 | ldap:// knows1.srv.world/_________________________________________________    |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+

(2) specify suffix
 +-----------------------| Configuring libnss-ldap |-------------------------+
 | Please enter the distinguished name of the LDAP search base. Many sites   |
 | use the components of their domain names for this purpose. For example,   |
 | the domain "example.net" would use "dc=example,dc=net" as the             |
 | distinguished name of the search base.                                    |
 |                                                                           |
 | Distinguished name of the search base:                                    |
 |                                                                           |
 | dc=srv,dc=world_______________________________________________________    |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+

(3) specify LDAP version (generally OK to select Version [3])
  +-----------------------| Configuring libnss-ldap |------------------------+
  | Please enter which version of the LDAP protocol should be used by        |
  | ldapns. It is usually a good idea to set this to the highest available   |
  | version.                                                                 |
  |                                                                          |
  | LDAP version to use:                                                     |
  |                                                                          |
  |                                    3                                     |
  |                                    2                                     |
  |                                                                          |
  |                                                                          |
  |                                  <Ok>                                    |
  |                                                                          |
  +--------------------------------------------------------------------------+

(4) specify LDAP admin account's suffix
  +-----------------------+ Configuring libnss-ldap +------------------------+
  | Please enter the name of the LDAP administrative account.                |
  |                                                                          |
  | This account will be used automatically for database management, so it   |
  | must have the appropriate administrative privileges.                     |
  |                                                                          |
  | LDAP administrative account:                                             |
  |                                                                          |
  | cn=admin,dc=srv,dc=world________________________________________________ |
  |                                                                          |
  |                                  <Ok>                                    |
  |                                                                          |
  +--------------------------------------------------------------------------+

(5) specify password for LDAP admin account
 +-----------------------| Configuring libnss-ldap |-------------------------+
 | Please enter the password to use when ldap-auth-config tries to login to  |
 | the LDAP directory using the LDAP account for root.                       |
 |                                                                           |
 | The password will be stored in a separate file /etc/ldap.secret which     |
 | will be made readable to root only.                                       |
 |                                                                           |
 | Entering an empty password will re-use the old password.                  |
 |                                                                           |
 | LDAP root account password:                                               |
 |                                                                           |
 | _________________________________________________________________________ |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+

(6) [OK]

  +-----------------------+ Configuring libnss-ldap +------------------------+
  |                                                                          |
  | nsswitch.conf not managed automatically                                  |
  |                                                                          |
  | For the libnss-ldap package to work, you need to modify your             |
  | /etc/nsswitch.conf to use the "ldap" datasource.  There is an example    |
  | file at /usr/share/doc/libnss-ldap/examples/nsswitch.ldap which can be   |
  | used as an example for your nsswitch setup, or it can be copied over     |
  | your current setup.                                                      |
  |                                                                          |
  | Also, before removing this package, it is wise to remove the "ldap"      |
  | entries from nsswitch.conf to keep basic services functioning.           |
  |                                                                          |
  |                                  <Ok>                                    |
  |                                                                          |
  +--------------------------------------------------------------------------+

(7) select the one you like. (this example selects [Yes])
 +------------------------+ Configuring libpam-ldap +------------------------+
 |                                                                           |
 | This option will allow password utilities that use PAM to change local    |
 | passwords.                                                                |
 |                                                                           |
 | The LDAP admin account password will be stored in a separate file which   |
 | will be made readable to root only.                                       |
 |                                                                           |
 | If /etc is mounted by NFS, this option should be disabled.                |
 |                                                                           |
 | Allow LDAP admin account to behave like local root?                       |
 |                                                                           |
 |                    <Yes>                       <No>                       |
 |                                                                           |
 +---------------------------------------------------------------------------+

(8) select the one you like. (this example selects [No])
    +---------------------| Configuring libpam-ldap |----------------------+
    |                                                                      |
    | Choose this option if you are required to login to the database to   |
    | retrieve entries.                                                    |
    |                                                                      |
    | Note: Under a normal setup, this is not needed.                      |
    |                                                                      |
    | Does the LDAP database require login?                                |
    |                                                                      |
    |                   <Yes>                      <No>                    |
    |                                                                      |
    +----------------------------------------------------------------------+

(9) specify LDAP admin account's suffix
  +-----------------------+ Configuring libpam-ldap +------------------------+
  | Please enter the name of the LDAP administrative account.                |
  |                                                                          |
  | This account will be used automatically for database management, so it   |
  | must have the appropriate administrative privileges.                     |
  |                                                                          |
  | LDAP administrative account:                                             |
  |                                                                          |
  | cn=admin,dc=srv,dc=world________________________________________________ |
  |                                                                          |
  |                                  <Ok>                                    |
  |                                                                          |
  +--------------------------------------------------------------------------+

(10) specify password for LDAP admin account
 +------------------------+ Configuring libpam-ldap +------------------------+
 | Please enter the password of the administrative account.                  |
 |                                                                           |
 | The password will be stored in the file /etc/pam_ldap.secret. This will   |
 | be made readable to root only, and will allow libpam-ldap to carry out    |
 | automatic database management logins.                                     |
 |                                                                           |
 | If this field is left empty, the previously stored password will be       |
 | re-used.                                                                  |
 |                                                                           |
 | LDAP administrative password:                                             |
 |                                                                           |
 | ********_________________________________________________________________ |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+

root@www:~# vi /etc/nsswitch.conf
# line 7: add
passwd:         compat systemd ldap
group:          compat systemd ldap
shadow:         compat

root@www:~# vi /etc/pam.d/common-password
# line 26: change ( remove [use_authtok] )
password        [success=1 user_unknown=ignore default=die]     pam_ldap.so try_first_pass

root@www:~# vi /etc/pam.d/common-session
# add to the end if need (create home directory automatically at initial login)
 session optional        pam_mkhomedir.so skel=/etc/skel umask=077
root@www:~# reboot
Debian GNU/Linux 10 www.srv.world ttyS0

www login:  knows1     # LDAP user
Password:
Linux www.srv.world 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Creating directory '/home/ knows1'.
 knows1@www:~$      # just logined

# changing password is like follows
 knows1@www:~$ passwd
Enter login(LDAP) password:     # current one
New password:                   # new one
Re-enter new password:
LDAP password information changed for  knows1
passwd: password updated successfully
 knows1@www:~$                   # just changed


(04) LDAP over SSL/TLS
---------------------------

Configure LDAP over SSL/TLS to make connection be secure.
[1]
On this exmaple, create and use self-signed certificates like here.
[2]	Configure LDAP Server.
root@ knows1:~# cp /etc/ssl/private/server.key \
/etc/ssl/private/server.crt \
/etc/ssl/certs/ca-certificates.crt \
/etc/ldap/sasl2/
root@ knows1:~# chown openldap. /etc/ldap/sasl2/server.key \
/etc/ldap/sasl2/server.crt \
/etc/ldap/sasl2/ca-certificates.crt
root@ knows1:~# vi mod_ssl.ldif
# create new
 dn: cn=config
changetype: modify
add: olcTLSCACertificateFile
olcTLSCACertificateFile: /etc/ldap/sasl2/ca-certificates.crt
-
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/ldap/sasl2/server.crt
-
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/ldap/sasl2/server.key

root@ knows1:~# ldapmodify -Y EXTERNAL -H ldapi:/// -f mod_ssl.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry "cn=config"
[3]	Configure LDAP Client
If you'd like to make sure the connection between LDAP server and client is encrypted, use tcpdump or other network capture software on LDAP server.
root@www:~# echo "TLS_REQCERT allow" >> /etc/ldap/ldap.conf
root@www:~# vi /etc/pam_ldap.conf
# line 258: uncomment
ssl start_tls
root@www:~# vi /etc/libnss-ldap.conf
# line 291: uncomment
ssl start_tls
root@www:~# reboot
logout
www login:  knows1     # LDAP user
Password:
Last login: Fri Jul 26 14:07:43 JST 2019 on ttyS0
Linux www.srv.world 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
 knows1@www:~$      # logined


(05) LDAP Replication
-------------------------

Configure OpenLDAP Replication to continue Directory service if OpenLDAP master server would be down.
OpenLDAP master server is called [Provider] and OpenLDAP Slave server is called [Consumer] on OpenLDAP.
[1]
Configure Basic LDAP Server settings on both Provider and Consumer, refer to here.
[2]	Configure LDAP Provider. Add syncprov module.
root@ knows1:~# vi mod_syncprov.ldif
# create new
 dn: cn=module,cn=config
objectClass: olcModuleList
cn: module
olcModulePath: /usr/lib/ldap
olcModuleLoad: syncprov.la

root@ knows1:~# ldapadd -Y EXTERNAL -H ldapi:/// -f mod_syncprov.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=module,cn=config"

root@ knows1:~# vi syncprov.ldif
# create new
 dn: olcOverlay=syncprov,olcDatabase={1}mdb,cn=config
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpSessionLog: 100

root@ knows1:~# ldapadd -Y EXTERNAL -H ldapi:/// -f syncprov.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "olcOverlay=syncprov,olcDatabase={1}mdb,cn=config"
[3]	Configure LDAP Consumer.
root@node01:~# vi syncrepl.ldif
# create new
 dn: olcDatabase={1}mdb,cn=config
changetype: modify
add: olcSyncRepl
olcSyncRepl: rid=001
  # LDAP server's URI
  provider=ldap://10.0.0.30:389/
  bindmethod=simple
  # own domain suffix
  binddn="cn=admin,dc=srv,dc=world"
  # directory manager's password
  credentials=password
  searchbase="dc=srv,dc=world"
  # includes subtree
  scope=sub
  schemachecking=on
  type=refreshAndPersist
  # [retry interval] [retry times] [interval of re-retry] [re-retry times]
  retry="30 5 300 3"
  # replication interval
  interval=00:00:05:00

root@node01:~# ldapadd -Y EXTERNAL -H ldapi:/// -f syncrepl.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry "olcDatabase={1}mdb,cn=config"

# confirm settings to search datas
root@node01:~# ldapsearch -x -b 'ou=people,dc=srv,dc=world'
dn: ou=people,dc=srv,dc=world
objectClass: organizationalUnit
ou: people

#  knows1, people, srv.world
dn: uid= knows1,ou=people,dc=srv,dc=world
objectClass: inetOrgPerson
objectClass: posixAccount
objectClass: shadowAccount
cn:  knows1
sn: ubuntu
loginShell: /bin/bash
uidNumber: 2000
gidNumber: 2000
homeDirectory: /home/ knows1
uid:  knows1
.....
.....
[4]	Configure LDAP Client to bind LDAP Consumer, too.
root@www:~# vi /etc/pam_ldap.conf
# line 27: add LDAP Consumer
uri ldap:// knows1.srv.world/ ldap://node01.srv.world/
root@www:~# vi /etc/libnss-ldap.conf
# line 27: add LDAP Consumer
uri ldap:// knows1.srv.world/ ldap://node01.srv.world/

(06) LDAP Multi-Master Replication
------------------------------------

Configure OpenLDAP Multi-Master Replication.
For the Settings of Provider/Consumer, it's impossible to add datas on Consumer server, but if configure this Multi-Master Settings, it's possbile to add on any Master server.
[1]
Configure Basic LDAP Server settings on all server, refer to here.
[2]	Configure like follows on all servers. Add syncprov module.
root@ knows1:~# vi mod_syncprov.ldif
# create new
 dn: cn=module,cn=config
objectClass: olcModuleList
cn: module
olcModulePath: /usr/lib/ldap
olcModuleLoad: syncprov.la

root@ knows1:~# ldapadd -Y EXTERNAL -H ldapi:/// -f mod_syncprov.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=module,cn=config"

root@ knows1:~# vi syncprov.ldif
# create new
 dn: olcOverlay=syncprov,olcDatabase={1}mdb,cn=config
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpSessionLog: 100

root@ knows1:~# ldapadd -Y EXTERNAL -H ldapi:/// -f syncprov.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "olcOverlay=syncprov,olcDatabase={1}mdb,cn=config"
[3]	Configure like follows on all servers.
But only the parameters [olcServerID] and [provider=***], set different value on each server.
root@ knows1:~# vi master01.ldif
# create new
 dn: cn=config
changetype: modify
replace: olcServerID
# specify uniq ID number on each server
olcServerID: 101

dn: olcDatabase={1}mdb,cn=config
changetype: modify
add: olcSyncRepl
olcSyncRepl: rid=001
  # specify another LDAP server's URI
  provider=ldap://10.0.0.51:389/
  bindmethod=simple
  # own domain name
  binddn="cn=admin,dc=srv,dc=world"
  # directory manager's password
  credentials=password
  searchbase="dc=srv,dc=world"
  # includes subtree
  scope=sub
  schemachecking=on
  type=refreshAndPersist
  # [retry interval] [retry times] [interval of re-retry] [re-retry times]
  retry="30 5 300 3"
  # replication interval
  interval=00:00:05:00
-
add: olcMirrorMode
olcMirrorMode: TRUE

dn: olcOverlay=syncprov,olcDatabase={1}mdb,cn=config
changetype: add
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov

root@ knows1:~# ldapmodify -Y EXTERNAL -H ldapi:/// -f master01.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry "cn=config"

modifying entry "olcDatabase={1}mdb,cn=config"

adding new entry "olcOverlay=syncprov,olcDatabase={1}mdb,cn=config"
[4]	Configure LDAP Client to bind all LDAP server.
root@www:~# vi /etc/pam_ldap.conf
# line 27: add LDAP Master
uri ldap:// knows1.srv.world/ ldap://node01.srv.world/
root@www:~# vi /etc/libnss-ldap.conf
# line 27: add LDAP Master
uri ldap:// knows1.srv.world/ ldap://node01.srv.world/




 NIS Server
************
(01) Configure NIS Server
---------------------------


Configure NIS Server in order to share users' accounts in your local networks.
[1]	Install NIS System.
root@ knows1:~# apt -y install nis
Preconfiguring packages ...
# input your domain name
# Autostart NIS during installation will be fail because configuration is none yet, so wait for a moment to finish it.
 +----------------------------| Configuring nis |----------------------------+
 | Please choose the NIS "domainname" for this system. If you want this      |
 | machine to just be a client, you should enter the name of the NIS domain  |
 | you wish to join.                                                         |
 |                                                                           |
 | Alternatively, if this machine is to be a NIS server, you can either      |
 | enter a new NIS "domainname" or the name of an existing NIS domain.       |
 |                                                                           |
 | NIS domain:                                                               |
 |                                                                           |
 | srv.world_____________________________________________________________    |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+
[2]	Configure as a NIS master Server.
root@ knows1:~# vi /etc/default/nis
# line 6: change (set NIS master server)
NISSERVER=master
root@ knows1:~# vi /etc/ypserv.securenets
# This line gives access to everybody. PLEASE ADJUST!
# comment out
# 0.0.0.0 0.0.0.0
# add to the end: IP range you allow to access
 255.255.255.0   10.0.0.0

root@ knows1:~# vi /etc/hosts
127.0.0.1       localhost
# add own IP address for NIS
 10.0.0.30        knows1.srv.world         knows1

root@ knows1:~# systemctl restart nis
# update NIS database
root@ knows1:~# /usr/lib/yp/ypinit -m
At this point, we have to construct a list of the hosts which will run NIS
servers.   knows1.srv.world is in the list of NIS server hosts.  Please continue to add
the names for the other hosts, one per line.  When you are done with the
list, type a <control D>.
        next host to add:   knows1.srv.world
        next host to add:  # Ctrl + D key
The current list of NIS servers looks like this:

 knows1.srv.world

Is this correct?  [y/n: y]  y
We need a few minutes to build the databases...
Building /var/yp/srv.world/ypservers...
Running /var/yp/Makefile...
make[1]: Entering directory '/var/yp/srv.world'
Updating passwd.byname...
Updating passwd.byuid...
Updating group.byname...
Updating group.bygid...
Updating hosts.byname...
Updating hosts.byaddr...
Updating rpc.byname...
Updating rpc.bynumber...
Updating services.byname...
Updating services.byservicename...
Updating netid.byname...
Updating protocols.bynumber...
Updating protocols.byname...
Updating netgroup...
Updating netgroup.byhost...
Updating netgroup.byuser...
Updating shadow.byname...
make[1]: Leaving directory '/var/yp/srv.world'

 knows1.srv.world has been set up as a NIS master server.

Now you can run ypinit -s  knows1.srv.world on all slave server.
[3]	If you added users in local server, apply them to NIS database, too.
root@ knows1:~# cd /var/yp
root@ knows1:/var/yp# make

(02) Configure NIS Client
---------------------------

Configure NIS Client.
[1]	Install NIS System.
root@www:~# apt -y install nis
Preconfiguring packages ...
# input your domain name
 +----------------------------| Configuring nis |----------------------------+
 | Please choose the NIS "domainname" for this system. If you want this      |
 | machine to just be a client, you should enter the name of the NIS domain  |
 | you wish to join.                                                         |
 |                                                                           |
 | Alternatively, if this machine is to be a NIS server, you can either      |
 | enter a new NIS "domainname" or the name of an existing NIS domain.       |
 |                                                                           |
 | NIS domain:                                                               |
 |                                                                           |
 | srv.world_____________________________________________________________    |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+
[2]	Configure as a NIS Client.
root@www:~# vi /etc/yp.conf
#
# yp.conf       Configuration file for the ypbind process. You can define
#               NIS servers manually here if they can't be found by
#               broadcasting on the local net (which is the default).
#
#               See the manual page of ypbind for the syntax of this file.
#
# IMPORTANT:    For the "ypserver", use IP addresses, or make sure that
#               the host is in /etc/hosts. This file is only interpreted
#               once, and if DNS isn't reachable yet the ypserver cannot
#               be resolved and ypbind won't ever bind to the server.

# ypserver ypserver.network.com
# add to the end: [domain name] [server] [NIS server's hostname]
domain srv.world server  knows1.srv.world
root@www:~# vi /etc/nsswitch.conf
# line 7: add like follows
passwd:         compat systemd nis
group:          compat systemd nis
shadow:         compat nis
gshadow:        files

hosts:          files dns nis

# set follows if needed (create home directory automatically if none)
root@www:~# vi /etc/pam.d/common-session
# add to the end
 session optional        pam_mkhomedir.so skel=/etc/skel umask=077

root@www:~# systemctl restart rpcbind nis
root@www:~# exit
Debian GNU/Linux 10 www.srv.world ttyS0

www login:  knows1     # NIS user
Password:
Linux www.srv.world 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Creating directory '/home/ knows1'.
 knows1@www:~$     # just logined

# changing NIS password is like follows
bionic@www:~$ yppasswd
Changing NIS account information for  knows1 on  knows1.srv.world.
Please enter old password:
Changing NIS password for  knows1 on  knows1.srv.world.
Please enter new password:
Please retype new password:

The NIS password has been changed on  knows1.srv.world.

 knows1@www:~$

(03) Configure NIS Slave
-------------------------

Configure NIS Slave Server to continue NIS service if NIS master server would be down.
+----------------------+          |          +----------------------+
| [    NIS Server    ] |10.0.0.30 | 10.0.0.31| [    NIS Client    ] |
|      knows1.srv.world    +----------+----------+     www.srv.world    |
|                      |          |          |                      |
+----------------------+          |          +----------------------+
+----------------------+          |
| [     NIS Slave    ] |10.0.0.51 |
|   node01.srv.world   +----------+
|                      |
+----------------------+

[1]
Configure NIS Slave Server as a NIS Client.
[2]	Configure as a NIS Slave Server.
root@node01:~# vi /etc/default/nis
# line 6: change (set NIS slave)
NISSERVER=slave
root@node01:~# vi /etc/ypserv.securenets
# This line gives access to everybody. PLEASE ADJUST!
# comment out
# 0.0.0.0 0.0.0.0
# add to the end: IP range you allow to access
 255.255.255.0   10.0.0.0

root@node01:~# vi /etc/hosts
127.0.0.1       localhost
# add own IP for NIS
 10.0.0.51       node01.srv.world        node01

root@node01:~# systemctl restart nis
# sync with NIS master server
root@node01:~# /usr/lib/yp/ypinit -s  knows1.srv.world
We will need a few minutes to copy the data from  knows1.srv.world.
Transferring group.bygid...
Trying ypxfrd ... success
.....
.....
At this point, make sure that /etc/passwd and /etc/group have
been edited so that when the NIS is activated, the data bases you
have just created will be used, instead of the /etc ASCII files.
[3]
NIS master server is also required to be a NIS client. Configure NIS master server as a NIS Client, refer to here.
[4]	Configure on NIS master server for new NIS Slave.
root@ knows1:~# vi /var/yp/Makefile
# line 23: change
NOPUSH=false
# update NIS database
root@ knows1:~# /usr/lib/yp/ypinit -m
At this point, we have to construct a list of the hosts which will run NIS
servers.   knows1.srv.world is in the list of NIS server hosts.  Please continue to add
the names for the other hosts, one per line.  When you are done with the
list, type a <control D>.
        next host to add:   knows1.srv.world
        next host to add:  node01.srv.world   # specify NIS slave
        next host to add:                     # Ctrl + D key
The current list of NIS servers looks like this:

 knows1.srv.world
node01.srv.world

Is this correct?  [y/n: y] y

.....
.....
 knows1.srv.world has been set up as a NIS master server.

Now you can run ypinit -s  knows1.srv.world on all slave server.
[5]	Configure on NIS Client to bind NIS slave, too.
root@www:~# vi /etc/yp.conf
# add slave server's setting to the end
domain srv.world server  knows1.srv.world
domain srv.world server node01.srv.world
root@www:~# systemctl restart nis



#######################
| WEB Server |
#######################

Apache2
********
(01) Install Apache2
----------------------


Install Apache2 to Configure HTTP Server. HTTP uses 80/TCP.
[1]	Install Apache2.
root@www:~# apt -y install apache2
[2]	Configure Apache2.
root@www:~# vi /etc/apache2/conf-enabled/security.conf
# line 25: change
ServerTokens Prod
root@www:~# vi /etc/apache2/mods-enabled/dir.conf
# line 2: add file name that it can access only with directory's name
DirectoryIndex index.html index.htm
root@www:~# vi /etc/apache2/apache2.conf
# line 70: add server name
ServerName www.srv.world
root@www:~# vi /etc/apache2/sites-enabled/000-default.conf
# line 11: change to admin's email
ServerAdmin webmaster@srv.world
root@www:~# systemctl restart apache2
[3]	Access to [http://(your server's hostname or IP address)/] with web browser. It's OK if following page is shown. (default page)



(02) Use Perl Scripts
----------------------


Enable CGI and Use Perl Scripts on Apache2.
[1]	Install Perl.
root@www:~# apt -y install perl
[2]	Enable CGI module.
root@www:~# a2enmod cgid
Enabling module cgid.
To activate the new configuration, you need to run:
  systemctl restart apache2
root@www:~# systemctl restart apache2
[3]	After enabeling CGI, CGI scripts are allowed to execute under [/usr/lib/cgi-bin] directory by default. Therefore, for example, if a Perl script [index.cgi] is put under the directory, it's possible to access to the URL [http://(Apache2 Server)/cgi-bin/index.cgi] from Clients.
# create a test script
root@www:~# cat > /usr/lib/cgi-bin/test_script <<'EOF'
#!/usr/bin/perl
print "Content-type: text/html\n\n";
print "Hello CGI\n";
EOF
root@www:~# chmod 705 /usr/lib/cgi-bin/test_script
# try to access
root@www:~# curl http://localhost/cgi-bin/test_script
Hello CGI
[4]	If you'd like to allow CGI in other directories except default, configure like follows.
For example, allow in [/var/www/html/cgi-enabled].
root@www:~# vi /etc/apache2/conf-available/cgi-enabled.conf
# create new
# processes [.cgi] and [.pl] as CGI scripts
<Directory "/var/www/html/cgi-enabled">
    Options +ExecCGI
    AddHandler cgi-script .cgi .pl
</Directory>

root@www:~# mkdir /var/www/html/cgi-enabled
root@www:~# a2enconf cgi-enabled
Enabling conf cgi-enabled.
To activate the new configuration, you need to run:
  systemctl reload apache2
root@www:~# systemctl restart apache2
[5]	Create a CGI test page and access to it from client PC with web browser. It's OK if following page is shown.
root@www:~# vi /var/www/html/cgi-enabled/index.cgi
 #!/usr/bin/perl

print "Content-type: text/html\n\n";
print "<html>\n<body>\n";
print "<div style=\"width: 100%; font-size: 40px; font-weight: bold; text-align: center;\">\n";
print "CGI Test Page";
print "\n</div>\n";
print "</body>\n</html>\n";

root@www:~# chmod 705 /var/www/html/cgi-enabled/index.cgi



(03) Use PHP Scripts
----------------------


Configure Apache2 to use PHP scripts.
[1]	Install PHP.
root@www:~# apt -y install php php-cgi libapache2-mod-php php-common php-pear php-mbstring
[2]	Configure Apache2.
root@www:~# a2enconf php7.3-cgi
Enabling conf php7.3-cgi.
To activate the new configuration, you need to run:
  systemctl reload apache2

root@www:~# vi /etc/php/7.3/apache2/php.ini
# line 960: uncomment and add your timezone
date.timezone = "Asia/Tokyo"
root@www:~# systemctl restart apache2
[3]	Create a PHP test page and access to it from client PC with web browser. It's OK if following page is shown.
root@www:~# vi /var/www/html/index.php
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
<?php
    print "PHP Test Page";
?>
</div>
</body>
</html>



(04) Use Ruby Scripts
------------------------

Enable CGI and Use Ruby Scripts on Apache2.
[1]	Install Ruby.
root@www:~# apt -y install ruby
[2]	Enable CGI module.
root@www:~# a2enmod cgid
Enabling module cgid.
To activate the new configuration, you need to run:
  systemctl restart apache2
root@www:~# systemctl restart apache2
[3]	After enabeling CGI, CGI scripts are allowed to execute under [/usr/lib/cgi-bin] directory by default. Therefore, for example, if a Ruby script [index.cgi] is put under the directory, it's possible to access to the URL [http://(Apache2 Server)/cgi-bin/index.cgi] from Clients.
# create a test script
root@www:~# cat > /usr/lib/cgi-bin/test_script <<'EOF'
#!/usr/bin/ruby
print "Content-type: text/html\n\n"
print "Hello CGI\n"
EOF
root@www:~# chmod 705 /usr/lib/cgi-bin/test_script
# try to access
root@www:~# curl http://localhost/cgi-bin/test_script
Hello CGI
[4]	If you'd like to allow CGI in other directories except default, configure like follows.
For example, allow in [/var/www/html/cgi-enabled].
root@www:~# vi /etc/apache2/conf-available/cgi-enabled.conf
# create new
# processes [.cgi] and [.rb] as CGI scripts
<Directory "/var/www/html/cgi-enabled">
    Options +ExecCGI
    AddHandler cgi-script .cgi .rb
</Directory>

root@www:~# mkdir /var/www/html/cgi-enabled
root@www:~# a2enconf cgi-enabled
Enabling conf cgi-enabled.
To activate the new configuration, you need to run:
  service apache2 reload
root@www:~# systemctl restart apache2
[5]	Create a CGI test page and access to it from client PC with web browser. It's OK if following page is shown.
root@www:~# vi /var/www/html/cgi-enabled/index.rb
 #!/usr/bin/ruby

print "Content-type: text/html\n\n"
print "<html>\n<body>\n"
print "<div style=\"width: 100%; font-size: 40px; font-weight: bold; text-align: center;\">\n"
print "Ruby Script Test Page"
print "\n</div>\n"
print "</body>\n</html>\n"

root@www:~# chmod 705 /var/www/html/cgi-enabled/index.rb


(05) Use Python Scripts
-------------------------

Enable CGI and Use Python Scripts on Apache2.
[1]	Install Python.
root@www:~# apt -y install python
[2]	Enable CGI module.
root@www:~# a2enmod cgid
Enabling module cgid.
To activate the new configuration, you need to run:
  systemctl restart apache2
root@www:~# systemctl restart apache2
[3]	After enabeling CGI, CGI scripts are allowed to execute under [/usr/lib/cgi-bin] directory by default. Therefore, for example, if a Python script [index.cgi] is put under the directory, it's possible to access to the URL [http://(Apache2 Server)/cgi-bin/index.cgi] from Clients.
# create a test script
root@www:~# cat > /usr/lib/cgi-bin/test_script <<'EOF'
#!/usr/bin/env python
print "Content-type: text/html\n\n"
print "Hello CGI\n"
EOF
root@www:~# chmod 705 /usr/lib/cgi-bin/test_script
# try to access
root@www:~# curl http://localhost/cgi-bin/test_script
Hello CGI
[4]	If you'd like to allow CGI in other directories except default, configure like follows.
For example, allow in [/var/www/html/cgi-enabled].
root@www:~# vi /etc/apache2/conf-available/cgi-enabled.conf
# create new
# processes [.cgi] and [.py] as CGI scripts
<Directory "/var/www/html/cgi-enabled">
    Options +ExecCGI
    AddHandler cgi-script .cgi .py
</Directory>

root@www:~# mkdir /var/www/html/cgi-enabled
root@www:~# a2enconf cgi-enabled
Enabling conf cgi-enabled.
To activate the new configuration, you need to run:
  service apache2 reload
root@www:~# systemctl restart apache2
[5]	Create a CGI test page and access to it from client PC with web browser. It's OK if following page is shown.
root@www:~# vi /var/www/html/cgi-enabled/index.py
 #!/usr/bin/env python

print "Content-type: text/html\n\n"
print "<html>\n<body>"
print "<div style=\"width: 100%; font-size: 40px; font-weight: bold; text-align: center;\">"
print "Python Script Test Page"
print "</div>\n</body>\n</html>"

root@www:~# chmod 705 /var/www/html/cgi-enabled/index.py


(06) Enable Userdir
-------------------------

Enable userdir, users can create websites with this setting.
[1]	Configure Apache2.
root@www:~# a2enmod userdir
Enabling module userdir.
To activate the new configuration, you need to run:
  systemctl restart apache2
root@www:~# systemctl restart apache2
[2]	Create a test page with a common user and access to it from client PC with web browser. It's OK if following page is shown.
debian@www:~$ mkdir ~/public_html
debian@www:~$ vi ~/public_html/index.html
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
UserDir Test Page
</div>
</body>
</html>


(07) Virtual Host Setting
----------------------------------

Configure Virtual Hostings to use maltiple domain names.
The example below is set on the environment which the domain name is [srv.world], virtual domain name is [virtual.host (root directory [/home/ubuntu/public_html])].
It's necessarry to set Userdir settings for this example, too.
[1]	Configure Apache2.
root@www:~# vi /etc/apache2/sites-available/virtual.host.conf
# create new for [virtual.host]
 <VirtualHost *:80>
    ServerName www.virtual.host
    ServerAdmin webmaster@virtual.host
    DocumentRoot /home/debian/public_html
    ErrorLog /var/log/apache2/virtual.host.error.log
    CustomLog /var/log/apache2/virtual.host.access.log combined
    LogLevel warn
</VirtualHost>

root@www:~# a2ensite virtual.host
Enabling site virtual.host.
To activate the new configuration, you need to run:
  systemctl reload apache2

root@www:~# systemctl restart apache2
[2]	Create a test page and access to it from a client computer with a web browser. It's OK if following page is shown.
debian@www:~$ mkdir ~/public_html
debian@www:~$ vi ~/public_html/index.html
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
Virtual Host Test Page
</div>
</body>
</html>

(08) SSL/TLS Setting
------------------------

Configure SSL/TLS setting to use secure encrypt HTTPS connection.
[1]
Get SSL Certificates, refer to here.
[2]	Configure Apache2.
root@www:~# vi /etc/apache2/sites-available/default-ssl.conf
# line 3: change admin email
ServerAdmin webmaster@srv.world
# line 32,33: change to the certs gotten in section [1]
SSLCertificateFile      /etc/letsencrypt/live/www.srv.world/cert.pem
SSLCertificateKeyFile   /etc/letsencrypt/live/www.srv.world/privkey.pem

# line 42: uncomment and change to the chain-file gotten in section [1]
SSLCertificateChainFile /etc/letsencrypt/live/www.srv.world/chain.pem
root@www:~# a2ensite default-ssl
Enabling site default-ssl.
To activate the new configuration, you need to run:
  systemctl reload apache2

root@www:~# a2enmod ssl
Considering dependency setenvif for ssl:
Module setenvif already enabled
Considering dependency mime for ssl:
Module mime already enabled
Considering dependency socache_shmcb for ssl:
Enabling module socache_shmcb.
Enabling module ssl.
See /usr/share/doc/apache2/README.Debian.gz on how to configure SSL and create self-signed certificates.
To activate the new configuration, you need to run:
  systemctl restart apache2

root@www:~# systemctl restart apache2
[3]	If you'd like to set HTTP connection to redirect to HTTPS (Always on SSL/TLS), configure each Virtualhost like follows. It's also OK to set it in [.htaccess] not in httpd.conf.
root@www:~# vi /etc/apache2/sites-available/000-default.conf
<VirtualHost *:80>
    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]

root@www:~# a2enmod rewrite
Enabling module rewrite.
To activate the new configuration, you need to run:
  systemctl restart apache2
root@www:~# systemctl restart apache2
[4]	Verify to access to the test page from a client computer with a Web browser via HTTPS. If you set Always On SSL/TLS, access with HTTP to verify the connection is redirected to HTTPS normally, too.



(09) Set Basic Authentication
-------------------------------

Set Basic Authentication to limit access on specific web pages.
[1]	For example, set Basic Authentication setting under the directory [/var/www/html/auth-basic].
root@www:~# apt -y install apache2-utils
root@www:~# vi /etc/apache2/sites-available/auth-basic.conf
# create new
 <Directory /var/www/html/auth-basic>
    AuthType Basic
    AuthName "Basic Authentication"
    AuthUserFile /etc/apache2/.htpasswd
    require valid-user
</Directory>

# add a user : create a new file with "-c" ("-c" is needed only for the initial registration)
root@www:~# htpasswd -c /etc/apache2/.htpasswd debian
New password:     # set password
Re-type new password:
Adding password for user debian
root@www:~# mkdir /var/www/html/auth-basic
root@www:~# a2ensite auth-basic
Enabling site auth-basic.
To activate the new configuration, you need to run:
  service apache2 reload

root@www:~# systemctl restart apache2
# create a test page
root@www:~# vi /var/www/html/auth-basic/index.html
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
Test Page for Basic Auth
</div>
</body>
</html>
[2]	Access to the test page from a client computer with a web browser. Then authentication is required like follows as a setting, answer with a user added in [1].

[3]	Just accessed.



(10) Set Basic Authentication + PAM
-------------------------------------

Limit accesses on specific web pages and use OS users for authentication with SSL connection.
[1]
Configure SSL/TLS Setting, refer to here.
[2]	For example, set Basic Authentication under the [/var/www/html/auth-pam] directory.
root@www:~# apt -y install libapache2-mod-authnz-external pwauth
root@www:~# vi /etc/apache2/sites-available/auth-pam.conf
# create new
 AddExternalAuth pwauth /usr/sbin/pwauth
SetExternalAuthMethod pwauth pipe
<Directory /var/www/html/auth-pam>
    SSLRequireSSL
    AuthType Basic
    AuthName "PAM Authentication"
    AuthBasicProvider external
    AuthExternal pwauth
    require valid-user
</Directory>

root@www:~# mkdir /var/www/html/auth-pam
root@www:~# a2ensite auth-pam
Enabling site auth-pam.
To activate the new configuration, you need to run:
  service apache2 reload
root@www:~# systemctl restart apache2
# create a test page
root@www:~# vi /var/www/html/auth-pam/index.html
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
Test Page for PAM Auth
</div>
</body>
</html>
[3]	Access to the test page with a Web browser on Client Computer and authenticate with a user which is on OS.

[4]	Just accessed.



(11) Set Kerberos Authentication
-----------------------------------

Limit accesses on specific web pages and use Windows Active Directory users for authentication with SSL/TLS connection.
It's necessarry to be running Windows Active Directory in your LAN.
This example based on the environment below.
Domain Server	: Windows Server 2019
NetBIOS Name	: FD3S01
Domain Name	: srv.world
Realm	: SRV.WORLD
Hostname	: fd3s.srv.world
[1]
Configure SSL/TLS Setting, refer to here.
[2]	For example, set Basic Authentication under the [/var/www/html/auth-kerberos] directory.
root@www:~# apt -y install libapache2-mod-auth-kerb
# specify Realm
 +------------------+ Configuring Kerberos Authentication +------------------+
 | When users attempt to use Kerberos and specify a principal or user name   |
 | without specifying what administrative Kerberos realm that principal      |
 | belongs to, the system appends the default realm.  The default realm may  |
 | also be used as the realm of a Kerberos service running on the local      |
 | machine.  Often, the default realm is the uppercase version of the local  |
 | DNS domain.                                                               |
 |                                                                           |
 | Default Kerberos version 5 realm:                                         |
 |                                                                           |
 | SRV.WORLD________________________________________________________________ |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+
# specify Active Directory's hostname
 +------------------+ Configuring Kerberos Authentication +------------------+
 | Enter the hostnames of Kerberos servers in the FD3S.SRV.WORLD Kerberos    |
 | realm separated by spaces.                                                |
 |                                                                           |
 | Kerberos servers for your realm:                                          |
 |                                                                           |
 | fd3s.srv.world___________________________________________________________ |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+

# specify Active Directory's hostname
 +------------------+ Configuring Kerberos Authentication +------------------+
 | Enter the hostname of the administrative (password changing) server for   |
 | the FD3S.SRV.WORLD Kerberos realm.                                        |
 |                                                                           |
 | Administrative server for your Kerberos realm:                            |
 |                                                                           |
 | fd3s.srv.world___________________________________________________________ |
 |                                                                           |
 |                                  <Ok>                                     |
 |                                                                           |
 +---------------------------------------------------------------------------+

# create keytab HTTP/[AD's hostname or IP address]@[Realm name]
root@www:~# echo "HTTP/fd3s.srv.world@SRV.WORLD" > /etc/krb5.keytab
root@www:~# vi /etc/apache2/sites-available/auth-kerberos.conf
# create new
 <Directory /var/www/html/auth-kerberos>
    SSLRequireSSL
    AuthType Kerberos
    AuthName "Kerberos Authntication"
    KrbAuthRealms SRV.WORLD
    Krb5Keytab /etc/krb5.keytab
    KrbMethodNegotiate Off
    KrbSaveCredentials Off
    KrbVerifyKDC Off
    Require valid-user
</Directory>

root@www:~# mkdir /var/www/html/auth-kerberos
root@www:~# a2ensite auth-kerberos
Enabling site auth-kerberos.
To activate the new configuration, you need to run:
  service apache2 reload
root@www:~# systemctl restart apache2
# create a test page
root@www:~# vi /var/www/html/auth-kerberos/index.html
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
Test Page for Kerberos Auth
</div>
</body>
</html>
[3]	Access to the test page from a client computer with web browser. Then authentication is required like follows as a setting, answer with a user which is added in Active Directory.

[4]	Just accessed.



(12) Use WebDAV
-------------------

This is the example to configure WebDAV with SSL connection.
[1]
Configure SSL/TLS Setting, refer to here.
[2]	For example, Create a directory [webdav] and it makes possible to connect to WebDAV directory only by SSL/TLS.
root@www:~# apt -y install apache2-utils
root@www:~# mkdir /home/webdav
root@www:~# chown www-data. /home/webdav
root@www:~# chmod 770 /home/webdav
root@www:~# vi /etc/apache2/sites-available/webdav.conf
 Alias /webdav /home/webdav
<Location /webdav>
    DAV On
    SSLRequireSSL
    Options None
    AuthType Basic
    AuthName WebDAV
    AuthUserFile /etc/apache2/.htpasswd
    <RequireAny>
        Require method GET POST OPTIONS
        Require valid-user
    </RequireAny>
</Location>

root@www:~# a2enmod dav*
Enabling module dav.
Considering dependency dav for dav_fs:
Module dav already enabled
Enabling module dav_fs.
Enabling module dav_lock.
To activate the new configuration, you need to run:
  systemctl restart apache2
root@www:~# a2ensite webdav
Enabling site webdav.
To activate the new configuration, you need to run:
  systemctl reload apache2
root@www:~# systemctl restart apache2
# add a user : create a new file with "-c" ("-c" is needed only for the initial registration)
root@www:~# htpasswd -c /etc/apache2/.htpasswd debian
New password:     # set password
Re-type new password:
Adding password for user debian
[3]
Configure WebDAV client on client computer. This example is on Windows 10.
Open [PC] and move to [Computer] tab and Click [Add a network location] icon.

[4]	Click [Next] button.

[5]	Click [Next] button.

[6]	Input the URL of WebDav folder.

[7]	Authentication is required, input username and password you added in section [1] by htpasswd.

[8]	Input WebDav Folder Name. Any name is OK, it's used on your Windows Computer.

[9]	Click [Finish] button.

[10]	Just accessed to WebDav Folder.


(13) PHP + PHP-FPM Setting
-----------------------------

Install PHP-FPM (FPM : FastCGI Process Manager) to make PHP scripts be fast.
[1]
Install PHP first, refer to here.
[2]	Install PHP-FPM.
root@www:~# apt -y install php-fpm
[3]	Add Settings in Virtualhost you'd like to set PHP-FPM.
root@www:~# vi /etc/apache2/sites-available/default-ssl.conf
# add into <VirtualHost> - </VirtualHost>
    <FilesMatch \.php$>
        SetHandler "proxy:unix:/var/run/php/php7.3-fpm.sock|fcgi://localhost/"
    </FilesMatch>
</VirtualHost>

root@www:~# a2enmod proxy_fcgi setenvif
Considering dependency proxy for proxy_fcgi:
Enabling module proxy.
Enabling module proxy_fcgi.
Module setenvif already enabled
To activate the new configuration, you need to run:
  systemctl restart apache2
root@www:~# a2enconf php7.3-fpm
Enabling conf php7.3-fpm.
To activate the new configuration, you need to run:
  systemctl reload apache2
root@www:~# systemctl restart php7.3-fpm apache2
[4]	Create [phpinfo] in Virtualhost's web-root you set PHP-FPM and access to it, then it's OK if [FPM/FastCGI] is displayed.
root@www:~# echo '<?php phpinfo(); ?>' > /var/www/html/info.php

(14) Install RoundCube Web Mail
---------------------------------

Install RoundCube to configure web-based mail transfer System. This example uses servers like follows for configuration of RoundCube.
+----------------------+          |          +----------------------+
|  [  www.srv.world  ] |10.0.0.31 | 10.0.0.32|  [ mail.srv.world  ] |
|     Apache httpd     +----------+----------+        Postfix       |
|      (Roundcube)     |                     |        Dovecot       |
|       MariaDB        |                     |                      |
+----------------------+                     +----------------------+

[1]
Install and Configure SMTP Server, refer to here.
https://www.server-world.info/en/note?os=Debian_10&p=mail&f=1

[2]
Install and Configure IMAP Server, refer to here.
https://www.server-world.info/en/note?os=Debian_10&p=mail&f=2

[3]
Install PHP on Apache2 Server, refer to here.
https://www.server-world.info/en/note?os=Debian_10&p=httpd&f=3

[4]
Configure SSL/TLS settings on Apache2 Server, refer to here.
https://www.server-world.info/en/note?os=Debian_10&p=httpd&f=8

[5]
Install and Configure MariaDB Server on httpd Server, refer to here.
https://www.server-world.info/en/note?os=Debian_10&p=mariadb&f=1


[6]	Create a Database for RoundCube.
root@www:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 104
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# create [roundcube] database (replace 'password' to your own password you'd like to set)
MariaDB [(none)]> create database roundcube;
Query OK, 1 row affected (0.00 sec)
MariaDB [(none)]> grant all privileges on roundcube.* to roundcube@'localhost' identified by 'password';
Query OK, 0 rows affected (0.00 sec)
MariaDB [(none)]> flush privileges;
Query OK, 0 rows affected (0.00 sec)
MariaDB [(none)]> exit
Bye
[7]	Install and Configure RoundCube.
root@www:~# apt -y install roundcube roundcube-mysql
# select [No] on this example (set manually later)
 +----------------------+ Configuring roundcube-core +-----------------------+
 |                                                                           |
 | The roundcube package must have a database installed and configured       |
 | before it can be used.  This can be optionally handled with               |
 | dbconfig-common.                                                          |
 |                                                                           |
 | If you are an advanced database administrator and know that you want to   |
 | perform this configuration manually, or if your database has already      |
 | been installed and configured, you should refuse this option.  Details    |
 | on what needs to be done should most likely be provided in                |
 | /usr/share/doc/roundcube.                                                 |
 |                                                                           |
 | Otherwise, you should probably choose this option.                        |
 |                                                                           |
 | Configure database for roundcube with dbconfig-common?                    |
 |                                                                           |
 |                    <Yes>                       <No>                       |
 |                                                                           |
 +---------------------------------------------------------------------------+

root@www:~# cd /usr/share/dbconfig-common/data/roundcube/install
root@www:/usr/share/dbconfig-common/data/roundcube/install# mysql -u roundcube -D roundcube -p < mysql
Enter password:   # MariaDB roundcube password
root@www:/usr/share/dbconfig-common/data/roundcube/install# cd
root@www:~# vi /etc/roundcube/debian-db.php
# set database info
$dbuser='roundcube';
$dbpass='password';
$basepath='';
$dbname='roundcube';
$dbserver='localhost';
$dbport='3306';
$dbtype='mysql';
root@www:~# vi /etc/roundcube/config.inc.php
# line 35: specify IMAP server (STARTTLS setting)
$config['default_host'] = 'tls://mail.srv.world';
# line 47: specify SMTP server (STARTTLS setting)
$config['smtp_server'] = 'tls://mail.srv.world';
# line 51: specify SMTP port (STARTTLS setting)
$config['smtp_port'] = 587;
# line 55: change (use the same user for SMTP auth and IMAP auth)
$config['smtp_user'] = '%u';
# line 59: change (use the same password for SMTP auth and IMAP auth)
$config['smtp_pass'] = '%p';
# line 66: change to any title you like
$config['product_name'] = 'Server World Webmail';
# add follows to the end
# specify IMAP port (STARTTLS setting)
$config['default_port'] = 143;

# specify SMTP auth type
$config['smtp_auth_type'] = 'LOGIN';

# specify SMTP HELO host
$config['smtp_helo_host'] = 'mail.srv.world';

# specify domain name
$config['mail_domain'] = 'srv.world';

# specify UserAgent
$config['useragent'] = 'Server World Webmail';

# specify SMTP and IMAP connection option
$config['imap_conn_options'] = array(
  'ssl'         => array(
    'verify_peer' => true,
    'CN_match' => 'srv.world',
    'allow_self_signed' => true,
    'ciphers' => 'HIGH:!SSLv2:!SSLv3',
  ),
);
$config['smtp_conn_options'] = array(
  'ssl'         => array(
    'verify_peer' => true,
    'CN_match' => 'srv.world',
    'allow_self_signed' => true,
    'ciphers' => 'HIGH:!SSLv2:!SSLv3',
  ),
);

root@www:~# vi /etc/apache2/conf-enabled/roundcube.conf
# line 3: uncomment
Alias /roundcube /var/lib/roundcube
# line 11: change access permission if need
Require ip 127.0.0.1 10.0.0.0/24
root@www:~# systemctl restart apache2
[8]	Access to [https://(your server's hostname or IP address/)/roundcube/], then Roundcube login form is shown, authenticate with any user on Mail Server.

[9]	Just logined. Makue sure it's possible to send or receive emails normally.


#######################
| WEB Server |
#######################

Nginx
******
(01) Install Nginx
--------------------
Install fast HTTP Server [Nginx] and configure HTTP/Proxy Server with it.
[1]	Install Nginx.
root@www:~# apt -y install nginx
[2]	Configure Nginx.
root@www:~# vi /etc/nginx/sites-available/default
# line 46: change to your hostname
server_name www.srv.world;
root@www:~# systemctl restart nginx
[3]	Access to the default page of Nginx from a Client with Web browser and it's OK if the following page are shown.

(02) Virtual Hostings
----------------------


This is the Virtual Hostings setting for Nginx.
For example, configure additional domainame [virtual.host].
[1]	Configure Nginx.
root@www:~# vi /etc/nginx/sites-available/virtual.host.conf
# create new
server {
    listen       80;
    server_name  www.virtual.host;

    location / {
        root   /var/www/virtual.host;
        index  index.html index.htm;
    }
}

root@www:~# mkdir /var/www/virtual.host
root@www:~# cd /etc/nginx/sites-enabled
root@www:/etc/nginx/sites-enabled# ln -s /etc/nginx/sites-available/virtual.host.conf ./
root@www:/etc/nginx/sites-enabled# systemctl restart nginx
[2]	Create a test page to make sure it works normally.
root@www:~# vi /var/www/virtual.host/index.html
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
Nginx Virtual Host Test Page
</div>
</body>
</html>

(03) Use UserDir
-------------------

Enable Userdir for common users to open their site in the home directories.
[1]	Configure Nginx.
root@www:~# vi /etc/nginx/sites-available/default
# add into [server] section
         location ~ ^/~(.+?)(/.*)?$ {
            alias /home/$1/public_html$2;
            index  index.html index.htm;
            autoindex on;
        }

root@www:~# systemctl restart nginx
[2]	Create a test page with a common user to make sure it works normally.
debian@www:~$ chmod 711 /home/debian
debian@www:~$ mkdir ~/public_html
debian@www:~$ chmod 755 ~/public_html
debian@www:~$ vi ~/public_html/index.html
 <html>
<body>
<div style="width: 100%; font-size: 40px; font-weight: bold; text-align: center;">
Nginx UserDir Test Page
</div>
</body>
</html>

(04) SSL/TLS Setting
-----------------------

Enable SSL/TLS setting to use SSL connection.
[1]
Get SSL certificates, refer to here.
[2]	Configure Nginx.
root@www:~# vi /etc/nginx/sites-available/default
# add to the end
# replace the path of certificates to your own one
server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;

        ssl_prefer_server_ciphers  on;
        ssl_ciphers  'ECDH !aNULL !eNULL !SSLv2 !SSLv3';
        ssl_certificate  /etc/letsencrypt/live/www.srv.world/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/www.srv.world/privkey.pem;

        root /var/www/html;
        server_name www.srv.world;
        location / {
                try_files $uri $uri/ =404;
        }
}

root@www:~# systemctl restart nginx
[3]	If you'd like to set HTTP connection to redirect to HTTPS (Always on SSL/TLS), configure like follows.
root@www:~# vi /etc/nginx/sites-available/default
# add into the section of listening 80 port
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        return 301 https://$host$request_uri;

root@www:~# systemctl restart nginx
[4]	Verify to access to the test page from a client computer with a Web browser via HTTPS. If you set Always On SSL/TLS, access with HTTP to verify the connection is redirected to HTTPS normally, too.


(05) CGI executable Environment
----------------------------------


Configure CGI executable Environment on Nginx.
[1]	Install FastCGI Wrap and Configure Nginx for it.
root@www:~# apt -y install fcgiwrap
root@www:~# cp /usr/share/doc/fcgiwrap/examples/nginx.conf /etc/nginx/fcgiwrap.conf
root@www:~# vi /etc/nginx/fcgiwrap.conf
location /cgi-bin/ {
  # Disable gzip (it makes scripts feel slower since they have to complete
  # before getting gzipped)
  gzip off;

  # Set the root to /usr/lib (inside this location this means that we are
  # giving access to the files under /usr/lib/cgi-bin)
  # change
  root  /var/www;

  # Fastcgi socket
  fastcgi_pass  unix:/var/run/fcgiwrap.socket;

  # Fastcgi parameters, include the standard ones
  include /etc/nginx/fastcgi_params;

  # Adjust non standard parameters (SCRIPT_FILENAME)
  # change
  fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
}

root@www:~# mkdir /var/www/cgi-bin
root@www:~# chmod 755 /var/www/cgi-bin
root@www:~# vi /etc/nginx/sites-available/default
# add into the [server] section
server {
        .....
        .....
        include fcgiwrap.conf;
}

root@www:~# systemctl restart nginx
[2]	Create a test scripts under the directory you set CGI executable (on this example, it's [var/www/cgi-bin]) abd Access to it to verify CGI works normally.
root@www:~# vi /var/www/cgi-bin/index.py
 #!/usr/bin/env python

print "Content-type: text/html\n\n"
print "<html>\n<body>"
print "<div style=\"width: 100%; font-size: 40px; font-weight: bold; text-align: center;\">"
print "Python Script Test Page"
print "</div>\n</body>\n</html>"

root@www:~# chmod 705 /var/www/cgi-bin/index.py

(06) Basic Authentication
-----------------------------

Enable Basic Authentication to restrict access on specific web pages.
[1]	For example, set Basic Auth under the [/auth-basic] directory.
root@www:~# apt -y install apache2-utils
root@www:~# vi /etc/nginx/sites-available/default
# add into the [server] section
        location /auth-basic/ {
            auth_basic            "Basic Auth";
            auth_basic_user_file  "/etc/nginx/.htpasswd";
        }

root@www:~# mkdir /var/www/html/auth-basic
root@www:~# systemctl restart nginx
# add user for Basic authentication
root@www:~# htpasswd -c /etc/nginx/.htpasswd debian
New password:     # set password
Re-type new password:
Adding password for user debian
[2]	Access to the test page with Web browser from any Client and authenticate with a user which is added with htpasswd.

[3]	Just accessed.


(07) PHP + PHP-FPM
--------------------------
2019/08/07

Install PHP-FPM ( PHP FastCGI Process Manager ) to use PHP scripts on Nginx.
[1]	Install PHP and PHP-FPM.
root@www:~# apt -y install php php-fpm php-common php-pear php-mbstring
[2]	Configure Nginx for PHP-FPM.
root@www:~# vi /etc/nginx/sites-available/default
# add into [server] section
        location ~ \.php$ {
               include snippets/fastcgi-php.conf;
               fastcgi_pass unix:/run/php/php7.3-fpm.sock;
        }

root@www:~# systemctl restart php7.3-fpm nginx
[3]	Create [PHPInfo] in Virtualhost's web-root you set PHP-FPM and access to it, then it's OK if [FPM/FastCGI] is displayed.
root@www:~# echo "<?php phpinfo() ?>" > /var/www/html/info.php

(08) Reverse Proxy Setting
----------------------------

Configure Nginx as a Reverse Proxy Server.
[1]	For example, Configure Nginx like that HTTP accesses to [www.srv.world] are forwarded to [ knows1.srv.world].
root@www:~# vi /etc/nginx/sites-available/default
# change like follows in [server] section
    server {
        listen      80 default_server;
        listen      [::]:80 default_server;
        server_name www.srv.world;

        proxy_redirect           off;
        proxy_set_header         X-Real-IP $remote_addr;
        proxy_set_header         X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header         Host $http_host;

        location / {
            proxy_pass http:// knows1.srv.world/;
        }
    }

root@www:~# systemctl restart nginx
[2]	Set log_format on Backend Nginx Server to log X-Forwarded-For header.
root@ knows1:~# vi /etc/nginx/nginx.conf
# add into [http] section
http {
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

root@ knows1:~# vi /etc/nginx/sites-available/default
# add into [server] section
# specify your local network for [set_real_ip_from]
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        set_real_ip_from   10.0.0.0/24;
        real_ip_header     X-Forwarded-For;

root@ knows1:~# systemctl restart nginx
[3]	Verify it works fine to access to frontend Nginx from any Client Host with HTTP.


(09) Load Balancing
------------------------

Configure Nginx as a Load Balancing Server.
This example is based on the environment like follows.
-----------+---------------------------+-----
           |                           |
           |10.0.0.30                  |
+----------+-----------+               |
|   [ www.srv.world ]  |               |
|        Nginx         |               |
+----------------------+               |
                                       |
------------+--------------------------+--------------------------+------------
            |                          |                          |
            |10.0.0.51                 |10.0.0.52                 |10.0.0.53
+-----------+----------+   +-----------+----------+   +-----------+----------+
| [ node01.srv.world ] |   | [ node02.srv.world ] |   | [ node03.srv.world ] |
|      Web Server#1    |   |      Web Server#2    |   |      Web Server#3    |
+----------------------+   +----------------------+   +----------------------+

[1]	Configure Nginx.
root@www:~# vi /etc/nginx/nginx.conf
# add into [http] section
# [backup] means this server is balanced only when other servers are down
# [weight=*] means balancing weight
http {
        upstream backends {
                server node01.srv.world:80 weight=2;
                server node02.srv.world:80;
                server node03.srv.world:80 backup;
        }

root@www:~# vi /etc/nginx/sites-available/default
# change like follows in [server] section
server {
        listen      80 default_server;
        listen      [::]:80 default_server;
        server_name www.srv.world;

        proxy_redirect          off;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        Host $http_host;

        location / {
                proxy_pass http://backends;
        }
}

root@www:~# systemctl restart nginx
[2]	Verify it works fine to access to frontend Nginx from any Client Host with HTTP.



#######################
| Database |
#######################
 MariaDB
**********
(01) Install MariaDB
-----------------------

Install MariaDB to configure database server.
[1]	Install MariaDB.
root@www:~# apt -y install mariadb-server
[2]	Initial Settings for MariaDB.
root@www:~# mysql_secure_installation

NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we'll need the current
password for the root user.  If you've just installed MariaDB, and
you haven't set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none):
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

# set root password
Set root password? [Y/n] y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

# remove anonymous users
Remove anonymous users? [Y/n] y
 ... Success!

Normally, root should only be allowed to connect from 'localhost'.  This
ensures that someone cannot guess at the root password from the network.

# disallow root login remotely
Disallow root login remotely? [Y/n] y
 ... Success!

By default, MariaDB comes with a database named 'test' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

# remove test database
Remove test database and access to it? [Y/n] y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

# reload privilege tables
Reload privilege tables now? [Y/n] y
 ... Success!

Cleaning up...

All done!  If you've completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!

# connect to MariaDB with root
root@www:~# mysql -u root -p
Enter password:     # root password you set
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 55
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# show user list
MariaDB [(none)]> select user,host,password from mysql.user;
+------+-----------+-------------------------------------------+
| user | host      | password                                  |
+------+-----------+-------------------------------------------+
| root | localhost | ***************************************** |
+------+-----------+-------------------------------------------+
1 row in set (0.00 sec)

# show database list
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)

# logout
MariaDB [(none)]> exit
Bye

(02) MariaDB over SSL/TLS
---------------------------

Enable SSL/TLS connection to MariaDB.
[1]
Get SSL Certificates, refer to here.
[2]	Configure MariaDB for SSL/TLS.
# copy certificates got in [1] and convert format for certificate key
root@www:~# mkdir /var/lib/mysql/pki
root@www:~# cp /etc/letsencrypt/live/www.srv.world/* /var/lib/mysql/pki/
root@www:~# openssl rsa -in /var/lib/mysql/pki/privkey.pem -out /var/lib/mysql/pki/priv.key
root@www:~# chown -R mysql. /var/lib/mysql/pki
root@www:~# vi /etc/mysql/mariadb.conf.d/50-server.cnf
# line 88-9: uncomment and change to your own certs
ssl-ca = /var/lib/mysql/pki/chain.pem
ssl-cert = /var/lib/mysql/pki/cert.pem
ssl-key = /var/lib/mysql/pki/priv.key
root@www:~# systemctl restart mariadb
# verify settings
root@www:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 11
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# OK if status is like follows
MariaDB [(none)]> show variables like '%ssl%';
+---------------------+------------------------------+
| Variable_name       | Value                        |
+---------------------+------------------------------+
| have_openssl        | NO                           |
| have_ssl            | YES                          |
| ssl_ca              | /var/lib/mysql/pki/chain.pem |
| ssl_capath          |                              |
| ssl_cert            | /var/lib/mysql/pki/cert.pem  |
| ssl_cipher          |                              |
| ssl_crl             |                              |
| ssl_crlpath         |                              |
| ssl_key             | /var/lib/mysql/pki/priv.key  |
| version_ssl_library | YaSSL 2.4.4                  |
+---------------------+------------------------------+
10 rows in set (0.004 sec)
[3]	To connect with SSL/TLS from Localhost, connect with specifying Certs.
root@www:~# vi /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf
[mysql]
# add follows into [mysql] section
ssl-cert=/var/lib/mysql/pki/cert.pem
ssl-key=/var/lib/mysql/pki/priv.key
root@www:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 12
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# show status
MariaDB [(none)]> show status like 'ssl_cipher';
+---------------+--------------------+
| Variable_name | Value              |
+---------------+--------------------+
| Ssl_cipher    | DHE-RSA-AES256-SHA |
+---------------+--------------------+
1 row in set (0.002 sec)

MariaDB [(none)]> exit
Bye

# for no SSL/TLS connection
root@www:~# mysql -u root -p --ssl=false
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 13
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# value is empty
MariaDB [(none)]> show status like 'ssl_cipher';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Ssl_cipher    |       |
+---------------+-------+
1 row in set (0.002 sec)
[4]	To force users to connect with SSL/TLS, set like follows.
root@www:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 14
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# create a user
MariaDB [(none)]> create user debian identified by 'password';
Query OK, 0 rows affected (0.00 sec)

# set SSL/TLS required to the user
MariaDB [(none)]> grant usage on *.* to 'debian'@'%' require ssl;
Query OK, 0 rows affected (0.00 sec)

# show status, SSL/TLS required users set [ssl_type] [ANY]
MariaDB [(none)]> select user,host,ssl_type from mysql.user;
+----------+-----------+----------+
| user     | host      | ssl_type |
+----------+-----------+----------+
| root     | localhost |          |
|  knows1   | localhost |          |
| debian   | %         | ANY      |
+----------+-----------+----------+
3 rows in set (0.002 sec)
[5]	To connect from other Hosts, copy Certs on them and specify it to connect.
root@node01:~# apt -y install mariadb-client
root@node01:~# scp debian@www.srv.world:/var/lib/mysql/pki/cert.pem /etc/mysql/
root@node01:~# scp debian@www.srv.world:/var/lib/mysql/pki/priv.key /etc/mysql/
root@node01:~# vi /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf
[mysql]
# add follows into [mysql] section
ssl-cert=/etc/mysql/cert.pem
ssl-key=/etc/mysql/priv.key
root@node01:~# mysql -h www.srv.world -u debian -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 14
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> show status like 'ssl_cipher';
+---------------+--------------------+
| Variable_name | Value              |
+---------------+--------------------+
| Ssl_cipher    | DHE-RSA-AES256-SHA |
+---------------+--------------------+
1 row in set (0.00 sec)


(03) MariaDB Replication
--------------------------


Configure MariaDB Replication settings. This configuration is general Master-Slave setting.
[1]	Change settings and create a user for replication on MariaDB Matser Host.
root@www:~# vi /etc/mysql/mariadb.conf.d/50-server.cnf
# line 28: change to IP of this host
bind-address = 10.0.0.31
# line 73: uncomment and change to any another ID
server-id = 101
# line 74: uncomment
log_bin = /var/log/mysql/mysql-bin.log
root@www:~# systemctl restart mariadb
root@www:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 12
Server version: 10.3.15-MariaDB-1-log Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# create user (set any password for 'password' section)
MariaDB [(none)]> grant replication slave on *.* to replica@'%' identified by 'password';
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]> flush privileges;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]> exit
Bye
[2]
Install and start MariaDB Server on Slave Host, refer to here.
[3]	Change settings on Slave Host.
root@node01:~# vi /etc/mysql/mariadb.conf.d/50-server.cnf
# line 28: change to IP of this host
bind-address = 10.0.0.51
# line 73: uncomment and change to another ID(different one from Master Host)
server-id = 102
# line 74: uncomment
log_bin = /var/log/mysql/mysql-bin.log
# line 79: add
# read only
read_only=1
# define own hostname
report-host=node01.srv.world
root@node01:~# systemctl restart mariadb
[4]	Get Dump-Data on Master Host.
root@www:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 13
Server version: 10.3.15-MariaDB-1-log Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# lock all tables
MariaDB [(none)]> flush tables with read lock;
Query OK, 0 rows affected (0.00 sec)

# show status (remember File, Position value)
MariaDB [(none)]> show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000001 |      640 |              |                  |
+------------------+----------+--------------+------------------+
1 row in set (0.001 sec)

# remain the window above and open the another window and execute dump
root@www:~# mysqldump -u root -p --all-databases --lock-all-tables --events > mysql_dump.sql
Enter password:

# back to the remained window and unlock
MariaDB [(none)]> unlock tables;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]> exit
Bye

# transfer the dump to Slave Host
root@www:~# scp mysql_dump.sql debian@node01.srv.world:/tmp/
debian@node01.srv.world's password:
mysql_dump.sql                                100%  469KB  33.4MB/s   00:00
[5]	Configure replication settings on Slave Host.
It's OK all, make sure the settings work normally to create databases on Master Host.
# import dump from Master Host
root@node01:~# mysql -u root -p < /tmp/mysql_dump.sql
Enter password:
root@node01:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 39
Server version: 10.3.15-MariaDB-1-log Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> change master to
    -> master_host='10.0.0.31',       # Master Hosts's IP
    -> master_user='replica',         # replication ID
    -> master_password='password',    # replication ID's password
    -> master_log_file='mysql-bin.000001',   # File value confirmed on Master
    -> master_log_pos=640;            # Position value confirmed on Master
Query OK, 0 rows affected (0.23 sec)

# start replication
MariaDB [(none)]> start slave;
Query OK, 0 rows affected (0.00 sec)

# show status
MariaDB [(none)]> show slave status\G
*************************** 1. row ***************************
                Slave_IO_State: Waiting for master to send event
                   Master_Host: 10.0.0.31
                   Master_User: replica
                   Master_Port: 3306
                 Connect_Retry: 60
               Master_Log_File: mysql-bin.000001
           Read_Master_Log_Pos: 640
                Relay_Log_File: mysqld-relay-bin.000002
                 Relay_Log_Pos: 555
         Relay_Master_Log_File: mysql-bin.000001
              Slave_IO_Running: Yes
             Slave_SQL_Running: Yes
               Replicate_Do_DB:
           Replicate_Ignore_DB:
            Replicate_Do_Table:
        Replicate_Ignore_Table:
       Replicate_Wild_Do_Table:
   Replicate_Wild_Ignore_Table:
                    Last_Errno: 0
                    Last_Error:
                  Skip_Counter: 0
           Exec_Master_Log_Pos: 640
               Relay_Log_Space: 865
               Until_Condition: None
                Until_Log_File:
                 Until_Log_Pos: 0
            Master_SSL_Allowed: No
            Master_SSL_CA_File:
            Master_SSL_CA_Path:
               Master_SSL_Cert:
             Master_SSL_Cipher:
                Master_SSL_Key:
         Seconds_Behind_Master: 0
 Master_SSL_Verify_Server_Cert: No
                 Last_IO_Errno: 0
                 Last_IO_Error:
                Last_SQL_Errno: 0
                Last_SQL_Error:
   Replicate_Ignore_Server_Ids:
              Master_Server_Id: 101
                Master_SSL_Crl:
            Master_SSL_Crlpath:
                    Using_Gtid: No
                   Gtid_IO_Pos:
       Replicate_Do_Domain_Ids:
   Replicate_Ignore_Domain_Ids:
                 Parallel_Mode: conservative
                     SQL_Delay: 0
           SQL_Remaining_Delay: NULL
       Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it
              Slave_DDL_Groups: 0
Slave_Non_Transactional_Groups: 0
    Slave_Transactional_Groups: 0
1 row in set (0.000 sec)


(04) MariaDB Galera Cluster
----------------------------


Configure MariaDB Galera Cluster.
All nodes in cluster become Master-Server in this configuration.
[1]
Install MariaDB on all nodes, refer to here.
[2]	Configure a 1st node like follows.
root@www:~# vi /etc/mysql/mariadb.conf.d/50-server.cnf
# line 28: comment out
#bind-address = 127.0.0.1
# add to the end
[galera]
wsrep_on=ON
wsrep_provider=/usr/lib/galera/libgalera_smm.so
wsrep_cluster_address=gcomm://
binlog_format=row
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2
bind-address=0.0.0.0
# any cluster name
wsrep_cluster_name="MariaDB_Cluster"
# own IP address
wsrep_node_address="10.0.0.31"

root@www:~# galera_new_cluster
root@www:~# systemctl restart mariadb
[3]	Configure other nodes except a 1st node.
root@node01:~# vi /etc/mysql/mariadb.conf.d/50-server.cnf
# line 28: comment out
#bind-address = 127.0.0.1
# add to the end
[galera]
wsrep_on=ON
wsrep_provider=/usr/lib/galera/libgalera_smm.so
# specify all nodes in cluster
wsrep_cluster_address="gcomm://10.0.0.31,10.0.0.51"
binlog_format=row
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2
bind-address=0.0.0.0
# any cluster name
wsrep_cluster_name="MariaDB_Cluster"
# own IP address
wsrep_node_address="10.0.0.51"

root@node01:~# systemctl restart mariadb
[4]	The Cluster settings is OK, Make sute the status like follows. It's OK if [wsrep_local_state_comment] is [Synced].
root@node01:~# mysql -u root -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 38
Server version: 10.3.15-MariaDB-1 Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> show status like 'wsrep_%';
+------------------------------+---------------------------------------------------+
| Variable_name                | Value                                             |
+------------------------------+---------------------------------------------------+
| wsrep_apply_oooe             | 0.000000                                          |
| wsrep_apply_oool             | 0.000000                                          |
| wsrep_apply_window           | 0.000000                                          |
| wsrep_causal_reads           | 0                                                 |
| wsrep_cert_deps_distance     | 0.000000                                          |
| wsrep_cert_index_size        | 0                                                 |
| wsrep_cert_interval          | 0.000000                                          |
| wsrep_cluster_conf_id        | 2                                                 |
| wsrep_cluster_size           | 2                                                 |
| wsrep_cluster_state_uuid     | 9ef6c32b-b4c4-11e9-97d4-6a3d56e80169              |
| wsrep_cluster_status         | Primary                                           |
| wsrep_cluster_weight         | 2                                                 |
| wsrep_commit_oooe            | 0.000000                                          |
| wsrep_commit_oool            | 0.000000                                          |
| wsrep_commit_window          | 0.000000                                          |
| wsrep_connected              | ON                                                |
| wsrep_desync_count           | 0                                                 |
| wsrep_evs_delayed            |                                                   |
| wsrep_evs_evict_list         |                                                   |
| wsrep_evs_repl_latency       | 0.000397028/0.000799161/0.000957393/0.000207351/5 |
| wsrep_evs_state              | OPERATIONAL                                       |
| wsrep_flow_control_paused    | 0.000000                                          |
| wsrep_flow_control_paused_ns | 0                                                 |
| wsrep_flow_control_recv      | 0                                                 |
| wsrep_flow_control_sent      | 0                                                 |
| wsrep_gcomm_uuid             | c7717123-b4c4-11e9-b416-0adc197bd578              |
| wsrep_incoming_addresses     | 10.0.0.31:3306,10.0.0.51:3306                     |
| wsrep_last_committed         | 0                                                 |
| wsrep_local_bf_aborts        | 0                                                 |
| wsrep_local_cached_downto    | 18446744073709551615                              |
| wsrep_local_cert_failures    | 0                                                 |
| wsrep_local_commits          | 0                                                 |
| wsrep_local_index            | 1                                                 |
| wsrep_local_recv_queue       | 0                                                 |
| wsrep_local_recv_queue_avg   | 0.000000                                          |
| wsrep_local_recv_queue_max   | 1                                                 |
| wsrep_local_recv_queue_min   | 0                                                 |
| wsrep_local_replays          | 0                                                 |
| wsrep_local_send_queue       | 0                                                 |
| wsrep_local_send_queue_avg   | 0.000000                                          |
| wsrep_local_send_queue_max   | 1                                                 |
| wsrep_local_send_queue_min   | 0                                                 |
| wsrep_local_state            | 4                                                 |
| wsrep_local_state_comment    | Synced                                            |
| wsrep_local_state_uuid       | 9ef6c32b-b4c4-11e9-97d4-6a3d56e80169              |
| wsrep_open_connections       | 0                                                 |
| wsrep_open_transactions      | 0                                                 |
| wsrep_protocol_version       | 9                                                 |
| wsrep_provider_name          | Galera                                            |
| wsrep_provider_vendor        | Codership Oy <info@codership.com>                 |
| wsrep_provider_version       | 3.25(rddf9876)                                    |
| wsrep_ready                  | ON                                                |
| wsrep_received               | 3                                                 |
| wsrep_received_bytes         | 231                                               |
| wsrep_repl_data_bytes        | 0                                                 |
| wsrep_repl_keys              | 0                                                 |
| wsrep_repl_keys_bytes        | 0                                                 |
| wsrep_repl_other_bytes       | 0                                                 |
| wsrep_replicated             | 0                                                 |
| wsrep_replicated_bytes       | 0                                                 |
| wsrep_thread_count           | 2                                                 |
+------------------------------+---------------------------------------------------+
61 rows in set (0.003 sec)




PostgreSQL
***********
(01) Install PostgreSQL
-------------------------

Install PostgreSQL to configure database server.
[1]	Install and start PostgreSQL.
root@ knows1:~# apt -y install postgresql
root@ knows1:~# vi /etc/postgresql/11/main/postgresql.conf
# line 59: uncomment and change if you allow accesses from remote hosts
listen_addresses = '*'
root@ knows1:~# systemctl restart postgresql
[2]	Set PostgreSQL admin user's password and add a user and also add a test database.
# set password
root@ knows1:~# su - postgres
postgres@ knows1:~$ psql -c "alter user postgres with password 'password'"
ALTER ROLE
# add DB user [debian] as an example
postgres@ knows1:~$ createuser debian
# create a test database (owner is the user above)
postgres@ knows1:~$ createdb testdb -O debian
[3]	Login as a user just added above and operate DataBase as test operation.
# show Databases
debian@ knows1:~$ psql -l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 testdb    | debian   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
(4 rows)

# connect to test DB
debian@ knows1:~$ psql testdb
psql (11.4 (Debian 11.4-1))
Type "help" for help.

# set password
testdb=# alter user debian with password 'password';
ALTER ROLE

# create a test table
testdb=# create table test ( no int,name text );
CREATE TABLE

# insert test data
testdb=# insert into test (no,name) values (1,'debian');
INSERT 0 1

# show tables
testdb=# select * from test;
 no |  name
----+--------
  1 | debian
(1 row)

# delete test table
testdb=# drop table test;
DROP TABLE

# quit
testdb=# \q

# delete test database
debian@ knows1:~$ dropdb testdb



(02) Install phpPgAdmin
-------------------------


Install phpPgAdmin to operate PostgreSQL on web browser from Client computers.
[1]
Install Apache httpd, refer to here.
[2]
Install PHP, refer to here.
[3]	Install phpPgAdmin.
root@ knows1:~# apt -y install phppgadmin php-pgsql
root@ knows1:~# vi /etc/phppgadmin/config.inc.php
# line 93: change to false if you allow to login with priviledged user like postgres, root
$conf['extra_login_security'] = false;
# line 99: change (show only own databases)
$conf['owned_only'] = true;
root@ knows1:~# vi /etc/postgresql/11/main/pg_hba.conf
# line 92: change like follows and add access permission
host    all             all             127.0.0.1/32            md5
host    all             all             10.0.0.0/24             md5
host    all             all             ::1/128                 md5

root@ knows1:~# vi /etc/apache2/conf-enabled/phppgadmin.conf
# line 12: add access permission
Require local
Require ip 10.0.0.0/24
root@ knows1:~# systemctl restart postgresql apache2
[4]	Access to the [http://(hostname or IP address)/phppgadmin/] and click [PostgreSQL] on the left pane.

[5]	Autenticate a user and password which is in PostgreSQL.

[6]	Just logined. You can operate PostgreSQL on here.


(03) PostgreSQL over SSL/TLS
---------------------------------

Enable SSL/TLS connection to PostgreSQL.
[1]
Get SSL certificates, refer to here.
This example is based on the case that SSL certificates are gotten under the [/etc/letsencrypt/live/ knows1.srv.world] and set the [Common Name] as [ knows1.srv.world].
[2]	Copy certificates created above and configure PostgreSQL.
root@ knows1:~# cp /etc/letsencrypt/live/ knows1.srv.world/* /etc/postgresql/11/main/
root@ knows1:~# chown postgres. /etc/postgresql/11/main/*.pem
root@ knows1:~# chmod 600 /etc/postgresql/11/main/*.pem
root@ knows1:~# vi /etc/postgresql/11/main/postgresql.conf
# line 98: change
ssl = on
# line 100: change to your own certs
ssl_ca_file = '/etc/postgresql/11/main/chain.pem'
ssl_cert_file = '/etc/postgresql/11/main/cert.pem'
ssl_key_file = '/etc/postgresql/11/main/privkey.pem'
root@ knows1:~# vi /etc/postgresql/11/main/pg_hba.conf
# line 92: change like follows
# all users except localhost with peer are required SSL/TLS
# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
#host    all             all             127.0.0.1/32            md5
hostssl all             all             127.0.0.1/32            md5
hostssl all             all             10.0.0.0/24             md5
hostssl all             all             ::1/128                 md5

root@ knows1:~# systemctl restart postgresql
# verify accessing
# no SSL/TLS connection from localhost with peer
debian@ knows1:~$ psql testdb
psql (11.4 (Debian 11.4-1))
Type "help" for help.

testdb=>

# for other connections, connection is on SSL/TLS
debian@ knows1:~$ psql "user=debian host=localhost dbname=testdb"
Password:
psql (11.4 (Debian 11.4-1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

testdb=>

# from other hosts, connection is on SSL/TLS
debian@node01:~$ psql "host= knows1.srv.world dbname=testdb"
Password:
psql (11.4 (Debian 11.4-1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

testdb=>


(04) Streaming Replication
---------------------------

Configure PostgreSQL Streaming Replication.
This configuration is Master/Slave settings.
[1]
Install PostgreSQL Server on all Nodes, refer to here.
[2]	Configure Master Host.
root@ knows1:~# vi /etc/postgresql/11/main/postgresql.conf
# line 59: uncomment and change
listen_addresses = '*'
# line 184: uncomment
wal_level = replica
# line 189: uncomment
synchronous_commit = on
# line 239: uncomment (max number of concurrent connections from streaming clients)
max_wal_senders = 10
# line 241: uncomment and change (minimum number of past log file segments)
wal_keep_segments = 10
# line 253: uncomment and change
synchronous_standby_names = '*'
root@ knows1:~# vi /etc/postgresql/11/main/pg_hba.conf
# end line : change like follows
# host replication [replication user] [allowed IP addresses] trust
#host    replication     all             127.0.0.1/32            md5
#host    replication     all             ::1/128                 md5
host    replication     rep_user         127.0.0.1/32            trust
host    replication     rep_user         10.0.0.30/32            trust
host    replication     rep_user         10.0.0.51/32            trust

# create a user for replication
root@ knows1:~# su - postgres
postgres@ knows1:~$ createuser --replication -P rep_user
Enter password for new role:
Enter it again:
postgres@ knows1:~$ exit
root@ knows1:~# mkdir /var/lib/postgresql/11/archive
root@ knows1:~# chown postgres. /var/lib/postgresql/11/archive
root@ knows1:~# systemctl restart postgresql
[3]	Configure Slave Host.
root@node01:~# systemctl stop postgresql
root@node01:~# rm -rf /var/lib/postgresql/11/main/*
root@node01:~# su - postgres
# get backup from Master Server
postgres@node01:~$ pg_basebackup -R -h  knows1.srv.world -U rep_user -D /var/lib/postgresql/11/main -P
23771/23771 kB (100%), 1/1 tablespace
postgres@node01:~$ exit
root@node01:~# vi /etc/postgresql/11/main/postgresql.conf
# line 59: uncomment and change
listen_addresses = '*'
# line 263: uncomment
hot_standby = on
root@node01:~# vi /var/lib/postgresql/11/main/recovery.conf
# add application_name (any name : specify hostname and so on)
standby_mode = 'on'
primary_conninfo = 'user=rep_user passfile=''/var/lib/postgresql/.pgpass'' host= knows1.srv.world port=5432 sslmode=prefer sslcompression=0 krbsrvname=postgres target_session_attrs=any application_name=node01'
root@node01:~# systemctl start postgresql
[4]	That's OK if result of the command below is like follows. Make sure the setting works normally to create databases on Master Server.
postgres@ knows1:~$ psql -c "select usename, application_name, client_addr, state, sync_priority, sync_state from pg_stat_replication;"
 usename  | application_name | client_addr |   state   | sync_priority | sync_state
----------+------------------+-------------+-----------+---------------+------------
 rep_user | node01           | 10.0.0.51   | streaming |             1 | sync
(1 row)




#######################
| FTP_Mail Server |
#######################
 FTP Server
***********
(01) Install Vsftpd
----------------------


Install Vsftpd to configure FTP server to transfer files.
[1]	Install Vsftpd.
root@www:~# apt -y install vsftpd
root@www:~# vi /etc/vsftpd.conf
# line 31: uncomment
write_enable=YES
# line 99,100: uncomment ( allow ascii mode transfer )
ascii_upload_enable=YES
ascii_download_enable=YES
# line 122: uncomment ( enable chroot )
chroot_local_user=YES
# line 123: uncomment ( enable chroot list )
chroot_list_enable=YES
# line 125: uncomment ( enable chroot list )
chroot_list_file=/etc/vsftpd.chroot_list
# line 131: uncomment
ls_recurse_enable=YES
# add to the end : specify chroot directory
# if not specified, users' home directory equals FTP home directory
local_root=public_html
# turn off seccomp filter if cannot login normally
seccomp_sandbox=NO
root@www:~# vi /etc/vsftpd.chroot_list
# add users you allow to move over their home directory
debian
root@www:~# systemctl restart vsftpd

(02) Install ProFTPD
----------------------

Install ProFTPD to configure FTP server to transfer files.
[1]	Install ProFTPD.
root@www:~# apt -y install proftpd
root@www:~# vi /etc/proftpd/proftpd.conf
# line 11: turn off if not need IPv6
UseIPv6 off
# line 15: change to your hostname
ServerName "www.srv.world"
# line 36: uncomment ( specify root directory for chroot )
DefaultRoot ~
root@www:~# vi /etc/ftpusers
# add users you prohibit FTP connection
test
root@www:~# systemctl restart proftpd

(03) Install Pure-FTPd
------------------------
2019/07/30

Install Pure-FTPd to configure FTP server to transfer files.
[1]	Install and Configure Pure-FTPd.
root@www:~# apt -y install pure-ftpd
# run as a daemon
root@www:~# echo "yes" > /etc/pure-ftpd/conf/Daemonize
# prohibit Anonymous
root@www:~# echo "yes" > /etc/pure-ftpd/conf/NoAnonymous
# enable chroot
root@www:~# echo "yes" > /etc/pure-ftpd/conf/ChrootEveryone
# only IPV4 if not need IPv6
root@www:~# echo "yes" > /etc/pure-ftpd/conf/IPV4Only
root@www:~# systemctl restart pure-ftpd

(04) FTP Client (Debian)
---------------------------


Configure Client computer to connect to FTP Server. The example below is for Debian.
[1]	Install FTP Client.
root@client:~# apt -y install lftp
[2]	The connection with root account is prohibited by default, so access with a common user to FTP Server.
# lftp [option] [hostname]
 knows1@client:~$ lftp -u debian www.srv.world
Password:     # password of the user
lftp debian@www.srv.world:~>
# show current directory on FTP server
lftp debian@www.srv.world:~> pwd
ftp://debian@www.srv.world
# show current directory on local server
lftp debian@www.srv.world:~> !pwd
/home/debian
# show files in current directory on FTP server
lftp debian@www.srv.world:~> ls
drwxr-xr-x    2 1000     1000           23 May 9 01:33 public_html
-rw-r--r--    1 1000     1000          399 May 9 16:32 test.py
# show files in current directory on local server
lftp debian@www.srv.world:~> !ls -l
total 12
-rw-rw-r-- 1 debian debian 10 May 9 14:30 debian.txt
-rw-rw-r-- 1 debian debian 10 May 9 14:59 test2.txt
-rw-rw-r-- 1 debian debian 10 May 9 14:59 test.txt
# change directory
lftp debian@www.srv.world:~> cd public_html
lftp debian@www.srv.world:~/public_html> pwd
ftp://debian@www.srv.world/%2Fhome/debian/public_html
# upload a file to FTP server
# "-a" means ascii mode ( default is binary mode )
lftp debian@www.srv.world:~> put -a debian.txt test.txt
22 bytes transferred
Total 2 files transferred
lftp debian@www.srv.world:~> ls
drwxr-xr-x    2 1000     1000           23 May 9 01:33 public_html
-rw-r--r--    1 1000     1000           10 May 9 17:01 debian.txt
-rw-r--r--    1 1000     1000          399 May 9 16:32 test.py
-rw-r--r--    1 1000     1000           10 May 9 17:01 test.txt
# upload some files to FTP server
lftp debian@www.srv.world:~> mput -a test.txt test2.txt
22 bytes transferred
Total 2 files transferred
lftp debian@www.srv.world:~> ls
drwxr-xr-x    2 1000     1000           23 May 9 01:33 public_html
-rw-r--r--    1 1000     1000          399 May 9 16:32 test.py
-rw-r--r--    1 1000     1000           10 May 9 17:06 test.txt
-rw-r--r--    1 1000     1000           10 May 9 17:06 test2.txt
# download a file from FTP server
# "-a" means ascii mode ( default is binary mode )
lftp debian@www.srv.world:~> get -a test.py
416 bytes transferred
# download some files from FTP server
lftp debian@www.srv.world:~> mget -a test.txt test2.txt
20 bytes transferred
Total 2 files transferred
# create a directory in current directory on FTP Server
lftp debian@www.srv.world:~> mkdir testdir
mkdir ok, `testdir' created
lftp debian@www.srv.world:~> ls
drwxr-xr-x    2 1000     1000           23 May 9 01:33 public_html
-rw-r--r--    1 1000     1000          399 May 9 16:32 test.py
-rw-r--r--    1 1000     1000           10 May 9 17:06 test.txt
-rw-r--r--    1 1000     1000           10 May 9 17:06 test2.txt
drwxr-xr-x    2 1000     1000            6 May 9 17:16 testdir
226 Directory send OK.
# delete a direcroty in current directory on FTP Server
lftp debian@www.srv.world:~> rmdir testdir
rmdir ok, `testdir' removed
lftp debian@www.srv.world:~> ls
drwxr-xr-x    2 1000     1000           23 May 9 01:33 public_html
-rw-r--r--    1 1000     1000          399 May 9 16:32 test.py
-rw-r--r--    1 1000     1000           10 May 9 17:06 test.txt
-rw-r--r--    1 1000     1000           10 May 9 17:06 test2.txt
# delete a file in current directory on FTP Server
lftp debian@www.srv.world:~> rm test2.txt
rm ok, `test2.txt' removed
lftp debian@www.srv.world:~> ls
drwxr-xr-x    2 1000     1000           23 May 9 01:33 public_html
-rw-r--r--    1 1000     1000          399 May 9 16:32 test.py
-rw-r--r--    1 1000     1000           10 May 9 17:06 test.txt
# delete some files in current directory on FTP Server
lftp debian@www.srv.world:~> mrm debian.txt test.txt
rm ok, 2 files removed
lftp debian@www.srv.world:~> ls
drwxr-xr-x    2 1000     1000           23 May 9 01:33 public_html
# execute commands with ![command]
lftp debian@www.srv.world:~> !cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
...
...
debian:x:1001:1001::/home/debian:/bin/bash
# exit
lftp debian@www.srv.world:~> quit
221 Goodbye.

(05) FTP Client (Windows)
--------------------------

Configure Client computer to connect to FTP Server. The example below is for Windows.
[1]
For example, use FileZilla for FTP Client software. Download FileZilla from the follows.
⇒ https://filezilla-project.org/download.php?type=client
[2]	Install FileZilla to your Windows PC and start it, then following screen is shown.
Input your FTP's [Hostname], [Username]. [Password], like follows. Next Click [Connect].

[3]	Just connected. It's possible to transfer files on it.


(06) Vsftpd over SSL/TLS
-------------------------
Configure Vsftpd to use SSL/TLS.
[1]	Create self-signed certificates. but if you use valid certificates like from Let's Encrypt or others, you don't need to create this one.
root@www:~# cd /etc/ssl/private
root@www:/etc/ssl/private# openssl req -x509 -nodes -newkey rsa:2048 -keyout vsftpd.pem -out vsftpd.pem -days 365
Generating a 2048 bit RSA private key
.......................+++
........+++
writing new private key to 'vsftpd.pem'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:JP   # country code
State or Province Name (full name) [Some-State]:Hiroshima       # State
Locality Name (eg, city) []:Hiroshima  # city
Organization Name (eg, company) [Internet Widgits Pty Ltd]:GTS  # company
Organizational Unit Name (eg, section) []:Server World          # department
Common Name (e.g. server FQDN or YOUR name) []:www.srv.world    # server's FQDN
Email Address []:root@srv.world        # admin's email

root@www:/etc/ssl/private# chmod 600 vsftpd.pem
[2]	Configure Vsftpd.
root@www:~# vi /etc/vsftpd.conf
# line 149: change like follows
rsa_cert_file=/etc/ssl/private/vsftpd.pem
rsa_private_key_file=/etc/ssl/private/vsftpd.pem
ssl_enable=YES
ssl_ciphers=HIGH
ssl_tlsv1=YES
ssl_sslv2=NO
ssl_sslv3=NO
force_local_data_ssl=YES
force_local_logins_ssl=YES
root@www:~# systemctl restart vsftpd
FTP Client : Debian

Configure FTP Client to use FTPS connection.
[3]	Install FTP Client on Debian and configure like follows.
debian@client:~$ vi ~/.lftprc
# create new
set ftp:ssl-auth TLS
set ftp:ssl-force true
set ftp:ssl-protect-list yes
set ftp:ssl-protect-data yes
set ftp:ssl-protect-fxp yes
set ssl:verify-certificate no
bionic@client:~$ lftp -u debian www.srv.world
Password:
lftp debian@www.srv.world:~>
FTP Client : Windows
[4]	For example of FileZilla on Windows,
Open [File] - [Site Manager].

[5]	Input connection infomation like follows, and for encryption field, select [Require explicit FTP over TLS].

[6]	User's Password is required. Input it.

[7]	If you set self-signed certificate, following warning is shown, it's no ploblem. Go next.

[8]	Just connected with FTPS.


(07) Proftpd over SSL/TLS
-----------------------------

Configure ProFTPD to use SSL/TLS.
[1]	Create self-signed certificates. but if you use valid certificates like from Let's Encrypt or others, you don't need to create this one.
root@www:~# cd /etc/ssl/private
root@www:/etc/ssl/private# openssl req -x509 -nodes -newkey rsa:2048 -keyout proftpd.pem -out proftpd.pem -days 365
Generating a 2048 bit RSA private key
....................................+++
................................+++
writing new private key to 'proftpd.pem'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:JP   # country code
State or Province Name (full name) [Some-State]:Hiroshima       # State
Locality Name (eg, city) []:Hiroshima  # city
Organization Name (eg, company) [Internet Widgits Pty Ltd]:GTS  # company
Organizational Unit Name (eg, section) []:Server World          # department
Common Name (e.g. server FQDN or YOUR name) []:www.srv.world    # server's FQDN
Email Address []:root@srv.world        # admin's email

root@www:/etc/ssl/private# chmod 600 proftpd.pem
[2]	Configure ProFTPD.
root@www:~# vi /etc/proftpd/proftpd.conf
# line 140: uncomment
Include /etc/proftpd/tls.conf
root@www:~# vi /etc/proftpd/tls.conf
# line 10-12: uncomment
TLSEngine               on
TLSLog                  /var/log/proftpd/tls.log
TLSProtocol             TLSv1.2

# line 27-28: uncomment and change
TLSRSACertificateFile          /etc/ssl/private/proftpd.pem
TLSRSACertificateKeyFile       /etc/ssl/private/proftpd.pem

root@www:~# systemctl restart proftpd
FTP Client : Debian

Configure FTP Client to use FTPS connection.
[3]	Install FTP Client on Debian and configure like follows.
debian@client:~$ vi ~/.lftprc
# create new
set ftp:ssl-auth TLS
set ftp:ssl-force true
set ftp:ssl-protect-list yes
set ftp:ssl-protect-data yes
set ftp:ssl-protect-fxp yes
set ssl:verify-certificate no
bionic@client:~$ lftp -u debian www.srv.world
Password:
lftp debian@www.srv.world:~>
FTP Client : Windows
[4]	For example of FileZilla on Windows,
Open [File] - [Site Manager].

[5]	Input connection infomation like follows, and for encryption field, select [Require explicit FTP over TLS].

[6]	User's Password is required. Input it.

[7]	If you set self-signed certificate, following warning is shown, it's no ploblem. Go next.

[8]	Just connected with FTPS.


(08) Pure-FTPd over SSL/TLS
----------------------------


Configure Pure-FTPd to use SSL/TLS.
[1]	Create self-signed certificates. but if you use valid certificates like from Let's Encrypt or others, you don't need to create this one.
root@www:~# cd /etc/ssl/private
root@www:/etc/ssl/private# openssl req -x509 -nodes -newkey rsa:2048 -keyout pure-ftpd.pem -out pure-ftpd.pem -days 365
Generating a 2048 bit RSA private key
......+++
....................................................................+++
writing new private key to 'pure-ftpd.pem'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:JP   # country code
State or Province Name (full name) [Some-State]:Hiroshima       # State
Locality Name (eg, city) []:Hiroshima  # city
Organization Name (eg, company) [Internet Widgits Pty Ltd]:GTS  # company
Organizational Unit Name (eg, section) []:Server World          # department
Common Name (e.g. server FQDN or YOUR name) []:www.srv.world    # server's FQDN
Email Address []:root@srv.world        # admin's email

root@www:/etc/ssl/private# chmod 600 pure-ftpd.pem
[2]	Configure Pure-FTPd.
root@www:~# echo "2" > /etc/pure-ftpd/conf/TLS
root@www:~# systemctl restart pure-ftpd
FTP Client : Debian

Configure FTP Client to use FTPS connection.
[3]	Install FTP Client on Debian and configure like follows.
debian@client:~$ vi ~/.lftprc
# create new
set ftp:ssl-auth TLS
set ftp:ssl-force true
set ftp:ssl-protect-list yes
set ftp:ssl-protect-data yes
set ftp:ssl-protect-fxp yes
set ssl:verify-certificate no
bionic@client:~$ lftp -u debian www.srv.world
Password:
lftp debian@www.srv.world:~>
FTP Client : Windows
[4]	For example of FileZilla on Windows,
Open [File] - [Site Manager].

[5]	Input connection infomation like follows, and for encryption field, select [Require explicit FTP over TLS].

[6]	User's Password is required. Input it.

[7]	If you set self-signed certificate, following warning is shown, it's no ploblem. Go next.

[8]	Just connected with FTPS.



MAIL Server
************
(01) Install Postfix
(02) Install Dovecot
(03) Add Mail Accounts (OS User)
(04) Email Client's Setting
(05) Add Mail Accounts (Virtual User)
(06) SSL/TLS Setting
(07) Virtual Domain Setting
(08) Postfix + Clamav + Amavisd
(09) Mail Log Report : pflogsum

#######################
| Samba Server |
#######################

Samba
*******
(01) Configure Fully accessed share Folder
(02) Configure Limited share Folder
(03) Join in AD Domain with Samba Winbind
(04) Samba AD DC : Configure DC
(05) Samba AD DC : User Management
(06) Samba AD DC : Join in Domain

#######################
| Proxy_Load Balance |
#######################
Squid
*****
(01) Install Squid(02) Proxy Clients Setting
(03) Configure Basic Authentication
(04) Reverse Proxy Setting
(05) Squid + SquidGuard
(06) Squid Log Report : LightSquid



HAProxy
*******
(01) HTTP Load Balancing
(02) SSL/TLS Setting
(03) Refer to the Statistics (Web)
(04) Refer to the Statistics (CUI)
(05) Layer4 Mode Load Balancing

#######################
| Monitoring          |
#######################

NetData
********
(01) Install NetData


SysStat
********
(01) Install SysStat(02) SysStat Howto

Zabbix 4.0 LTS
***************
(01) Install Zabbix 4.0
(02) Initial Setup
(03) Change Admin Password
(04) Set Monitoring Target Host
(05) Set SMTP Server for Notification
(06) Notification Email Setting
(07) Add Monitoring Target Host (Debian)
(08) Add Monitoring Target Host (Windows)
(09) Add Monitoring Target Item

#######################
| Desktop Environment |
#######################

(01) GNOME Desktop Environment
(02) KDE Desktop Environment
(03) Cinnamon Desktop Environment
(04) MATE Desktop Environment
(05) Xfce Desktop Environment
(06) Configure VNC Server
(07) VNC Client : noVNC
(08) Configure Xrdp Server

#######################
|         Others      |
#######################

Create SSL Certificates (Self-Sign)
Get SSL Certificates (Let's Encrypt)
Set System Timezone
Set KeyboardMap
Set System Locale
Set Hostname
Join in Active Directory Domain
Install Clam AntiVirus

###############################فهم الانظمة##################


###############Server Guide###################


1- Introduction
2- Installation
3- Package Management
4- Networking
DM-Multipath
Remote Administration
Network Authentication
Domain Name Service (DNS)
Security
Monitoring
Web Servers
Databases
LAMP Applications
File Servers
Email Services
Chat Applications
Version Control System
Samba
Backups
Virtualization
Clustering
VPN
Other Useful Applications
Appendix

###############
{4}Networking
###################


# Networking

تتكون الشبكات من جهازين أو أكثر , مثل الكمبيوتر و الطابعات , تتصل مع بعضها البعض إما من خلال الكابلات المادية أو الروابط اللاسلكية , الهدف من هذا التواضل مشاركة المعلومات وتوزيعها بين الأجهزة المتصلة.





1- Network Configuration

$ sudo nano /etc/network/interfaces





